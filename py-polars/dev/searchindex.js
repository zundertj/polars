Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_index_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 95, 113, 123, 126, 127, 224, 242, 254, 547, 624, 649, 918], "refer": [0, 29, 97, 98, 101, 131, 242, 392, 414, 473, 547, 817, 881, 918], "input": [0, 60, 88, 97, 98, 101, 127, 138, 149, 177, 191, 197, 219, 222, 242, 254, 354, 388, 399, 408, 444, 496, 498, 500, 501, 503, 514, 515, 523, 524, 527, 536, 547, 557, 569, 576, 601, 608, 618, 622, 640, 649, 797, 799, 918], "output": [0, 27, 29, 31, 32, 70, 101, 117, 127, 150, 151, 162, 172, 179, 188, 191, 215, 219, 242, 250, 254, 390, 391, 398, 491, 496, 504, 523, 534, 547, 557, 577, 578, 587, 591, 592, 601, 618, 621, 624, 640, 649, 907, 918], "seri": [0, 1, 22, 51, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 90, 95, 116, 117, 119, 123, 127, 134, 142, 144, 146, 147, 152, 155, 156, 158, 160, 168, 169, 173, 184, 185, 199, 203, 208, 209, 223, 242, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 266, 267, 268, 269, 274, 277, 278, 285, 286, 289, 290, 291, 294, 300, 301, 305, 306, 318, 320, 322, 325, 328, 330, 332, 335, 339, 340, 342, 345, 348, 356, 357, 363, 367, 369, 371, 372, 373, 374, 375, 377, 378, 379, 389, 390, 410, 414, 415, 416, 417, 418, 420, 432, 433, 436, 439, 440, 447, 462, 467, 473, 477, 482, 483, 484, 485, 490, 496, 497, 499, 502, 505, 507, 508, 509, 515, 516, 518, 520, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 535, 536, 537, 538, 539, 540, 547, 557, 573, 618, 623, 640, 912, 914, 917, 919, 922, 923, 924], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 51, 60, 61, 62, 63, 64, 65, 67, 68, 69, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 112, 115, 117, 118, 240, 241, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 291, 292, 293, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 520, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 547, 557, 563, 565, 569, 570, 573, 574, 577, 578, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 601, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 648, 649, 669, 687, 696, 711, 712, 862, 865, 877, 878, 888, 897, 898, 907, 918], "lazyfram": [0, 1, 48, 50, 60, 61, 62, 63, 64, 67, 68, 108, 109, 110, 111, 112, 113, 115, 119, 166, 178, 242, 291, 360, 547, 557, 639, 925], "express": [0, 65, 67, 70, 117, 119, 120, 127, 138, 140, 142, 149, 175, 179, 187, 191, 197, 219, 222, 224, 242, 250, 251, 253, 254, 264, 271, 273, 291, 302, 303, 304, 307, 313, 315, 319, 336, 354, 357, 360, 367, 369, 373, 376, 381, 384, 389, 390, 391, 392, 396, 397, 398, 399, 408, 410, 411, 412, 417, 431, 432, 433, 435, 437, 442, 444, 448, 456, 457, 473, 479, 482, 488, 490, 493, 497, 498, 500, 501, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 522, 523, 524, 527, 529, 531, 532, 533, 534, 536, 537, 540, 546, 557, 563, 568, 569, 570, 573, 576, 595, 601, 603, 604, 605, 606, 608, 618, 619, 622, 624, 640, 649, 667, 669, 700, 701, 702, 710, 719, 740, 762, 774, 835, 842, 856, 864, 865, 918], "extend": [0, 88, 242, 357, 547, 557, 648, 762, 918], "function": [0, 29, 61, 62, 63, 64, 69, 86, 97, 98, 101, 108, 118, 127, 131, 137, 144, 171, 178, 179, 207, 210, 213, 214, 224, 242, 251, 254, 291, 313, 340, 351, 352, 353, 390, 391, 408, 420, 421, 422, 423, 424, 425, 427, 428, 429, 441, 486, 494, 496, 507, 508, 515, 516, 518, 523, 531, 547, 557, 587, 591, 594, 615, 624, 640, 649, 687, 710, 711, 744, 756, 757, 758, 759, 823, 837, 838, 844, 849, 901, 918], "data": [0, 1, 5, 15, 18, 28, 29, 34, 51, 60, 61, 63, 68, 75, 76, 80, 82, 85, 86, 87, 88, 89, 90, 91, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 115, 116, 118, 119, 120, 126, 127, 128, 129, 139, 148, 149, 150, 162, 163, 164, 166, 177, 178, 182, 187, 188, 195, 202, 206, 207, 219, 221, 240, 242, 254, 299, 318, 341, 348, 368, 375, 377, 414, 430, 431, 441, 473, 486, 488, 501, 534, 547, 557, 561, 562, 570, 576, 577, 594, 605, 606, 618, 640, 648, 649, 694, 699, 703, 716, 718, 752, 817, 833, 834, 844, 849, 881, 899, 900, 901, 902, 904, 909, 917, 918], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 70, 75, 85, 87, 88, 89, 90, 91, 95, 97, 98, 100, 101, 108, 109, 114, 115, 116, 119, 122, 123, 127, 144, 148, 150, 151, 152, 163, 202, 206, 207, 209, 211, 242, 254, 278, 291, 299, 300, 302, 303, 304, 320, 322, 325, 328, 330, 332, 335, 339, 342, 354, 365, 371, 373, 374, 392, 417, 468, 469, 470, 473, 486, 496, 501, 510, 511, 512, 514, 515, 522, 547, 557, 563, 568, 570, 577, 578, 595, 604, 605, 606, 613, 640, 674, 687, 694, 696, 700, 701, 702, 720, 722, 725, 731, 733, 736, 739, 743, 746, 770, 844, 876, 877, 878, 899, 900, 902, 910, 918], "config": [0, 60, 191, 219, 242, 557, 601, 618, 640], "except": [0, 153, 165, 167, 200, 242, 514, 557, 583, 640, 771, 795, 890, 900, 909, 918], "test": [0, 101, 557, 579, 586, 640], "util": [0, 518, 557, 570, 640], "sql": [0, 28, 48, 99, 164, 242, 557], "These": [1, 29, 124, 242, 345, 546, 749], "allow": [1, 29, 51, 75, 86, 108, 110, 111, 112, 113, 119, 120, 126, 162, 165, 166, 187, 188, 189, 207, 221, 242, 336, 416, 431, 473, 547, 582, 583, 587, 591, 605, 606, 619, 640, 740, 819, 834, 836, 881, 901, 918], "you": [1, 12, 29, 33, 60, 85, 87, 88, 89, 91, 95, 97, 98, 101, 102, 106, 108, 115, 123, 127, 135, 139, 162, 165, 175, 187, 188, 204, 206, 210, 224, 242, 254, 273, 302, 303, 304, 360, 369, 390, 392, 416, 421, 422, 423, 424, 425, 427, 428, 429, 458, 461, 473, 497, 507, 516, 547, 563, 566, 579, 583, 586, 604, 606, 624, 640, 648, 649, 669, 700, 701, 702, 774, 819, 866, 869, 881, 900, 909, 918], "regist": [1, 61, 62, 63, 64], "custom": [1, 29, 61, 62, 63, 64, 127, 224, 242, 254, 291, 390, 420, 496, 523, 547, 587, 624, 640, 649, 687, 823, 918], "dedic": [1, 86, 162, 188, 242], "namespac": [1, 241, 546, 557, 639], "underli": [1, 71, 78, 85, 87, 88, 89, 91, 106, 119, 120, 139, 162, 163, 188, 202, 242, 295, 318, 319, 321, 324, 326, 327, 329, 331, 333, 334, 337, 338, 339, 341, 346, 347, 348, 349, 416, 430, 448, 450, 547, 640, 648, 690, 718, 719, 721, 724, 726, 730, 732, 735, 737, 738, 741, 742, 743, 745, 750, 751, 752, 753, 819, 833, 844, 856, 858, 896, 900, 918], "polar": [1, 242, 546, 547, 557, 640, 918, 925, 926], "class": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 90, 117, 118, 206, 207, 242, 547, 557, 640, 899, 900, 918, 925], "without": [1, 5, 69, 100, 103, 107, 109, 113, 213, 214, 242, 254, 313, 340, 421, 422, 423, 424, 425, 427, 428, 429, 533, 547, 615, 640, 710, 711, 716, 744, 918], "requir": [1, 29, 33, 90, 115, 116, 131, 187, 207, 242, 351, 352, 353, 436, 473, 488, 547, 606, 640, 757, 758, 759, 843, 881, 900, 901, 904, 918], "subclass": [1, 242], "mixin": 1, "expr": [1, 60, 61, 62, 63, 64, 65, 68, 70, 138, 140, 142, 164, 165, 175, 179, 187, 191, 219, 242, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 547, 548, 549, 552, 553, 554, 569, 571, 573, 582, 583, 596, 601, 603, 618, 640, 667, 669, 710, 719, 763, 774, 842, 856, 860, 879, 891, 918], "ar": [1, 5, 10, 14, 17, 29, 33, 51, 70, 77, 84, 85, 86, 87, 88, 89, 90, 91, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 113, 115, 116, 118, 119, 122, 124, 126, 127, 131, 135, 137, 140, 144, 149, 150, 151, 162, 165, 166, 171, 172, 177, 187, 188, 191, 197, 203, 207, 214, 215, 219, 222, 242, 251, 291, 309, 311, 312, 316, 317, 340, 345, 350, 351, 352, 353, 369, 371, 373, 374, 375, 377, 378, 379, 382, 392, 408, 414, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 441, 443, 444, 458, 461, 462, 480, 497, 498, 500, 503, 504, 534, 536, 541, 543, 546, 547, 548, 549, 552, 553, 554, 557, 566, 571, 576, 577, 578, 579, 583, 586, 587, 591, 592, 595, 598, 601, 605, 606, 608, 615, 618, 619, 622, 640, 646, 648, 687, 708, 709, 744, 749, 755, 756, 757, 758, 759, 769, 774, 778, 781, 782, 783, 784, 785, 786, 793, 817, 821, 823, 829, 846, 849, 866, 869, 870, 889, 900, 901, 909, 912, 914, 918, 919, 922, 923, 924], "all": [1, 7, 14, 17, 22, 25, 29, 34, 67, 68, 70, 85, 88, 90, 91, 92, 97, 98, 100, 101, 102, 106, 108, 110, 111, 117, 118, 120, 135, 141, 153, 158, 160, 162, 163, 166, 167, 171, 174, 175, 182, 187, 188, 196, 200, 205, 211, 213, 215, 242, 252, 253, 273, 278, 288, 291, 293, 307, 313, 317, 354, 364, 365, 368, 371, 374, 378, 379, 381, 384, 386, 390, 391, 403, 407, 411, 414, 419, 436, 442, 449, 455, 457, 460, 463, 464, 466, 472, 479, 491, 501, 514, 516, 531, 536, 547, 557, 563, 566, 568, 570, 572, 587, 591, 595, 604, 607, 613, 619, 640, 669, 674, 684, 687, 710, 716, 771, 776, 790, 795, 817, 850, 857, 863, 865, 868, 871, 872, 874, 880, 890, 918], "support": [1, 29, 33, 68, 85, 86, 87, 88, 89, 90, 91, 99, 100, 101, 109, 117, 120, 124, 126, 162, 163, 188, 196, 197, 204, 207, 242, 286, 408, 442, 444, 467, 501, 547, 607, 608, 640, 682, 850, 875, 901, 918], "target": [1, 29, 66, 242, 454, 473, 862, 881], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 60, 67, 68, 69, 85, 87, 88, 89, 90, 91, 94, 95, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 126, 127, 131, 135, 136, 137, 139, 144, 149, 150, 151, 152, 156, 158, 160, 162, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 180, 181, 182, 187, 188, 189, 191, 194, 196, 198, 199, 202, 204, 206, 207, 210, 211, 213, 214, 215, 216, 217, 219, 220, 224, 241, 242, 251, 253, 254, 263, 266, 273, 274, 278, 287, 291, 300, 307, 313, 318, 326, 336, 339, 340, 348, 356, 367, 368, 369, 373, 384, 389, 390, 396, 397, 398, 399, 405, 406, 408, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 433, 435, 436, 437, 442, 443, 444, 459, 460, 465, 466, 472, 473, 476, 487, 488, 489, 490, 491, 494, 497, 502, 505, 507, 509, 515, 516, 518, 533, 537, 547, 557, 558, 560, 563, 566, 568, 570, 576, 577, 578, 580, 583, 587, 591, 592, 595, 598, 601, 603, 604, 605, 606, 607, 613, 615, 618, 619, 620, 621, 624, 639, 640, 648, 649, 658, 661, 669, 670, 674, 683, 696, 710, 711, 716, 718, 719, 726, 740, 743, 744, 752, 756, 761, 768, 769, 775, 780, 781, 787, 789, 791, 794, 798, 800, 801, 802, 803, 805, 806, 808, 809, 811, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 827, 830, 831, 832, 834, 837, 838, 839, 842, 843, 844, 845, 850, 851, 853, 867, 868, 873, 874, 880, 881, 884, 885, 888, 889, 896, 898, 899, 900, 901, 903, 904, 906, 908, 909, 918], "featur": [1, 33, 37, 51, 66, 242], "i": [1, 5, 12, 14, 27, 29, 31, 32, 37, 51, 60, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 81, 83, 85, 86, 87, 88, 89, 90, 91, 94, 97, 98, 99, 100, 102, 106, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 126, 127, 135, 137, 145, 148, 149, 150, 151, 152, 153, 156, 157, 159, 161, 162, 163, 165, 166, 167, 169, 171, 172, 175, 177, 178, 179, 187, 188, 189, 196, 197, 199, 200, 202, 207, 210, 211, 213, 214, 215, 224, 241, 242, 251, 252, 253, 254, 264, 273, 276, 286, 290, 291, 313, 319, 336, 340, 345, 351, 352, 353, 356, 365, 367, 369, 382, 390, 392, 399, 408, 414, 416, 418, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 433, 437, 438, 441, 442, 443, 444, 448, 449, 454, 455, 457, 459, 460, 462, 465, 466, 467, 470, 472, 473, 476, 491, 495, 497, 501, 502, 505, 507, 508, 509, 516, 522, 533, 537, 547, 563, 566, 568, 570, 576, 577, 578, 581, 583, 585, 587, 591, 592, 595, 604, 605, 606, 607, 608, 613, 615, 621, 624, 640, 647, 648, 649, 669, 672, 682, 686, 710, 711, 719, 740, 744, 749, 756, 757, 758, 759, 761, 769, 770, 771, 773, 775, 777, 787, 788, 789, 791, 792, 793, 795, 817, 819, 821, 834, 835, 836, 837, 838, 839, 845, 846, 849, 850, 853, 856, 857, 862, 863, 865, 867, 868, 870, 873, 874, 875, 878, 880, 884, 890, 896, 900, 901, 907, 908, 909, 918], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 51, 60, 69, 70, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 123, 127, 133, 135, 140, 141, 144, 149, 150, 151, 158, 160, 162, 163, 165, 169, 171, 174, 175, 178, 179, 187, 189, 191, 197, 199, 205, 207, 210, 211, 213, 214, 215, 219, 222, 224, 242, 249, 254, 264, 273, 291, 295, 296, 300, 313, 316, 317, 348, 350, 351, 352, 353, 359, 360, 368, 369, 382, 390, 392, 395, 408, 414, 416, 418, 421, 422, 423, 424, 425, 427, 428, 429, 431, 433, 436, 437, 441, 443, 444, 450, 451, 452, 458, 459, 465, 467, 469, 471, 473, 496, 497, 501, 503, 507, 509, 516, 518, 522, 524, 527, 532, 533, 536, 537, 546, 547, 557, 563, 565, 566, 571, 572, 576, 577, 578, 579, 583, 585, 586, 591, 601, 606, 608, 613, 615, 618, 622, 624, 640, 649, 669, 687, 690, 691, 696, 710, 752, 755, 757, 758, 759, 763, 764, 769, 774, 793, 799, 817, 819, 821, 834, 837, 838, 839, 843, 845, 849, 853, 858, 859, 866, 867, 873, 875, 877, 881, 891, 897, 899, 900, 901, 908, 909, 918], "librari": [1, 71, 78, 390, 547, 926], "author": 1, "domain": 1, "specif": [1, 25, 29, 85, 87, 89, 91, 97, 99, 100, 109, 119, 162, 242, 420, 473, 547, 640, 823, 881, 918], "capabl": [1, 29, 242], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 88, 97, 98, 99, 100, 101, 108, 109, 115, 135, 139, 150, 151, 211, 242, 251, 291, 357, 369, 371, 374, 375, 377, 378, 379, 399, 421, 422, 423, 424, 425, 427, 428, 429, 462, 547, 566, 568, 577, 578, 605, 606, 613, 621, 640, 648, 762, 774, 778, 782, 783, 784, 785, 786, 837, 870, 918], "mai": [1, 33, 37, 68, 69, 85, 87, 88, 89, 91, 97, 100, 102, 109, 110, 113, 127, 137, 139, 165, 193, 194, 207, 213, 214, 242, 254, 285, 290, 291, 313, 318, 326, 340, 421, 422, 423, 424, 425, 427, 428, 429, 434, 435, 473, 507, 508, 516, 531, 547, 583, 587, 602, 603, 606, 615, 620, 624, 640, 648, 649, 681, 686, 710, 711, 718, 726, 744, 756, 841, 842, 881, 918], "exist": [1, 28, 29, 100, 109, 119, 219, 242, 319, 618, 640, 719], "belong": [1, 150, 242, 577, 640], "core": [1, 207, 242], "cannot": [1, 86, 97, 98, 102, 115, 127, 189, 224, 242, 295, 392, 431, 450, 469, 478, 547, 604, 624, 640, 649, 690, 834, 858, 877, 918], "overrid": [1, 29, 85, 87, 88, 89, 90, 91, 97, 117, 118, 120, 242, 640], "str": [1, 6, 8, 10, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 60, 61, 62, 63, 64, 66, 69, 70, 85, 87, 88, 89, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 120, 130, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 146, 148, 149, 150, 151, 153, 155, 158, 160, 162, 164, 165, 168, 169, 170, 171, 172, 173, 175, 177, 179, 181, 183, 184, 185, 186, 187, 188, 189, 193, 194, 196, 197, 198, 199, 200, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 249, 250, 254, 269, 270, 271, 276, 277, 278, 286, 289, 291, 315, 320, 336, 339, 340, 343, 345, 354, 356, 358, 360, 362, 367, 369, 373, 376, 391, 392, 398, 400, 408, 411, 417, 419, 421, 422, 423, 424, 425, 427, 428, 429, 435, 436, 443, 444, 477, 478, 479, 482, 493, 494, 495, 496, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 547, 552, 563, 564, 565, 566, 568, 569, 570, 573, 575, 576, 577, 578, 580, 582, 583, 591, 592, 595, 597, 598, 599, 603, 604, 605, 606, 607, 608, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 645, 666, 667, 674, 687, 694, 711, 712, 720, 740, 743, 744, 747, 749, 761, 764, 774, 799, 800, 803, 808, 809, 820, 837, 838, 885, 887, 897, 898, 918, 922], "dt": [1, 60, 151, 242, 554, 578, 640, 924], "attempt": [1, 206, 242], "do": [1, 29, 60, 67, 108, 139, 165, 202, 210, 213, 242, 273, 313, 460, 466, 472, 494, 547, 563, 568, 583, 587, 595, 604, 605, 606, 640, 648, 669, 710, 868, 874, 880, 900, 909, 918], "so": [1, 51, 99, 108, 148, 150, 151, 179, 242, 264, 276, 369, 460, 466, 472, 547, 577, 578, 640, 672, 868, 874, 880], "rais": [1, 13, 17, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 115, 116, 187, 242, 290, 295, 398, 410, 448, 450, 462, 473, 522, 547, 686, 690, 856, 858, 870, 881, 900, 909, 918], "an": [1, 28, 29, 37, 61, 63, 64, 65, 67, 70, 71, 75, 76, 78, 85, 97, 98, 99, 100, 101, 103, 106, 108, 110, 118, 119, 120, 127, 128, 129, 137, 140, 142, 144, 150, 151, 162, 163, 165, 175, 179, 185, 187, 202, 206, 213, 219, 224, 242, 250, 251, 254, 271, 273, 276, 290, 291, 295, 299, 302, 303, 304, 308, 309, 310, 311, 312, 313, 319, 348, 357, 360, 369, 381, 390, 391, 399, 412, 420, 421, 422, 423, 424, 425, 427, 428, 429, 448, 450, 455, 473, 482, 497, 501, 513, 518, 522, 531, 532, 533, 536, 547, 557, 561, 562, 563, 568, 570, 573, 577, 578, 583, 587, 595, 604, 618, 619, 624, 640, 649, 667, 669, 672, 686, 690, 694, 699, 700, 701, 702, 703, 706, 707, 708, 709, 710, 719, 752, 756, 762, 774, 823, 824, 825, 826, 827, 828, 830, 831, 832, 837, 838, 856, 858, 863, 881, 900, 909, 918], "attributeerror": 1, "howev": [1, 88, 137, 242, 756, 918], "can": [1, 12, 29, 60, 70, 76, 88, 97, 98, 101, 102, 106, 108, 110, 112, 113, 118, 119, 120, 127, 136, 144, 150, 158, 160, 175, 179, 191, 197, 210, 213, 219, 224, 242, 254, 273, 291, 309, 312, 313, 336, 345, 357, 368, 369, 403, 416, 421, 422, 423, 424, 425, 427, 428, 429, 433, 436, 438, 441, 444, 457, 460, 466, 472, 491, 494, 497, 498, 501, 509, 516, 518, 524, 537, 546, 547, 563, 568, 577, 601, 608, 618, 620, 624, 640, 649, 669, 687, 710, 740, 749, 762, 774, 804, 819, 837, 838, 839, 843, 846, 849, 865, 868, 874, 880, 918], "other": [1, 17, 29, 70, 97, 98, 101, 108, 115, 116, 135, 139, 145, 164, 165, 171, 172, 187, 191, 214, 219, 240, 242, 253, 264, 269, 302, 303, 304, 315, 373, 392, 444, 486, 500, 503, 536, 547, 557, 566, 582, 583, 591, 592, 601, 615, 618, 619, 640, 648, 665, 700, 701, 702, 714, 781, 836, 902, 910, 917, 918], "onli": [1, 17, 25, 29, 51, 60, 66, 68, 97, 98, 100, 101, 102, 106, 108, 109, 110, 111, 112, 119, 120, 124, 127, 135, 162, 165, 169, 188, 199, 204, 242, 249, 254, 264, 301, 302, 303, 304, 336, 354, 363, 416, 489, 532, 547, 563, 566, 579, 583, 586, 640, 697, 700, 701, 702, 740, 767, 819, 896, 918], "gener": [1, 92, 99, 117, 118, 119, 120, 131, 179, 189, 205, 210, 242, 291, 431, 437, 547, 640, 687, 834, 845, 897, 918], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 547, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 668, 669, 670, 673, 674, 676, 681, 682, 683, 685, 687, 694, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 758, 759, 762, 763, 764, 765, 767, 770, 771, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 812, 813, 814, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 845, 846, 847, 848, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 918], "register_expr_namespac": [1, 61, 63, 64], "greet": 1, "def": [1, 61, 62, 63, 64, 118, 119, 120, 178, 210, 242, 523, 547, 594, 640], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 117], "self": [1, 61, 62, 63, 64, 67, 127, 128, 129, 131, 132, 133, 135, 138, 139, 140, 141, 142, 149, 150, 151, 153, 155, 156, 157, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 293, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 547, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 640, 648, 649, 694, 703, 765, 798, 799, 810, 813, 814, 818, 837, 838, 839, 851, 906, 910, 918], "_expr": [1, 62], "hello": [1, 460, 466, 472, 494, 674, 868, 874, 880], "return": [1, 25, 27, 31, 32, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 77, 79, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 106, 107, 108, 109, 123, 127, 128, 131, 134, 135, 136, 137, 138, 140, 141, 144, 148, 149, 153, 155, 161, 162, 163, 164, 166, 167, 174, 175, 177, 178, 179, 187, 188, 189, 200, 201, 207, 210, 211, 219, 221, 224, 227, 231, 236, 242, 251, 252, 255, 256, 257, 258, 259, 260, 263, 264, 266, 267, 268, 270, 274, 276, 277, 278, 289, 290, 294, 296, 305, 306, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 349, 356, 366, 369, 371, 372, 373, 374, 375, 377, 378, 379, 385, 389, 399, 403, 417, 418, 431, 432, 438, 439, 440, 447, 449, 451, 453, 454, 455, 457, 458, 459, 461, 462, 465, 467, 468, 469, 470, 476, 481, 482, 483, 484, 485, 487, 489, 490, 491, 495, 496, 497, 498, 501, 510, 511, 512, 518, 520, 522, 523, 532, 533, 536, 538, 540, 547, 561, 563, 566, 567, 568, 570, 579, 585, 586, 587, 594, 595, 604, 605, 606, 611, 612, 613, 618, 621, 627, 631, 636, 640, 645, 646, 647, 649, 656, 657, 659, 660, 663, 664, 666, 670, 672, 673, 674, 685, 686, 689, 691, 699, 711, 712, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 753, 756, 761, 769, 771, 776, 778, 779, 781, 782, 783, 784, 785, 786, 790, 792, 795, 798, 804, 821, 822, 834, 835, 836, 838, 846, 855, 856, 857, 859, 861, 862, 863, 865, 866, 867, 869, 870, 873, 875, 876, 877, 878, 881, 884, 890, 892, 903, 905, 906, 910, 918], "lit": [1, 95, 123, 294, 369, 381, 507, 509, 516, 537, 540, 547, 689, 764, 918], "alia": [1, 60, 62, 64, 150, 151, 167, 212, 219, 242, 254, 266, 271, 273, 302, 303, 304, 308, 309, 310, 311, 312, 314, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 332, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 347, 348, 360, 362, 367, 369, 372, 373, 381, 384, 385, 392, 401, 409, 416, 432, 448, 449, 452, 455, 458, 461, 467, 469, 470, 471, 477, 478, 486, 487, 493, 496, 499, 500, 502, 503, 507, 508, 509, 512, 513, 516, 517, 523, 531, 532, 536, 537, 547, 577, 578, 580, 586, 614, 618, 640, 661, 669, 718, 720, 723, 740, 743, 748, 752, 795, 877, 878, 918], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 460, 466, 472, 674, 868, 874, 880], "select": [1, 28, 60, 61, 62, 63, 65, 96, 97, 98, 99, 100, 102, 106, 108, 113, 127, 161, 165, 175, 178, 187, 196, 208, 212, 215, 242, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 291, 292, 293, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 361, 363, 364, 365, 367, 368, 370, 371, 373, 374, 376, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 393, 394, 395, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 459, 460, 462, 465, 466, 468, 469, 470, 472, 474, 475, 477, 478, 479, 480, 483, 484, 485, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 501, 502, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 520, 524, 525, 526, 527, 528, 529, 531, 534, 535, 536, 537, 538, 539, 547, 564, 580, 583, 594, 607, 614, 619, 621, 640, 669, 687, 837, 838, 850, 862, 865, 891, 918], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 82, 85, 87, 88, 89, 90, 91, 92, 95, 108, 113, 119, 120, 123, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 165, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 189, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 520, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 547, 561, 563, 565, 566, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 601, 602, 603, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 668, 669, 670, 673, 674, 676, 681, 682, 683, 685, 687, 694, 696, 697, 699, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 759, 762, 763, 764, 765, 767, 770, 771, 773, 774, 776, 778, 781, 782, 783, 784, 785, 786, 790, 792, 798, 799, 804, 812, 813, 814, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 837, 838, 841, 845, 846, 847, 848, 850, 851, 852, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 888, 890, 891, 892, 893, 894, 897, 898, 902, 904, 905, 906, 907, 910, 918], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 99, 101, 108, 113, 114, 115, 116, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 249, 250, 251, 254, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 299, 300, 301, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 331, 333, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 381, 382, 384, 386, 387, 388, 389, 391, 392, 403, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 443, 444, 445, 448, 451, 452, 454, 456, 458, 461, 467, 468, 469, 470, 471, 477, 478, 479, 481, 482, 483, 487, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 514, 515, 516, 517, 520, 522, 523, 524, 525, 526, 527, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 547, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 645, 648, 649, 650, 652, 653, 654, 656, 657, 658, 659, 660, 668, 669, 670, 673, 676, 681, 682, 683, 685, 687, 694, 696, 697, 698, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 731, 733, 734, 735, 737, 739, 741, 743, 744, 745, 748, 749, 751, 752, 756, 758, 759, 762, 763, 764, 765, 767, 770, 771, 773, 774, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 793, 794, 798, 800, 801, 802, 803, 804, 805, 806, 812, 813, 814, 816, 817, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 845, 847, 848, 849, 850, 851, 853, 859, 860, 862, 864, 866, 869, 875, 879, 888, 889, 890, 891, 892, 893, 894, 896, 897, 899, 900, 901, 904, 905, 906, 907, 908, 910, 918], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 108, 109, 113, 114, 115, 116, 117, 119, 120, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 547, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 668, 669, 670, 672, 673, 676, 681, 682, 683, 685, 687, 694, 696, 697, 698, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 757, 758, 759, 762, 763, 764, 765, 767, 770, 771, 773, 774, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 794, 798, 800, 801, 802, 803, 804, 805, 806, 812, 813, 814, 816, 817, 820, 821, 822, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 862, 864, 865, 871, 877, 878, 881, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 918], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 85, 87, 88, 89, 90, 91, 92, 99, 108, 113, 114, 115, 116, 119, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 166, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 248, 249, 250, 252, 253, 254, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 319, 320, 322, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 345, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 447, 449, 452, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 547, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 645, 648, 649, 651, 655, 656, 657, 658, 659, 660, 668, 669, 670, 673, 674, 676, 681, 682, 683, 685, 687, 696, 697, 698, 699, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 719, 724, 728, 729, 735, 737, 742, 744, 745, 749, 751, 753, 755, 756, 757, 758, 759, 762, 763, 764, 765, 767, 770, 771, 773, 774, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 794, 796, 798, 800, 801, 802, 803, 804, 805, 806, 812, 813, 814, 816, 817, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 845, 847, 849, 850, 851, 852, 853, 855, 857, 863, 864, 865, 868, 869, 870, 871, 872, 874, 877, 878, 880, 881, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 910, 918], "column_0": [1, 127, 210, 242], "register_dataframe_namespac": [1, 62, 63, 64], "split": [1, 61, 163, 242, 469, 470, 877, 878], "splitfram": [1, 61], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 61, 62, 65, 85, 86, 87, 88, 89, 90, 91, 92, 98, 108, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 291, 292, 293, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 520, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 547, 578, 614, 615, 621, 624, 627, 636, 640, 669, 687, 696, 862, 865, 872, 877, 878, 898, 918], "_df": [1, 61], "by_alternate_row": 1, "list": [1, 29, 36, 60, 61, 63, 67, 69, 85, 87, 88, 89, 91, 94, 96, 97, 98, 99, 100, 102, 106, 108, 109, 118, 119, 120, 130, 133, 136, 137, 138, 142, 147, 149, 150, 155, 162, 174, 177, 187, 188, 191, 197, 203, 204, 210, 211, 212, 213, 219, 222, 223, 242, 249, 269, 272, 273, 274, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 356, 362, 390, 399, 400, 408, 417, 418, 420, 421, 422, 423, 424, 425, 427, 428, 429, 435, 443, 444, 455, 468, 477, 478, 482, 498, 501, 502, 509, 513, 524, 527, 536, 537, 547, 564, 565, 567, 569, 573, 576, 577, 591, 601, 608, 613, 614, 618, 619, 622, 623, 640, 662, 665, 668, 669, 670, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 711, 756, 761, 765, 768, 781, 821, 823, 824, 825, 826, 827, 828, 830, 831, 832, 835, 863, 876, 891, 899, 918], "with_row_count": [1, 242, 392, 547, 640, 838, 918], "name": [1, 15, 19, 21, 28, 29, 31, 50, 61, 62, 63, 64, 69, 70, 74, 85, 87, 88, 89, 90, 91, 92, 96, 97, 98, 100, 101, 102, 103, 106, 107, 108, 110, 111, 112, 116, 117, 118, 119, 120, 127, 130, 133, 134, 135, 138, 143, 146, 148, 149, 162, 164, 165, 171, 177, 179, 183, 187, 188, 190, 191, 197, 203, 205, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 242, 250, 254, 291, 340, 345, 354, 369, 381, 391, 398, 400, 408, 411, 444, 477, 478, 479, 494, 495, 498, 500, 501, 503, 504, 506, 509, 514, 520, 521, 524, 527, 529, 530, 532, 534, 536, 537, 538, 547, 564, 565, 566, 569, 576, 582, 583, 591, 598, 600, 601, 608, 613, 614, 615, 618, 620, 621, 622, 640, 645, 687, 699, 711, 744, 749, 820, 885, 887, 897, 898, 901, 918], "n": [1, 11, 14, 22, 32, 36, 38, 61, 62, 63, 64, 70, 94, 95, 97, 98, 108, 123, 127, 128, 139, 150, 153, 162, 163, 167, 188, 189, 200, 201, 204, 227, 236, 242, 272, 277, 289, 313, 314, 318, 319, 323, 344, 348, 357, 366, 385, 409, 417, 431, 441, 463, 469, 470, 481, 483, 487, 518, 520, 532, 538, 547, 561, 563, 577, 579, 586, 611, 612, 627, 636, 640, 648, 668, 673, 685, 699, 710, 713, 718, 719, 723, 748, 752, 762, 771, 795, 812, 834, 849, 853, 871, 877, 878, 890, 892, 903, 908, 918], "filter": [1, 61, 100, 108, 109, 113, 135, 158, 159, 160, 224, 242, 452, 471, 493, 497, 516, 547, 566, 570, 580, 624, 640, 837, 918], "col": [1, 27, 29, 60, 61, 62, 63, 65, 89, 91, 108, 118, 119, 127, 138, 142, 149, 150, 151, 159, 161, 175, 178, 187, 191, 197, 212, 219, 222, 242, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 291, 292, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 360, 361, 362, 363, 367, 368, 369, 370, 372, 373, 375, 376, 377, 380, 381, 382, 383, 387, 388, 389, 392, 393, 394, 395, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 500, 502, 503, 507, 508, 509, 512, 515, 516, 517, 518, 519, 524, 527, 530, 531, 537, 540, 547, 569, 573, 576, 577, 578, 580, 594, 601, 608, 614, 618, 619, 622, 640, 669, 687, 696, 740, 821, 837, 838, 862, 865, 881, 918], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 60, 61, 62, 64, 65, 69, 92, 97, 98, 99, 101, 102, 106, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 123, 127, 128, 129, 131, 132, 133, 136, 140, 141, 144, 145, 147, 148, 149, 150, 152, 156, 161, 162, 163, 164, 166, 168, 169, 170, 173, 174, 175, 176, 180, 181, 185, 189, 190, 191, 194, 196, 197, 198, 199, 205, 207, 208, 210, 213, 215, 216, 219, 220, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 242, 248, 249, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 271, 273, 276, 282, 291, 299, 301, 303, 304, 305, 306, 308, 313, 316, 317, 324, 327, 328, 330, 331, 335, 341, 342, 351, 352, 353, 355, 356, 357, 358, 359, 363, 365, 368, 371, 374, 375, 377, 378, 379, 381, 382, 387, 388, 390, 392, 393, 394, 395, 402, 405, 406, 407, 409, 410, 413, 414, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 436, 438, 439, 440, 441, 445, 446, 454, 476, 480, 484, 485, 486, 492, 497, 498, 499, 500, 502, 504, 506, 507, 509, 513, 516, 525, 526, 529, 530, 531, 534, 537, 539, 540, 547, 561, 562, 565, 567, 571, 572, 576, 577, 582, 585, 590, 595, 596, 600, 601, 603, 604, 606, 608, 609, 616, 618, 619, 620, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 640, 650, 651, 652, 653, 654, 655, 656, 658, 660, 661, 669, 672, 694, 697, 699, 704, 705, 710, 711, 712, 714, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 745, 746, 755, 757, 758, 759, 761, 763, 767, 770, 778, 780, 782, 783, 784, 785, 786, 792, 793, 798, 801, 802, 812, 816, 817, 823, 825, 826, 828, 829, 830, 832, 834, 846, 847, 848, 852, 853, 855, 862, 865, 884, 893, 894, 897, 901, 902, 906, 908, 909, 918], "drop": [1, 88, 127, 134, 135, 211, 219, 242, 272, 314, 316, 317, 547, 566, 613, 618, 640, 668, 713, 715, 716, 918], "aaa": [1, 29, 242, 477, 478], "bbb": [1, 29, 242, 477, 478], "ccc": [1, 29, 242, 477, 478], "ddd": [1, 29, 242, 477, 478], "eee": [1, 29, 242], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 51, 60, 61, 68, 69, 70, 72, 74, 85, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 112, 115, 119, 126, 127, 133, 134, 135, 136, 138, 143, 146, 148, 149, 150, 151, 155, 156, 162, 164, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 197, 198, 199, 203, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 219, 220, 222, 242, 251, 252, 254, 263, 266, 269, 274, 287, 290, 291, 319, 321, 324, 326, 327, 329, 331, 333, 334, 337, 338, 341, 346, 347, 349, 354, 356, 360, 362, 369, 381, 392, 397, 398, 400, 408, 411, 415, 417, 418, 421, 422, 423, 424, 425, 427, 428, 429, 436, 443, 444, 453, 469, 470, 473, 479, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 547, 565, 566, 567, 569, 576, 577, 578, 582, 583, 587, 588, 589, 590, 591, 593, 594, 596, 598, 600, 601, 608, 609, 610, 613, 614, 615, 616, 618, 619, 620, 621, 622, 640, 646, 647, 665, 670, 683, 686, 711, 721, 724, 726, 730, 732, 735, 737, 738, 741, 742, 745, 750, 751, 753, 761, 821, 843, 861, 877, 878, 888, 897, 898, 918], "txt": 1, "utf8": [1, 9, 17, 51, 88, 97, 98, 108, 117, 136, 137, 138, 144, 190, 206, 242, 278, 356, 392, 447, 451, 454, 455, 457, 458, 467, 468, 469, 470, 473, 501, 503, 547, 567, 569, 600, 640, 674, 747, 761, 791, 855, 859, 862, 863, 865, 866, 875, 876, 877, 878, 881, 918], "register_lazyframe_namespac": [1, 61, 62, 64], "dtypeoper": [1, 63], "ldf": [1, 63, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636], "_ldf": [1, 63], "upcast_integer_typ": [1, 63], "with_column": [1, 63, 151, 178, 242, 254, 264, 273, 299, 300, 302, 303, 304, 309, 312, 314, 365, 368, 369, 372, 375, 377, 378, 379, 381, 392, 408, 409, 452, 458, 461, 463, 464, 467, 469, 470, 471, 473, 476, 486, 496, 497, 500, 502, 503, 509, 513, 523, 537, 540, 547, 578, 594, 640, 669, 696, 881], "tp": [1, 63], "cast": [1, 62, 63, 85, 122, 144, 150, 151, 178, 207, 219, 242, 253, 300, 311, 312, 318, 392, 416, 456, 457, 476, 480, 486, 503, 547, 577, 578, 594, 618, 640, 696, 708, 709, 718, 819, 864, 865, 889, 898, 902, 918], "int64": [1, 31, 62, 63, 95, 97, 123, 136, 144, 150, 151, 178, 190, 202, 207, 242, 311, 312, 322, 325, 328, 330, 332, 335, 342, 354, 416, 456, 480, 486, 497, 501, 514, 536, 547, 567, 577, 578, 594, 600, 621, 640, 708, 709, 722, 725, 731, 733, 736, 739, 746, 819, 836, 889, 900, 901, 902, 918], "int8": [1, 63, 144, 242, 311, 312, 480, 547, 708, 709, 713, 822, 889, 906, 918], "int16": [1, 63, 311, 312, 480, 547, 708, 709, 889, 918], "int32": [1, 63, 88, 119, 120, 150, 151, 163, 242, 299, 326, 349, 486, 547, 577, 578, 640, 726, 753, 798, 902, 918], "b": [1, 26, 27, 30, 33, 51, 63, 68, 85, 87, 88, 89, 90, 91, 92, 101, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 155, 156, 158, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 250, 253, 254, 265, 269, 273, 278, 280, 293, 299, 300, 307, 315, 316, 317, 354, 358, 359, 360, 362, 364, 365, 368, 369, 371, 374, 375, 376, 377, 378, 379, 381, 384, 386, 391, 403, 407, 408, 411, 419, 436, 442, 444, 453, 456, 463, 479, 489, 491, 493, 494, 495, 496, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 513, 514, 515, 516, 517, 520, 523, 524, 525, 526, 527, 528, 529, 531, 534, 535, 536, 537, 538, 539, 547, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 582, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 648, 669, 696, 712, 714, 755, 756, 764, 774, 781, 791, 820, 836, 861, 864, 871, 888, 901, 905, 918], "4": [1, 14, 22, 26, 27, 29, 30, 33, 51, 60, 61, 62, 63, 64, 65, 68, 70, 85, 87, 88, 89, 90, 91, 92, 108, 115, 116, 120, 127, 128, 129, 132, 135, 138, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 169, 171, 174, 175, 177, 178, 179, 180, 184, 188, 192, 197, 200, 201, 202, 203, 204, 205, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 248, 249, 253, 254, 265, 271, 272, 273, 274, 277, 285, 286, 289, 293, 299, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 319, 321, 325, 331, 332, 333, 337, 338, 340, 341, 342, 345, 346, 347, 349, 355, 358, 359, 362, 363, 364, 366, 367, 368, 369, 378, 379, 381, 384, 386, 388, 391, 392, 408, 410, 411, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 432, 434, 435, 438, 442, 443, 444, 445, 448, 458, 459, 461, 462, 465, 467, 469, 470, 473, 477, 478, 479, 481, 482, 483, 486, 487, 496, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 513, 515, 516, 520, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 547, 561, 562, 563, 566, 568, 569, 570, 571, 572, 574, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 602, 603, 604, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 648, 651, 658, 668, 669, 670, 673, 681, 682, 685, 697, 698, 700, 710, 712, 714, 724, 725, 730, 732, 735, 736, 737, 738, 742, 744, 745, 746, 747, 749, 750, 751, 763, 764, 771, 773, 774, 776, 781, 783, 784, 785, 786, 790, 799, 805, 812, 813, 814, 817, 821, 826, 828, 829, 830, 831, 832, 834, 836, 846, 850, 851, 856, 866, 867, 869, 870, 873, 875, 877, 878, 881, 888, 890, 891, 892, 901, 902, 910, 918], "c": [1, 26, 27, 30, 33, 51, 61, 63, 88, 90, 101, 108, 118, 128, 129, 130, 132, 133, 134, 135, 136, 138, 142, 143, 144, 145, 147, 148, 149, 150, 153, 155, 156, 163, 164, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 183, 185, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 206, 207, 208, 210, 213, 214, 216, 217, 219, 222, 225, 226, 227, 228, 229, 230, 232, 235, 236, 242, 254, 269, 278, 280, 369, 381, 408, 436, 469, 473, 489, 491, 494, 495, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 515, 516, 517, 520, 523, 524, 525, 526, 527, 528, 529, 534, 535, 537, 538, 539, 547, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 576, 577, 582, 585, 591, 595, 598, 599, 600, 601, 604, 607, 608, 615, 618, 619, 622, 625, 626, 627, 628, 629, 630, 632, 635, 636, 640, 712, 774, 791, 877, 881, 905, 918], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 60, 61, 63, 64, 65, 68, 69, 85, 88, 89, 90, 91, 94, 95, 98, 114, 119, 120, 123, 127, 128, 129, 132, 138, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 159, 161, 162, 165, 166, 167, 169, 171, 174, 175, 177, 179, 180, 181, 184, 188, 192, 197, 200, 201, 202, 203, 204, 209, 213, 215, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 249, 266, 271, 273, 274, 277, 282, 288, 289, 299, 300, 301, 302, 303, 304, 313, 314, 315, 319, 320, 322, 339, 341, 342, 343, 346, 353, 354, 357, 363, 366, 369, 372, 375, 377, 378, 379, 381, 386, 408, 409, 411, 413, 414, 418, 419, 420, 421, 422, 424, 428, 430, 432, 438, 444, 449, 457, 458, 461, 462, 476, 479, 481, 483, 487, 496, 499, 500, 502, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 520, 523, 524, 525, 526, 527, 528, 529, 531, 534, 535, 537, 538, 539, 547, 561, 562, 563, 568, 569, 570, 571, 572, 574, 576, 577, 578, 579, 581, 583, 584, 585, 586, 589, 590, 591, 595, 602, 603, 604, 607, 608, 609, 610, 611, 612, 617, 618, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 648, 651, 655, 658, 661, 669, 670, 673, 676, 685, 696, 698, 700, 706, 710, 711, 712, 713, 714, 719, 720, 721, 722, 743, 745, 746, 750, 751, 759, 762, 771, 773, 774, 798, 805, 812, 813, 814, 816, 817, 821, 823, 824, 825, 827, 828, 831, 834, 836, 846, 852, 857, 865, 866, 870, 890, 903, 906, 910, 918], "6": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 85, 88, 89, 90, 91, 92, 127, 130, 133, 134, 135, 136, 138, 139, 142, 143, 145, 146, 147, 148, 150, 151, 153, 155, 156, 157, 159, 161, 162, 164, 168, 169, 170, 171, 173, 176, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 219, 220, 227, 235, 236, 242, 254, 274, 293, 299, 311, 312, 315, 319, 336, 338, 341, 350, 358, 359, 364, 366, 368, 386, 412, 414, 415, 418, 421, 422, 423, 424, 425, 427, 428, 429, 432, 444, 449, 453, 458, 461, 462, 481, 483, 494, 496, 507, 508, 509, 513, 516, 523, 537, 547, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 577, 578, 579, 581, 582, 584, 586, 587, 591, 595, 598, 600, 601, 602, 603, 604, 607, 608, 611, 612, 614, 615, 617, 618, 620, 621, 627, 635, 636, 640, 648, 670, 698, 704, 708, 709, 712, 714, 740, 751, 805, 817, 821, 826, 828, 829, 830, 832, 836, 857, 861, 866, 870, 889, 918], "7": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 70, 130, 131, 132, 133, 134, 136, 138, 142, 143, 145, 150, 151, 153, 155, 157, 164, 168, 169, 170, 173, 176, 181, 183, 185, 187, 189, 190, 191, 193, 194, 196, 198, 199, 200, 201, 206, 207, 208, 213, 214, 215, 216, 217, 242, 312, 319, 321, 337, 339, 340, 345, 347, 349, 355, 366, 368, 418, 422, 428, 444, 481, 483, 496, 507, 508, 516, 523, 537, 547, 564, 565, 567, 569, 573, 577, 578, 579, 581, 582, 586, 596, 598, 600, 601, 611, 612, 615, 621, 640, 655, 719, 721, 726, 744, 749, 751, 821, 831, 918], "float32": [1, 27, 63, 144, 242, 640, 777, 798, 918], "lazi": [1, 63, 68, 70, 95, 108, 119, 123, 165, 178, 242, 254, 291, 497, 518, 547, 557, 582, 583, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 640], "i16": [1, 63, 436, 547], "i32": [1, 63, 88, 119, 191, 242, 299, 326, 349, 436, 462, 540, 547, 601, 640, 726, 753, 798, 870, 918], "f32": [1, 63, 242, 273, 414, 436, 513, 547, 640, 669, 798, 817, 918], "i64": [1, 14, 18, 61, 62, 63, 64, 68, 85, 87, 88, 89, 90, 91, 95, 108, 120, 123, 127, 128, 129, 130, 133, 135, 136, 138, 139, 141, 142, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 161, 164, 165, 168, 171, 173, 177, 178, 179, 180, 183, 184, 185, 186, 189, 191, 193, 194, 196, 197, 199, 200, 201, 203, 208, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 232, 235, 236, 242, 250, 253, 254, 272, 273, 274, 275, 276, 277, 279, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 300, 302, 303, 304, 309, 310, 311, 312, 314, 315, 322, 323, 325, 328, 330, 332, 335, 342, 344, 354, 357, 359, 360, 361, 362, 364, 366, 367, 368, 369, 372, 375, 377, 378, 379, 381, 383, 386, 389, 390, 391, 403, 408, 409, 411, 412, 415, 416, 418, 419, 431, 433, 434, 436, 437, 438, 442, 443, 444, 463, 464, 477, 478, 479, 480, 481, 482, 483, 487, 488, 490, 493, 494, 496, 500, 501, 503, 507, 508, 509, 513, 514, 515, 516, 520, 523, 524, 527, 531, 533, 537, 538, 540, 547, 561, 563, 565, 566, 569, 570, 572, 573, 574, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 591, 593, 594, 595, 598, 599, 601, 602, 603, 607, 608, 610, 611, 612, 613, 614, 615, 618, 620, 622, 623, 624, 626, 627, 628, 629, 632, 635, 636, 640, 648, 649, 668, 669, 670, 673, 681, 682, 683, 685, 696, 700, 703, 706, 707, 708, 709, 712, 722, 723, 725, 731, 733, 736, 739, 743, 746, 748, 762, 764, 765, 771, 773, 781, 804, 820, 821, 824, 827, 831, 834, 837, 838, 841, 845, 846, 850, 851, 888, 890, 891, 892, 898, 904, 907, 910, 918], "register_series_namespac": [1, 61, 62, 63], "math": [1, 64, 704, 847, 893, 918], "mathshortcut": [1, 64], "": [1, 27, 29, 64, 69, 92, 97, 98, 109, 120, 133, 135, 137, 138, 149, 150, 156, 164, 165, 177, 179, 184, 185, 191, 197, 201, 205, 211, 212, 213, 242, 277, 278, 285, 286, 289, 323, 343, 354, 382, 399, 403, 405, 406, 408, 409, 416, 420, 444, 458, 459, 461, 465, 467, 468, 470, 473, 476, 477, 478, 498, 501, 504, 509, 512, 514, 517, 518, 524, 527, 529, 536, 537, 547, 565, 566, 569, 576, 577, 583, 601, 608, 613, 614, 624, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 668, 670, 673, 674, 676, 681, 682, 683, 685, 694, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 719, 723, 743, 744, 749, 756, 758, 759, 762, 763, 764, 765, 767, 770, 771, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 812, 813, 814, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 845, 846, 847, 848, 850, 851, 853, 856, 857, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 873, 874, 875, 878, 879, 880, 881, 884, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 902, 904, 905, 906, 907, 908, 909, 918], "_": [1, 60, 64, 92, 179, 205, 242, 469, 877, 897, 918], "squar": [1, 64, 224, 382, 445, 547, 624, 793, 852, 918], "cube": [1, 64], "s2": [1, 116, 144, 242, 648, 698, 714, 781, 805, 836, 901, 910, 918], "renam": [1, 88, 97, 98, 191, 219, 222, 242, 250, 391, 401, 478, 533, 536, 547, 601, 618, 622, 640, 799, 887, 898, 918], "n2": 1, "in_plac": [1, 155, 195, 217, 242, 818, 820, 844, 851, 918], "true": [1, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 65, 67, 68, 70, 85, 86, 90, 94, 97, 98, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 124, 126, 128, 129, 132, 141, 144, 145, 147, 148, 149, 150, 156, 158, 159, 160, 162, 165, 166, 169, 174, 175, 177, 179, 180, 187, 188, 189, 191, 197, 203, 207, 210, 211, 212, 213, 215, 219, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 242, 249, 251, 252, 253, 254, 264, 270, 287, 290, 295, 299, 308, 309, 310, 311, 312, 340, 341, 345, 350, 351, 352, 353, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 416, 426, 431, 436, 441, 443, 444, 448, 450, 452, 456, 457, 462, 468, 469, 471, 473, 477, 478, 482, 487, 488, 491, 495, 496, 497, 498, 504, 505, 516, 532, 534, 536, 540, 547, 561, 562, 563, 568, 570, 572, 576, 577, 582, 583, 585, 587, 591, 595, 601, 604, 605, 606, 608, 613, 614, 618, 623, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 640, 646, 647, 648, 649, 659, 683, 686, 690, 694, 698, 699, 744, 745, 749, 755, 757, 758, 759, 765, 769, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 793, 805, 813, 814, 819, 829, 836, 849, 851, 856, 858, 860, 864, 865, 870, 876, 877, 879, 881, 900, 901, 903, 909, 910, 918], "s3": [1, 100, 109, 113, 918], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 57, 59, 60, 61, 63, 64, 68, 69, 92, 114, 118, 119, 127, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 145, 148, 153, 155, 164, 168, 169, 170, 173, 181, 183, 185, 187, 189, 190, 191, 193, 194, 196, 198, 199, 200, 201, 206, 207, 208, 213, 214, 216, 217, 219, 242, 253, 265, 272, 273, 307, 309, 312, 313, 316, 317, 319, 368, 384, 410, 411, 418, 419, 422, 423, 425, 427, 429, 436, 442, 444, 459, 465, 473, 479, 483, 499, 504, 505, 506, 508, 509, 513, 515, 520, 523, 524, 525, 526, 527, 528, 529, 534, 535, 537, 538, 539, 547, 564, 565, 566, 567, 569, 573, 579, 582, 586, 587, 595, 598, 600, 601, 611, 612, 615, 618, 621, 640, 668, 669, 710, 726, 812, 821, 823, 826, 828, 829, 830, 832, 867, 873, 881, 918], "9": [1, 26, 27, 30, 33, 60, 68, 127, 131, 144, 151, 153, 157, 191, 200, 213, 214, 217, 219, 235, 242, 253, 265, 272, 284, 287, 307, 309, 312, 316, 317, 319, 321, 337, 346, 347, 368, 373, 381, 384, 418, 420, 422, 428, 438, 442, 483, 496, 502, 507, 508, 547, 578, 579, 581, 586, 601, 611, 615, 618, 635, 640, 668, 683, 721, 730, 732, 738, 744, 745, 749, 750, 781, 821, 823, 831, 833, 846, 918], "27": [1, 64, 235, 312, 326, 338, 349, 410, 547, 635], "16": [1, 29, 41, 54, 62, 69, 92, 114, 150, 151, 219, 242, 266, 309, 312, 356, 368, 422, 462, 496, 507, 512, 513, 516, 529, 534, 547, 577, 578, 604, 618, 640, 661, 744, 749, 761, 812, 847, 870, 893, 918], "64": [1, 33, 40, 43, 56, 62, 64, 242, 410, 547, 606, 640, 812, 918], "25": [1, 29, 64, 70, 150, 151, 165, 215, 219, 242, 314, 326, 340, 345, 349, 518, 547, 577, 578, 583, 589, 616, 618, 640, 713, 744, 749, 755, 812, 918], "125": [1, 29, 64, 242, 812, 918], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 178, 207, 242, 498, 517, 547, 594, 640, 649, 900, 901, 918], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 66, 85, 86, 87, 88, 89, 90, 91, 97, 98, 100, 101, 102, 106, 108, 109, 110, 112, 117, 119, 120, 124, 127, 131, 135, 139, 141, 142, 144, 161, 162, 163, 177, 178, 187, 188, 203, 204, 206, 207, 213, 242, 254, 269, 273, 299, 341, 359, 373, 390, 392, 401, 418, 420, 432, 435, 462, 473, 482, 496, 504, 515, 522, 534, 547, 566, 572, 594, 640, 648, 649, 665, 669, 714, 745, 764, 781, 792, 799, 821, 823, 835, 838, 870, 881, 891, 899, 900, 901, 918], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 131, 178, 207, 242, 547, 594, 640, 901, 918], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 547, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 918, 925], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 86, 97, 98, 101, 117, 135, 149, 157, 162, 175, 181, 187, 188, 211, 219, 234, 242, 251, 357, 368, 413, 414, 421, 422, 423, 424, 425, 427, 428, 429, 489, 504, 529, 530, 534, 541, 543, 547, 548, 549, 552, 553, 554, 557, 566, 581, 596, 613, 618, 634, 640, 649, 762, 773, 816, 817, 828, 902, 912, 914, 918, 919, 922, 923, 924], "A": [4, 27, 29, 48, 67, 70, 97, 98, 99, 106, 108, 144, 150, 165, 179, 188, 203, 213, 214, 215, 219, 242, 248, 291, 319, 322, 325, 328, 330, 332, 335, 342, 357, 371, 374, 375, 377, 390, 391, 399, 411, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 448, 449, 454, 455, 457, 476, 479, 502, 513, 517, 547, 577, 583, 598, 615, 618, 640, 687, 719, 722, 725, 731, 733, 736, 739, 746, 762, 823, 824, 825, 827, 830, 831, 832, 856, 857, 862, 863, 865, 871, 872, 881, 884, 918], "encod": [4, 59, 97, 98, 108, 295, 450, 690, 858], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 31, 32, 61, 65, 70, 86, 88, 91, 92, 97, 98, 101, 102, 106, 108, 110, 111, 112, 115, 116, 118, 119, 120, 124, 126, 130, 135, 149, 152, 162, 165, 171, 189, 191, 196, 205, 210, 211, 213, 219, 242, 254, 286, 290, 291, 348, 365, 373, 392, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 437, 441, 442, 460, 466, 467, 472, 497, 532, 536, 547, 564, 566, 568, 576, 582, 583, 587, 591, 601, 605, 606, 607, 613, 618, 621, 624, 640, 648, 649, 682, 686, 687, 752, 770, 781, 799, 823, 824, 825, 826, 827, 828, 830, 831, 832, 834, 838, 845, 849, 850, 868, 874, 875, 880, 900, 918], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 51, 59, 70, 97, 98, 108, 117, 118, 120, 122, 144, 148, 149, 150, 151, 165, 191, 197, 213, 215, 219, 222, 242, 278, 297, 300, 336, 340, 345, 356, 362, 369, 392, 408, 421, 422, 423, 424, 425, 427, 428, 429, 444, 447, 448, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 498, 500, 503, 517, 524, 527, 536, 547, 568, 575, 576, 577, 578, 583, 601, 608, 618, 621, 622, 640, 674, 692, 696, 740, 744, 749, 761, 774, 854, 855, 856, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 918], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 575, 597, 640], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 273, 669], "decim": [5, 27, 29, 242, 430, 547, 833, 918], "temporari": 5, "remov": [5, 7, 133, 214, 242, 254, 266, 354, 356, 460, 466, 472, 514, 529, 534, 547, 565, 615, 640, 661, 761, 868, 874, 880, 918], "later": 5, "onc": [5, 97, 98, 101, 126, 127, 189, 222, 242, 254, 431, 547, 560, 622, 640, 649, 834, 918], "stabil": 5, "happen": 5, "being": [5, 69, 97, 98, 108, 113, 213, 214, 242, 254, 313, 340, 421, 422, 423, 424, 425, 427, 428, 429, 513, 540, 547, 615, 640, 710, 711, 744, 918], "consid": [5, 69, 97, 98, 108, 113, 127, 135, 145, 171, 211, 213, 214, 242, 254, 302, 303, 304, 313, 340, 421, 422, 423, 424, 425, 427, 428, 429, 507, 516, 547, 566, 579, 586, 591, 613, 615, 640, 649, 700, 701, 702, 710, 711, 744, 836, 837, 838, 918], "break": [5, 69, 113, 213, 214, 242, 254, 313, 340, 421, 422, 423, 424, 425, 427, 428, 429, 547, 615, 640, 710, 711, 744, 918], "chang": [5, 25, 60, 69, 97, 98, 113, 213, 214, 215, 242, 254, 313, 314, 340, 409, 421, 422, 423, 424, 425, 427, 428, 429, 547, 615, 640, 710, 711, 743, 744, 812, 844, 918], "current": [5, 8, 25, 86, 99, 126, 128, 129, 242, 291, 340, 409, 547, 557, 561, 562, 640, 699, 703, 744, 812, 918], "alpha": [5, 67, 254, 351, 352, 353, 547, 563, 568, 570, 595, 604, 640, 757, 758, 759, 918], "stage": [5, 254, 547], "cfg": [6, 7, 8, 14, 124, 191, 219, 242, 601, 618, 640], "previous": 6, "save": [6, 557], "share": [6, 51, 137, 242, 756, 918], "option": [6, 7, 8, 29, 37, 60, 70, 97, 100, 101, 102, 106, 109, 110, 112, 114, 117, 118, 119, 120, 165, 171, 175, 203, 210, 242, 382, 420, 421, 422, 423, 424, 425, 427, 428, 429, 441, 467, 522, 536, 547, 557, 582, 583, 591, 640, 789, 793, 823, 824, 825, 826, 827, 828, 830, 831, 832, 838, 849, 875, 898, 918], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 50, 52, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 123, 126, 127, 128, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 162, 163, 164, 165, 167, 169, 171, 172, 174, 175, 177, 178, 179, 181, 183, 184, 185, 187, 188, 189, 191, 193, 194, 196, 197, 198, 199, 200, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 224, 227, 234, 236, 242, 250, 253, 254, 263, 266, 269, 270, 271, 272, 273, 276, 277, 278, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 323, 336, 339, 340, 344, 345, 348, 350, 351, 352, 353, 354, 357, 359, 360, 364, 365, 366, 368, 369, 373, 382, 385, 387, 390, 391, 392, 408, 409, 413, 414, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 481, 482, 487, 488, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 517, 518, 520, 521, 522, 523, 524, 529, 530, 531, 532, 533, 534, 536, 537, 538, 547, 561, 563, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 582, 583, 586, 587, 591, 592, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 611, 613, 614, 615, 618, 619, 620, 621, 622, 624, 627, 634, 636, 640, 645, 648, 649, 658, 661, 665, 666, 667, 668, 669, 672, 673, 674, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 699, 700, 701, 702, 706, 707, 708, 709, 710, 711, 713, 714, 718, 719, 720, 723, 740, 743, 744, 748, 749, 752, 755, 756, 757, 758, 759, 762, 763, 764, 765, 770, 771, 773, 774, 788, 789, 793, 795, 799, 812, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 845, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 887, 890, 891, 897, 898, 899, 900, 901, 903, 904, 907, 908, 909, 910, 918], "json": [6, 8, 31, 32, 104, 105, 111, 242, 456, 457, 557, 575, 597, 621, 640, 864, 865], "produc": [6, 119, 120, 271, 398, 523, 587, 640, 667], "reset": [7, 124], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 65, 85, 87, 88, 89, 90, 91, 92, 95, 97, 98, 106, 108, 117, 118, 119, 120, 123, 135, 137, 149, 151, 152, 162, 165, 171, 177, 179, 187, 188, 189, 205, 211, 213, 220, 242, 286, 290, 291, 300, 350, 351, 352, 353, 365, 387, 392, 405, 406, 409, 414, 431, 437, 454, 460, 462, 466, 467, 472, 473, 497, 504, 518, 522, 532, 534, 536, 547, 566, 568, 576, 578, 583, 591, 606, 613, 621, 640, 682, 686, 687, 696, 755, 756, 757, 758, 759, 770, 799, 808, 809, 812, 817, 834, 845, 853, 862, 868, 870, 874, 875, 880, 908, 918], "state": [7, 67, 78, 507, 557, 563, 568, 570, 595, 604, 640], "note": [7, 17, 29, 37, 60, 70, 85, 86, 87, 89, 91, 95, 97, 99, 100, 106, 109, 118, 119, 120, 123, 124, 126, 127, 131, 140, 150, 151, 162, 164, 165, 175, 178, 187, 188, 204, 206, 210, 214, 215, 219, 242, 254, 273, 290, 311, 312, 316, 317, 336, 340, 345, 369, 375, 377, 421, 422, 423, 424, 425, 427, 428, 429, 441, 458, 460, 461, 466, 472, 473, 480, 507, 516, 531, 547, 563, 570, 571, 577, 578, 579, 583, 586, 598, 604, 615, 618, 640, 649, 669, 686, 708, 709, 740, 749, 837, 838, 844, 849, 866, 868, 869, 874, 880, 889, 918], "oper": [7, 29, 51, 68, 75, 76, 85, 87, 88, 89, 90, 91, 97, 106, 127, 139, 144, 149, 156, 166, 172, 175, 177, 178, 182, 202, 206, 207, 210, 213, 221, 222, 242, 249, 291, 308, 309, 310, 311, 312, 313, 381, 401, 416, 494, 495, 503, 513, 547, 570, 576, 579, 582, 586, 591, 592, 622, 640, 648, 706, 707, 708, 709, 710, 819, 896, 899, 900, 901, 909, 918], "from": [7, 27, 29, 60, 70, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 132, 133, 137, 139, 148, 150, 151, 162, 163, 165, 166, 171, 183, 187, 189, 191, 210, 211, 213, 215, 242, 308, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 354, 368, 382, 405, 406, 409, 431, 454, 456, 462, 473, 489, 491, 500, 510, 511, 512, 522, 534, 546, 547, 565, 570, 575, 577, 578, 583, 591, 597, 598, 601, 613, 619, 640, 648, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 789, 793, 808, 809, 810, 812, 834, 862, 864, 870, 907, 910, 918], "environ": [7, 25], "local": [7, 100, 109, 813, 814, 918], "non": [7, 29, 37, 60, 90, 163, 171, 191, 214, 219, 242, 409, 420, 421, 422, 423, 424, 425, 427, 428, 429, 449, 455, 500, 503, 536, 547, 591, 601, 615, 618, 640, 687, 812, 823, 824, 825, 826, 827, 828, 830, 831, 832, 857, 863, 900, 918], "env": 7, "back": [7, 60, 139, 207, 242, 408, 547, 648, 901, 918], "valu": [7, 10, 11, 25, 27, 29, 31, 45, 46, 58, 60, 68, 69, 88, 90, 97, 98, 99, 108, 113, 115, 116, 117, 118, 119, 120, 122, 124, 126, 127, 135, 139, 140, 141, 145, 148, 150, 151, 152, 153, 157, 162, 167, 168, 169, 170, 171, 173, 175, 177, 179, 180, 181, 183, 187, 188, 189, 193, 194, 197, 198, 199, 200, 203, 204, 207, 213, 214, 215, 216, 225, 226, 228, 229, 230, 232, 233, 242, 248, 249, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 271, 272, 275, 276, 277, 279, 281, 282, 283, 285, 288, 289, 291, 292, 293, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 309, 312, 313, 314, 316, 317, 319, 321, 333, 337, 346, 351, 352, 353, 355, 357, 358, 359, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 374, 375, 377, 378, 379, 380, 383, 384, 388, 389, 390, 392, 393, 394, 395, 402, 403, 404, 405, 406, 407, 409, 413, 414, 417, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 433, 434, 435, 438, 439, 440, 441, 443, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 463, 464, 467, 469, 470, 471, 476, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 495, 500, 503, 505, 507, 508, 509, 515, 516, 522, 524, 525, 526, 527, 528, 531, 532, 537, 540, 547, 566, 571, 572, 577, 578, 580, 581, 588, 589, 590, 591, 593, 596, 598, 602, 603, 608, 609, 610, 615, 616, 621, 625, 626, 628, 629, 630, 632, 633, 640, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 664, 667, 668, 671, 672, 673, 675, 677, 678, 679, 681, 685, 688, 690, 691, 692, 693, 696, 697, 700, 701, 702, 704, 705, 710, 711, 712, 713, 715, 716, 719, 721, 737, 741, 750, 756, 757, 758, 759, 762, 763, 764, 767, 769, 770, 771, 773, 774, 776, 778, 779, 781, 782, 783, 784, 785, 786, 790, 795, 799, 800, 801, 803, 804, 806, 808, 809, 810, 811, 812, 815, 816, 817, 823, 824, 825, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 841, 842, 846, 847, 848, 849, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 869, 871, 872, 875, 877, 878, 879, 884, 889, 890, 891, 892, 893, 894, 901, 902, 905, 907, 909, 910, 918], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 123, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 547, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 668, 669, 670, 673, 674, 676, 681, 682, 683, 685, 687, 694, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 762, 763, 764, 765, 767, 770, 771, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 812, 813, 814, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 841, 845, 846, 847, 848, 850, 851, 853, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 918], "bool": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 60, 65, 67, 68, 85, 86, 90, 97, 98, 102, 106, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 126, 128, 129, 141, 142, 144, 145, 147, 148, 149, 150, 155, 156, 158, 159, 160, 165, 177, 179, 189, 195, 197, 203, 207, 210, 211, 212, 215, 217, 219, 226, 228, 229, 232, 242, 251, 252, 253, 254, 263, 266, 270, 271, 273, 287, 290, 295, 299, 308, 309, 310, 311, 312, 313, 341, 350, 351, 352, 353, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 390, 396, 397, 414, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 435, 436, 441, 443, 444, 448, 450, 452, 462, 463, 464, 468, 469, 471, 473, 478, 487, 488, 491, 495, 496, 497, 498, 504, 507, 522, 532, 534, 536, 540, 547, 561, 563, 568, 570, 572, 573, 576, 577, 582, 583, 587, 591, 595, 604, 605, 606, 608, 613, 614, 618, 626, 628, 629, 632, 640, 646, 647, 648, 649, 658, 661, 666, 667, 669, 683, 686, 690, 694, 699, 706, 707, 708, 709, 710, 745, 755, 757, 758, 759, 765, 769, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 813, 814, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 844, 849, 851, 856, 858, 860, 870, 871, 872, 876, 877, 879, 881, 899, 900, 901, 903, 904, 907, 909, 918], "ascii": [9, 17, 459, 461, 465, 476, 867, 869, 873, 884], "charact": [9, 11, 17, 23, 27, 97, 98, 108, 242, 336, 453, 458, 459, 460, 465, 466, 468, 469, 472, 476, 595, 640, 740, 861, 866, 867, 868, 873, 874, 876, 877, 880, 884], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 242], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 85, 97, 98, 100, 108, 109, 179, 202, 207, 213, 214, 242, 615, 640, 901, 918], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 60, 65, 67, 70, 86, 90, 97, 98, 101, 102, 106, 108, 111, 112, 115, 116, 117, 118, 119, 120, 126, 128, 129, 132, 144, 145, 147, 148, 149, 150, 155, 156, 158, 159, 160, 162, 165, 166, 169, 174, 175, 177, 179, 180, 187, 188, 189, 195, 197, 203, 207, 210, 215, 217, 219, 225, 226, 228, 229, 230, 232, 235, 242, 251, 252, 254, 263, 266, 270, 273, 287, 290, 308, 309, 310, 311, 312, 313, 341, 350, 351, 352, 353, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 390, 414, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 433, 436, 441, 443, 444, 448, 452, 456, 462, 463, 464, 468, 469, 471, 473, 487, 488, 491, 495, 497, 498, 504, 507, 522, 532, 534, 536, 540, 547, 561, 562, 563, 568, 570, 576, 577, 582, 583, 585, 587, 595, 604, 605, 606, 608, 618, 625, 626, 628, 629, 630, 632, 635, 640, 648, 658, 661, 669, 683, 686, 694, 698, 699, 706, 707, 708, 709, 710, 745, 755, 757, 758, 759, 765, 774, 775, 776, 778, 781, 782, 783, 784, 785, 786, 788, 789, 790, 793, 805, 813, 814, 817, 818, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 839, 844, 849, 851, 856, 860, 864, 870, 871, 872, 876, 877, 879, 881, 899, 900, 901, 903, 904, 907, 909, 910, 918], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 463, 871], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 449, 455, 857, 863, 898, 918], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 60, 62, 64, 69, 88, 113, 119, 128, 129, 131, 132, 133, 135, 136, 140, 141, 144, 147, 148, 149, 156, 164, 165, 169, 170, 180, 181, 196, 197, 198, 216, 219, 222, 226, 228, 229, 230, 231, 232, 234, 235, 242, 248, 255, 256, 257, 258, 259, 260, 282, 299, 301, 305, 306, 313, 316, 317, 341, 350, 351, 352, 353, 354, 355, 363, 368, 375, 377, 378, 379, 381, 382, 387, 388, 393, 394, 395, 402, 405, 406, 409, 410, 413, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 439, 440, 441, 445, 446, 484, 485, 492, 499, 500, 502, 504, 506, 514, 525, 526, 529, 534, 535, 539, 547, 561, 565, 566, 571, 572, 576, 582, 583, 589, 590, 596, 608, 609, 616, 618, 619, 622, 626, 628, 629, 630, 631, 632, 634, 635, 640, 650, 651, 652, 653, 654, 655, 697, 704, 705, 710, 711, 712, 745, 758, 759, 763, 767, 812, 823, 825, 826, 828, 829, 830, 832, 833, 847, 848, 852, 893, 894, 906, 918], "fmt": [10, 343, 367, 473, 517, 547, 580, 640, 747, 881], "mix": [10, 473, 712, 881, 918], "control": [10, 29, 118, 242, 568, 640], "how": [10, 29, 51, 68, 88, 91, 99, 135, 164, 213, 214, 242, 271, 272, 300, 314, 368, 408, 417, 547, 566, 582, 615, 640, 667, 668, 696, 713, 918], "float": [10, 29, 39, 40, 69, 113, 115, 116, 117, 119, 120, 137, 140, 165, 181, 189, 194, 234, 242, 270, 271, 301, 302, 303, 304, 316, 317, 341, 350, 351, 352, 353, 358, 363, 368, 369, 371, 374, 375, 377, 378, 379, 387, 393, 402, 405, 406, 410, 413, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 435, 499, 509, 524, 525, 526, 527, 530, 532, 535, 537, 539, 547, 571, 583, 596, 603, 604, 634, 640, 666, 667, 694, 697, 700, 701, 702, 711, 714, 745, 755, 756, 757, 758, 759, 763, 767, 774, 780, 793, 796, 800, 801, 802, 803, 808, 809, 815, 816, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 837, 838, 849, 853, 889, 908, 918], "point": [10, 29, 39, 40, 119, 120, 140, 150, 166, 242, 301, 316, 317, 341, 358, 363, 375, 377, 430, 431, 547, 571, 577, 587, 598, 640, 697, 745, 763, 767, 780, 833, 834, 918], "full": [10, 36, 66, 97, 98, 100, 108, 109, 587, 640], "format": [10, 13, 17, 27, 29, 96, 97, 98, 108, 113, 138, 148, 162, 171, 188, 204, 240, 242, 340, 343, 462, 473, 495, 569, 575, 591, 621, 640, 747, 870, 881, 917], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 60, 79, 85, 87, 89, 91, 94, 95, 97, 98, 101, 108, 111, 118, 119, 121, 123, 128, 137, 138, 140, 141, 153, 162, 163, 166, 167, 174, 175, 189, 193, 194, 200, 213, 225, 227, 236, 242, 264, 272, 277, 285, 289, 291, 293, 307, 313, 314, 324, 326, 331, 333, 341, 346, 347, 349, 351, 352, 353, 357, 359, 364, 366, 375, 377, 384, 385, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 434, 435, 437, 458, 461, 463, 469, 470, 481, 487, 504, 505, 520, 534, 538, 547, 561, 569, 570, 571, 572, 579, 586, 595, 602, 603, 606, 611, 625, 627, 636, 640, 668, 673, 681, 685, 687, 699, 710, 713, 724, 726, 735, 737, 745, 750, 751, 753, 756, 757, 758, 759, 762, 764, 771, 780, 795, 805, 806, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 841, 842, 845, 853, 866, 869, 871, 877, 878, 890, 903, 908, 918], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 62, 88, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 117, 118, 119, 120, 121, 123, 127, 128, 137, 140, 141, 143, 152, 153, 154, 156, 162, 163, 165, 167, 168, 169, 173, 174, 175, 185, 187, 189, 192, 193, 194, 196, 198, 199, 200, 201, 208, 213, 216, 218, 220, 227, 236, 242, 270, 271, 272, 276, 277, 285, 286, 289, 290, 291, 293, 302, 303, 304, 313, 314, 351, 352, 353, 357, 358, 359, 364, 365, 366, 369, 385, 409, 410, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 437, 442, 446, 454, 459, 462, 463, 465, 467, 469, 470, 476, 481, 482, 483, 487, 492, 497, 504, 505, 509, 510, 511, 512, 518, 520, 524, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 547, 561, 570, 571, 572, 579, 583, 586, 595, 602, 603, 606, 607, 609, 611, 612, 616, 617, 620, 627, 636, 640, 656, 657, 666, 667, 668, 672, 673, 681, 682, 685, 686, 687, 694, 698, 699, 700, 701, 702, 710, 713, 756, 757, 758, 759, 762, 763, 764, 770, 771, 774, 794, 795, 800, 801, 803, 805, 806, 808, 809, 810, 811, 812, 815, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 841, 842, 845, 850, 853, 862, 867, 870, 871, 873, 875, 877, 878, 884, 889, 890, 891, 892, 903, 908, 918], "size": [12, 33, 97, 98, 118, 119, 120, 137, 150, 213, 242, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 497, 547, 577, 606, 640, 756, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 918], "overwrit": [12, 28, 85, 87, 88, 89, 91, 97, 98, 108, 126, 242, 570, 640], "chunk": [12, 33, 94, 97, 98, 106, 108, 110, 111, 112, 119, 120, 139, 163, 174, 242, 253, 415, 547, 606, 640, 648, 698, 768, 805, 818, 896, 918], "stream": [12, 30, 67, 149, 211, 242, 563, 568, 570, 576, 587, 591, 595, 604, 605, 606, 613, 640], "engin": [12, 28, 99, 127, 149, 211, 224, 242, 576, 587, 591, 613, 624, 640, 649, 918], "By": [12, 97, 98, 101, 108, 165, 242, 462, 522, 583, 640, 853, 870, 900, 908, 918], "determin": [12, 29, 58, 60, 68, 88, 91, 97, 98, 101, 106, 112, 127, 144, 150, 151, 162, 163, 210, 215, 242, 291, 300, 398, 417, 421, 422, 423, 424, 425, 427, 428, 429, 441, 547, 577, 578, 640, 687, 696, 849, 918], "schema": [12, 61, 62, 63, 68, 80, 81, 83, 85, 87, 88, 89, 91, 97, 98, 103, 107, 108, 111, 118, 119, 127, 128, 129, 136, 137, 172, 175, 242, 291, 398, 536, 561, 562, 567, 587, 592, 621, 624, 640, 703, 918], "thread": [12, 27, 94, 97, 98, 99, 121, 242, 254, 273, 547, 669], "pool": [12, 121], "For": [12, 29, 99, 100, 101, 109, 139, 151, 164, 165, 224, 242, 291, 299, 351, 352, 353, 399, 416, 441, 507, 516, 517, 547, 578, 583, 624, 640, 648, 757, 758, 759, 819, 849, 900, 918], "some": [12, 29, 88, 97, 98, 108, 135, 242, 566, 640, 781, 918], "dataset": [12, 97, 98, 108, 113, 382, 547, 557, 587, 640, 793, 918], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 97, 98, 99, 102, 106, 108, 109, 110, 111, 119, 120, 122, 127, 136, 137, 139, 141, 144, 150, 178, 187, 191, 197, 205, 211, 242, 302, 303, 304, 351, 352, 353, 359, 390, 392, 399, 443, 444, 460, 466, 472, 473, 498, 507, 516, 547, 572, 577, 587, 601, 606, 608, 613, 640, 648, 700, 701, 702, 756, 757, 758, 759, 764, 799, 837, 838, 868, 874, 880, 897, 918], "have": [12, 29, 60, 86, 97, 98, 101, 119, 120, 122, 139, 162, 182, 188, 204, 242, 313, 351, 352, 353, 399, 414, 473, 547, 591, 604, 620, 640, 648, 710, 743, 757, 758, 759, 769, 817, 881, 918], "larg": 12, "element": [12, 22, 95, 120, 123, 254, 255, 256, 257, 258, 259, 260, 271, 273, 274, 305, 306, 308, 309, 310, 311, 312, 313, 355, 365, 373, 388, 409, 414, 417, 432, 438, 439, 440, 445, 469, 470, 484, 485, 487, 547, 649, 650, 651, 652, 653, 654, 655, 667, 669, 670, 699, 704, 705, 706, 707, 708, 709, 710, 760, 765, 771, 781, 795, 797, 812, 817, 835, 846, 847, 848, 852, 853, 877, 878, 890, 893, 894, 903, 904, 908, 918], "too": 12, "optimist": 12, "lead": [12, 113, 242, 433, 460, 472, 476, 482, 491, 504, 524, 527, 534, 547, 587, 624, 640, 839, 868, 880, 884, 918], "out": [12, 114, 151, 242, 276, 290, 295, 371, 374, 448, 450, 547, 578, 605, 606, 640, 672, 686, 690, 856, 858], "memori": [12, 33, 68, 85, 86, 89, 90, 91, 97, 98, 102, 106, 108, 110, 111, 112, 126, 127, 139, 195, 224, 242, 415, 436, 547, 606, 624, 640, 648, 649, 818, 843, 844, 918], "error": [12, 71, 97, 98, 108, 187, 242, 278, 290, 295, 299, 381, 448, 450, 456, 457, 473, 547, 624, 674, 686, 690, 694, 856, 858, 864, 865, 881, 918], "row": [12, 17, 22, 27, 29, 31, 33, 60, 61, 63, 77, 79, 84, 88, 89, 91, 97, 98, 101, 102, 106, 108, 110, 111, 112, 115, 118, 119, 127, 128, 135, 139, 142, 144, 148, 150, 152, 153, 158, 160, 162, 163, 165, 166, 167, 171, 175, 189, 196, 200, 201, 204, 211, 213, 214, 220, 224, 227, 236, 242, 254, 264, 274, 356, 366, 385, 409, 418, 442, 453, 481, 498, 507, 508, 516, 520, 524, 527, 531, 538, 547, 561, 563, 566, 570, 573, 574, 577, 579, 583, 584, 586, 587, 591, 606, 607, 611, 612, 613, 615, 620, 624, 627, 636, 640, 648, 670, 761, 771, 812, 821, 850, 861, 890, 918], "per": [12, 27, 29, 118, 119, 148, 175, 176, 197, 231, 233, 234, 242, 254, 273, 276, 290, 444, 498, 547, 608, 631, 633, 634, 640, 669, 672, 686], "everi": [12, 97, 98, 108, 150, 201, 204, 215, 242, 267, 268, 272, 274, 276, 277, 286, 289, 308, 309, 310, 311, 312, 313, 340, 345, 356, 453, 483, 507, 508, 547, 570, 577, 612, 640, 663, 664, 668, 670, 672, 673, 682, 685, 706, 707, 708, 709, 710, 744, 749, 761, 861, 892, 918], "process": [12, 27, 242, 605, 606, 640], "liter": [13, 17, 65, 70, 101, 120, 148, 162, 168, 169, 173, 174, 177, 187, 188, 191, 199, 203, 219, 242, 251, 252, 319, 357, 369, 381, 415, 448, 463, 464, 497, 500, 503, 510, 511, 522, 532, 536, 540, 547, 572, 601, 618, 640, 646, 647, 719, 762, 774, 837, 838, 856, 871, 872, 918], "left": [13, 70, 115, 116, 150, 151, 164, 165, 214, 242, 351, 352, 353, 368, 369, 421, 422, 423, 424, 425, 427, 428, 429, 432, 459, 476, 486, 500, 507, 508, 516, 531, 547, 577, 578, 582, 583, 615, 640, 757, 758, 759, 774, 835, 867, 884, 902, 918], "center": [13, 351, 352, 353, 420, 421, 422, 423, 424, 425, 427, 428, 429, 547, 757, 758, 759, 823, 824, 825, 826, 827, 828, 830, 831, 832, 918], "right": [13, 15, 29, 70, 97, 98, 115, 116, 150, 151, 164, 165, 242, 351, 352, 353, 369, 421, 422, 423, 424, 425, 427, 428, 429, 432, 441, 465, 500, 547, 577, 578, 582, 583, 640, 757, 758, 759, 774, 835, 849, 873, 918], "cell": 13, "align": [13, 60, 476, 884], "keyerror": [13, 17], "recognis": [13, 17, 117], "column_abc": 13, "column_xyz": 13, "visibl": [14, 137, 242, 756, 918], "eg": [14, 22, 29, 242, 340, 473], "rang": [14, 29, 69, 70, 99, 137, 150, 163, 242, 321, 333, 337, 338, 340, 345, 346, 368, 497, 502, 510, 511, 547, 577, 640, 711, 721, 737, 741, 742, 744, 749, 750, 756, 812, 918], "100": [14, 29, 88, 91, 97, 98, 108, 111, 242, 476, 497, 640, 824, 825, 827, 918], "98": [14, 156, 242, 443, 482, 487, 547], "99": [14, 140, 141, 156, 159, 242, 249, 357, 359, 443, 482, 487, 547, 571, 572, 640, 755, 762, 918], "10": [14, 26, 27, 29, 30, 33, 60, 68, 69, 70, 99, 108, 119, 120, 129, 139, 147, 150, 151, 153, 155, 156, 157, 174, 178, 180, 184, 185, 191, 200, 219, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 242, 253, 261, 262, 263, 265, 266, 272, 277, 285, 286, 289, 302, 307, 309, 312, 314, 316, 317, 319, 340, 345, 348, 365, 366, 368, 373, 381, 384, 385, 388, 409, 422, 442, 476, 481, 500, 507, 513, 516, 518, 520, 523, 529, 534, 538, 547, 563, 577, 578, 579, 581, 586, 594, 595, 601, 606, 610, 611, 618, 622, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 640, 649, 668, 673, 681, 682, 685, 700, 711, 713, 719, 749, 752, 755, 771, 781, 795, 797, 812, 837, 838, 890, 918], "95": [14, 249, 547], "96": [14, 249, 547], "97": [14, 156, 242, 249, 547], "move": [15, 351, 352, 353, 421, 422, 424, 428, 547, 757, 758, 759, 824, 825, 827, 831, 918], "inlin": 15, "parenthes": 15, "print": [16, 98, 114, 136, 148, 149, 163, 166, 221, 242, 367, 547, 580, 640, 781, 823, 918], "below": [16, 29, 100, 109, 135, 242, 368, 540, 547, 566, 640], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 60], "utf8_full_condens": 17, "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 449, 454, 455, 457, 857, 862, 863, 865], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 60, 69, 70, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 132, 135, 140, 141, 148, 150, 151, 152, 157, 164, 165, 166, 169, 171, 175, 176, 187, 189, 191, 194, 196, 197, 203, 205, 207, 210, 211, 212, 213, 214, 215, 219, 222, 242, 250, 253, 254, 265, 276, 286, 291, 293, 302, 303, 304, 307, 309, 312, 316, 317, 339, 340, 345, 351, 352, 353, 354, 357, 358, 359, 364, 365, 368, 369, 375, 376, 377, 378, 379, 384, 390, 392, 407, 409, 415, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 435, 436, 437, 438, 442, 443, 447, 448, 451, 452, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 469, 470, 471, 472, 473, 476, 477, 478, 486, 494, 496, 497, 500, 503, 505, 511, 512, 514, 515, 522, 523, 532, 533, 535, 536, 539, 547, 561, 562, 566, 571, 572, 577, 578, 581, 582, 583, 585, 587, 591, 601, 603, 604, 605, 606, 607, 608, 613, 614, 615, 618, 619, 621, 622, 624, 640, 649, 656, 657, 672, 682, 687, 699, 700, 711, 712, 714, 727, 728, 729, 734, 743, 744, 749, 754, 755, 757, 758, 759, 762, 763, 764, 766, 769, 770, 772, 773, 774, 785, 786, 789, 793, 799, 800, 801, 802, 803, 807, 816, 823, 824, 825, 826, 827, 828, 830, 831, 832, 834, 840, 842, 845, 846, 849, 850, 853, 855, 856, 859, 860, 864, 865, 866, 867, 868, 869, 870, 873, 874, 875, 877, 878, 879, 880, 881, 895, 898, 901, 902, 908, 909, 918], "rounded_corn": 17, "style": [17, 29, 179, 242], "border": 17, "line": [17, 29, 97, 98, 101, 108, 148, 158, 160, 242], "includ": [17, 25, 27, 29, 66, 100, 109, 119, 137, 150, 210, 213, 242, 341, 369, 468, 469, 507, 547, 577, 640, 745, 756, 774, 876, 877, 909, 918], "divid": [17, 340, 345, 351, 352, 353, 382, 547, 744, 749, 757, 758, 759, 793, 918], "same": [17, 29, 51, 60, 67, 102, 118, 127, 133, 149, 197, 211, 219, 222, 224, 242, 248, 253, 356, 408, 420, 421, 422, 423, 424, 425, 427, 428, 429, 444, 478, 501, 547, 565, 576, 587, 608, 613, 618, 622, 624, 640, 644, 648, 649, 719, 761, 823, 824, 825, 826, 827, 828, 830, 831, 832, 910, 918], "dens": [17, 148, 242, 414, 547, 817, 918], "space": 17, "horizont": [17, 68, 144, 155, 213, 242, 503, 507, 508, 509, 513, 516, 524, 527, 531, 537], "markdown": 17, "compat": [17, 29, 33, 99, 242, 606, 640], "No": 17, "appli": [17, 27, 29, 68, 108, 117, 119, 120, 144, 178, 242, 321, 324, 326, 327, 329, 331, 333, 334, 337, 338, 341, 346, 347, 349, 352, 353, 390, 420, 421, 422, 424, 428, 473, 494, 497, 507, 508, 516, 523, 531, 547, 579, 586, 587, 594, 640, 721, 724, 726, 730, 732, 735, 737, 738, 741, 742, 745, 750, 751, 753, 758, 759, 823, 824, 825, 827, 831, 881, 918], "round": [17, 29, 62, 242, 301, 363, 484, 547, 697, 767, 918], "corner": 17, "op": [17, 120, 242, 417, 547, 640, 918], "The": [17, 28, 29, 33, 45, 52, 60, 66, 85, 87, 88, 89, 91, 94, 97, 99, 106, 108, 127, 134, 136, 148, 149, 150, 151, 152, 157, 162, 165, 172, 177, 187, 188, 191, 212, 215, 219, 222, 224, 242, 290, 291, 293, 294, 295, 296, 321, 333, 336, 337, 340, 345, 346, 354, 357, 364, 365, 390, 408, 414, 417, 420, 421, 422, 423, 424, 425, 427, 428, 429, 438, 441, 447, 450, 451, 456, 458, 459, 460, 465, 466, 472, 476, 501, 514, 518, 533, 536, 541, 543, 547, 548, 549, 552, 553, 554, 577, 578, 579, 581, 583, 586, 587, 592, 595, 601, 606, 614, 618, 622, 624, 640, 649, 686, 689, 690, 691, 699, 721, 737, 740, 741, 744, 749, 750, 762, 770, 773, 817, 823, 824, 825, 826, 827, 828, 830, 831, 832, 846, 849, 855, 858, 859, 864, 866, 867, 868, 873, 874, 880, 884, 912, 914, 918, 919, 922, 923, 924], "one": [17, 28, 29, 60, 77, 85, 87, 88, 89, 90, 91, 120, 141, 142, 148, 149, 150, 151, 162, 171, 179, 187, 188, 209, 223, 242, 249, 359, 381, 420, 443, 482, 494, 524, 527, 537, 547, 572, 573, 576, 577, 578, 591, 619, 623, 640, 648, 764, 789, 823, 885, 918], "more": [17, 29, 31, 33, 60, 84, 85, 86, 87, 88, 89, 90, 91, 100, 106, 109, 119, 120, 127, 131, 162, 166, 171, 175, 187, 188, 189, 211, 224, 242, 254, 302, 303, 304, 381, 382, 390, 431, 441, 488, 524, 527, 537, 547, 591, 606, 613, 624, 640, 649, 700, 701, 702, 789, 793, 834, 849, 904, 918, 926], "semigraph": 17, "box": [17, 127, 242], "draw": [17, 22, 23], "found": [17, 27, 72, 81, 83, 88, 136, 214, 242, 432, 457, 473, 547, 615, 640, 835, 865, 918], "unicod": 17, "block": [17, 149, 211, 242, 576, 598, 613, 620, 640, 837, 838, 918], "http": [17, 29, 86, 99, 126, 131, 242, 454, 862, 926], "en": 17, "wikipedia": 17, "org": [17, 86, 99, 126, 131, 242], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 242], "etc": [18, 29, 97, 100, 102, 106, 109, 110, 112, 242, 497, 837, 838, 918], "inform": [20, 66, 100, 109, 131, 242, 302, 303, 304, 382, 441, 547, 595, 640, 700, 701, 702, 793, 849, 918], "separ": [21, 27, 92, 94, 97, 98, 108, 177, 179, 205, 210, 212, 242, 254, 274, 278, 453, 503, 507, 508, 547, 614, 640, 670, 674, 861, 888, 897, 918], "between": [21, 68, 117, 118, 119, 120, 181, 234, 242, 278, 299, 315, 369, 409, 413, 425, 447, 504, 506, 529, 530, 534, 547, 596, 634, 640, 674, 694, 714, 774, 812, 816, 828, 855, 918], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 119, 120, 132, 141, 149, 150, 151, 179, 242, 302, 303, 309, 359, 408, 414, 421, 433, 470, 547, 572, 576, 577, 578, 606, 640, 687, 700, 701, 706, 712, 764, 817, 824, 839, 878, 918], "both": [22, 27, 51, 70, 99, 150, 151, 164, 165, 172, 187, 242, 253, 369, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 582, 583, 592, 640, 774, 918], "width": [23, 29, 97, 98, 242, 459, 465, 476, 640, 867, 873, 884], "char": [23, 51, 461, 869], "enabl": [24, 191, 219, 242, 433, 547, 601, 618, 640, 839, 918], "addit": [24, 29, 88, 100, 109, 117, 118, 133, 138, 149, 177, 191, 197, 212, 219, 222, 242, 354, 357, 408, 444, 500, 501, 514, 533, 536, 547, 565, 569, 576, 601, 608, 614, 618, 622, 640, 762, 918], "verbos": 24, "debug": [24, 563, 570, 587, 640], "log": [24, 62, 350, 487, 547, 755, 903, 918], "if_set": 25, "dict": [25, 29, 33, 61, 63, 66, 85, 87, 88, 89, 90, 91, 97, 98, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 119, 162, 177, 183, 187, 188, 190, 203, 204, 242, 392, 547, 598, 600, 640, 799, 918], "show": [25, 135, 148, 166, 176, 242, 566, 595, 604, 640], "variabl": [25, 92, 171, 205, 242, 591, 640, 897, 918], "restrict": [25, 470, 878], "dictionari": [25, 29, 85, 87, 88, 89, 91, 97, 98, 103, 107, 108, 162, 177, 187, 188, 203, 204, 242, 392, 547, 640, 712, 799, 918], "those": [25, 29, 97, 242, 414, 547, 817, 918], "_have_": 25, "been": [25, 29, 69, 92, 242, 414, 547, 817, 918], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 139, 242, 570, 597, 605, 606, 621, 640, 648, 918], "binaryio": [26, 30, 96, 97, 101, 102, 103, 106, 107, 242], "bytesio": [26, 27, 29, 30, 33, 96, 97, 98, 101, 102, 106, 242], "path": [26, 27, 29, 30, 31, 32, 33, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 242, 433, 457, 547, 597, 605, 606, 621, 640, 839, 865, 918], "compress": [26, 30, 33, 242, 605, 606, 640], "avrocompress": [26, 242], "uncompress": [26, 30, 33, 102, 110, 242, 606, 640], "write": [26, 27, 28, 29, 30, 31, 33, 98, 102, 242, 302, 303, 304, 547, 585, 604, 606, 621, 640, 700, 701, 702, 918], "apach": [26, 33, 96, 99, 242], "avro": [26, 96, 242, 557], "should": [26, 27, 29, 30, 31, 32, 33, 85, 87, 89, 91, 92, 95, 100, 117, 118, 120, 123, 126, 127, 133, 150, 162, 165, 187, 188, 204, 205, 212, 224, 242, 249, 254, 273, 300, 313, 348, 354, 375, 377, 420, 421, 422, 423, 424, 425, 427, 428, 429, 432, 441, 501, 514, 521, 522, 547, 565, 577, 582, 583, 587, 604, 605, 606, 614, 621, 624, 640, 649, 669, 696, 710, 752, 823, 824, 825, 826, 827, 828, 830, 831, 832, 835, 849, 918], "written": [26, 27, 29, 30, 31, 32, 33, 242, 605, 606, 621, 640], "snappi": [26, 33, 242, 606, 640], "deflat": [26, 242], "import": [26, 27, 29, 30, 33, 36, 60, 70, 85, 89, 90, 108, 113, 115, 116, 117, 118, 119, 120, 132, 148, 150, 163, 165, 207, 213, 215, 242, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 512, 522, 577, 583, 587, 640, 704, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 778, 782, 783, 784, 789, 823, 847, 893, 918], "pathlib": [26, 27, 30, 33, 108, 111, 242], "foo": [26, 27, 30, 31, 32, 33, 92, 127, 130, 131, 133, 134, 135, 136, 139, 142, 143, 144, 145, 146, 147, 152, 153, 154, 155, 156, 157, 159, 164, 168, 169, 170, 173, 176, 179, 181, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 210, 211, 212, 216, 217, 218, 221, 242, 250, 270, 275, 276, 279, 280, 302, 303, 304, 336, 366, 367, 410, 418, 434, 435, 447, 449, 451, 453, 455, 460, 466, 468, 470, 472, 474, 475, 481, 483, 494, 497, 499, 501, 504, 505, 506, 515, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 533, 534, 535, 538, 539, 540, 547, 564, 565, 566, 567, 573, 580, 581, 582, 598, 600, 601, 613, 614, 617, 619, 621, 640, 674, 700, 740, 821, 857, 859, 861, 863, 878, 918], "bar": [26, 27, 30, 31, 32, 33, 92, 127, 130, 131, 133, 134, 135, 136, 139, 142, 143, 144, 145, 146, 147, 153, 155, 156, 157, 159, 164, 168, 169, 170, 173, 176, 179, 181, 183, 184, 185, 187, 189, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 211, 212, 216, 217, 221, 242, 250, 280, 367, 441, 451, 453, 468, 470, 494, 499, 501, 504, 505, 506, 515, 520, 524, 525, 526, 527, 528, 529, 533, 534, 535, 538, 539, 540, 547, 564, 565, 566, 567, 573, 580, 581, 582, 598, 600, 601, 613, 614, 617, 621, 640, 674, 849, 859, 861, 878, 918], "ham": [26, 27, 30, 33, 92, 130, 131, 133, 134, 135, 136, 142, 143, 145, 152, 153, 155, 164, 168, 169, 170, 173, 176, 181, 183, 185, 187, 189, 190, 191, 193, 194, 196, 198, 199, 200, 205, 206, 207, 208, 211, 216, 217, 242, 501, 564, 565, 566, 567, 573, 582, 598, 600, 601, 613, 619, 640], "d": [26, 27, 30, 33, 51, 68, 88, 113, 132, 148, 152, 153, 156, 164, 200, 202, 213, 217, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 242, 323, 343, 369, 436, 449, 455, 469, 473, 500, 518, 547, 582, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 640, 723, 747, 774, 857, 863, 877, 881, 918], "e": [26, 27, 30, 33, 51, 86, 97, 98, 101, 102, 106, 110, 112, 132, 148, 153, 200, 202, 213, 242, 254, 350, 354, 369, 387, 392, 436, 441, 514, 547, 585, 598, 640, 755, 774, 836, 849, 900, 918], "dirpath": [26, 27, 30, 33, 108, 242], "new_fil": [26, 27, 30, 33, 242], "has_head": [27, 29, 97, 98, 101, 108, 242], "quot": [27, 97, 98, 108, 242], "batch_siz": [27, 97, 98, 111, 242], "1024": [27, 33, 97, 98, 111, 242, 606, 640], "datetime_format": [27, 242], "date_format": [27, 242, 343], "time_format": [27, 242], "float_precis": [27, 29, 242], "null_valu": [27, 97, 98, 108, 242], "comma": [27, 242], "csv": [27, 97, 98, 101, 108, 242, 557, 605, 606, 640], "result": [27, 31, 32, 60, 89, 91, 99, 100, 108, 110, 112, 113, 120, 139, 150, 161, 175, 194, 207, 222, 242, 351, 352, 353, 357, 382, 408, 418, 420, 421, 422, 423, 424, 425, 427, 428, 429, 433, 435, 468, 469, 497, 507, 508, 509, 523, 537, 547, 560, 577, 587, 595, 603, 605, 606, 621, 622, 640, 648, 757, 758, 759, 793, 821, 823, 824, 825, 826, 827, 828, 830, 831, 832, 839, 842, 876, 877, 900, 918], "If": [27, 29, 31, 32, 33, 51, 65, 66, 69, 70, 85, 86, 87, 88, 89, 90, 91, 92, 97, 98, 100, 101, 102, 106, 108, 109, 110, 111, 112, 126, 127, 135, 139, 148, 150, 151, 153, 162, 165, 167, 171, 175, 188, 189, 196, 200, 204, 205, 206, 210, 211, 213, 214, 242, 254, 286, 291, 302, 303, 304, 319, 360, 382, 390, 392, 416, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 437, 441, 442, 456, 458, 460, 461, 466, 467, 468, 469, 470, 472, 473, 487, 494, 496, 497, 504, 505, 507, 516, 522, 532, 534, 536, 547, 566, 568, 577, 578, 582, 583, 587, 591, 598, 606, 607, 613, 615, 621, 624, 640, 648, 649, 682, 700, 701, 702, 711, 719, 769, 771, 793, 795, 819, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 839, 845, 849, 850, 864, 866, 868, 869, 874, 875, 876, 877, 878, 880, 881, 890, 896, 900, 903, 909, 918], "instead": [27, 31, 32, 65, 95, 97, 106, 119, 123, 127, 150, 162, 175, 177, 187, 188, 191, 207, 219, 242, 263, 266, 458, 460, 466, 472, 497, 532, 536, 547, 571, 577, 601, 618, 621, 640, 658, 661, 837, 838, 866, 868, 874, 880, 901, 918], "whether": [27, 70, 89, 91, 120, 242, 396, 397, 433, 547, 587, 640], "header": [27, 29, 33, 97, 98, 101, 108, 136, 179, 210, 242, 606, 640], "field": [27, 52, 81, 83, 88, 212, 242, 291, 392, 456, 469, 470, 478, 507, 508, 523, 536, 547, 614, 640, 687, 877, 878, 887, 888], "symbol": [27, 242], "byte": [27, 97, 98, 101, 102, 103, 106, 107, 108, 137, 242, 294, 297, 298, 458, 461, 606, 640, 689, 692, 693, 756, 866, 869, 918], "specifi": [27, 29, 60, 70, 72, 81, 83, 119, 133, 137, 138, 141, 149, 177, 187, 191, 197, 212, 219, 222, 242, 351, 352, 353, 354, 359, 392, 408, 417, 444, 459, 465, 498, 500, 501, 514, 533, 536, 547, 565, 569, 572, 576, 601, 608, 614, 618, 622, 640, 756, 757, 758, 759, 764, 867, 873, 918], "defin": [27, 29, 36, 70, 117, 118, 119, 127, 150, 151, 175, 178, 224, 242, 254, 290, 369, 421, 422, 423, 424, 425, 427, 428, 429, 496, 522, 536, 547, 577, 578, 594, 624, 640, 649, 686, 774, 918], "chrono": [27, 242, 343, 473, 747, 881], "rust": [27, 33, 78, 102, 106, 127, 224, 242, 624, 649, 918], "crate": [27, 242], "fraction": [27, 115, 116, 189, 242, 341, 409, 431, 473, 547, 745, 812, 834, 918], "second": [27, 70, 150, 151, 165, 215, 242, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 473, 511, 512, 547, 577, 578, 583, 640, 740, 744, 749], "precis": [27, 29, 37, 162, 188, 204, 242, 318, 473, 718], "infer": [27, 85, 87, 88, 89, 90, 91, 97, 98, 101, 108, 111, 117, 127, 242, 418, 456, 473, 547, 640, 821, 864, 918], "maximum": [27, 97, 98, 108, 118, 119, 120, 168, 242, 267, 302, 303, 393, 405, 414, 524, 547, 588, 640, 663, 700, 701, 727, 800, 808, 813, 817, 918], "timeunit": [27, 36, 38, 70, 242, 318, 319, 344, 348, 718, 719, 748, 752], "frame": [27, 28, 29, 60, 88, 115, 119, 127, 128, 162, 163, 172, 175, 178, 187, 188, 207, 213, 242, 561, 592, 594, 640, 699, 918], "datetim": [27, 29, 60, 70, 132, 148, 150, 151, 163, 165, 215, 242, 270, 271, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 369, 421, 422, 423, 424, 425, 427, 428, 429, 473, 486, 512, 518, 522, 527, 547, 577, 578, 583, 640, 666, 667, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 774, 789, 800, 803, 808, 809, 838, 881, 902, 918], "place": [27, 134, 155, 156, 184, 193, 194, 197, 217, 242, 263, 266, 278, 285, 434, 435, 443, 547, 602, 603, 608, 640, 658, 661, 674, 681, 818, 820, 841, 842, 851, 918], "float64": [27, 88, 95, 97, 119, 123, 136, 137, 144, 190, 207, 219, 242, 255, 256, 257, 258, 259, 260, 299, 305, 306, 341, 354, 375, 377, 439, 440, 484, 485, 501, 514, 547, 567, 600, 618, 640, 745, 901, 906, 918], "datatyp": [27, 31, 45, 58, 85, 87, 88, 89, 91, 93, 95, 101, 103, 107, 120, 123, 136, 138, 144, 190, 242, 274, 299, 354, 436, 453, 473, 486, 501, 514, 547, 557, 569, 600, 621, 640, 649, 670, 694, 712, 787, 789, 791, 843, 861, 881, 902, 918], "repres": [27, 46, 58, 70, 85, 87, 89, 90, 91, 242, 375, 377, 501, 514, 522, 547, 838, 853, 908, 918], "null": [27, 60, 68, 88, 97, 98, 108, 113, 126, 128, 132, 135, 141, 144, 145, 157, 164, 169, 170, 176, 181, 193, 194, 197, 198, 199, 203, 207, 212, 214, 216, 219, 242, 250, 253, 254, 263, 266, 272, 275, 276, 279, 285, 290, 291, 293, 295, 302, 303, 304, 307, 309, 312, 314, 316, 317, 322, 325, 328, 330, 332, 335, 342, 351, 352, 353, 354, 357, 358, 359, 360, 364, 368, 375, 376, 377, 378, 379, 384, 392, 407, 409, 415, 420, 421, 422, 423, 424, 425, 427, 428, 429, 434, 435, 436, 438, 443, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 465, 467, 469, 470, 471, 476, 477, 478, 486, 493, 494, 500, 502, 503, 514, 522, 536, 547, 561, 566, 572, 581, 582, 602, 603, 608, 614, 615, 618, 619, 621, 640, 649, 658, 661, 668, 681, 686, 687, 690, 699, 700, 713, 716, 722, 725, 731, 733, 736, 739, 746, 757, 758, 759, 762, 764, 769, 785, 786, 811, 812, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 841, 842, 846, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 869, 870, 873, 875, 877, 878, 879, 900, 901, 902, 909, 918], "empti": [27, 76, 88, 97, 98, 101, 108, 128, 129, 159, 171, 242, 533, 561, 562, 591, 640, 699, 703, 777, 918], "table_nam": [28, 29, 242], "connection_uri": [28, 99, 242], "if_exist": [28, 242], "dbwritemod": [28, 242], "fail": [28, 86, 100, 102, 109, 126, 211, 242, 264, 291, 473, 547, 613, 640, 649, 881, 918], "dbwriteengin": [28, 242], "sqlalchemi": [28, 242], "databas": [28, 99, 242, 557], "append": [28, 119, 139, 164, 165, 242, 415, 547, 582, 583, 640, 918], "creat": [28, 29, 69, 70, 85, 89, 91, 109, 118, 119, 120, 128, 129, 150, 151, 176, 179, 215, 219, 242, 319, 340, 345, 415, 467, 491, 497, 502, 510, 511, 512, 547, 561, 562, 568, 577, 578, 618, 640, 699, 703, 711, 716, 719, 744, 749, 810, 818, 875, 900, 918], "connect": [28, 97, 99, 102, 106, 110, 112, 113, 242, 558], "uri": [28, 99, 100, 109, 242], "postgresql": [28, 99, 242, 408, 547], "usernam": [28, 97, 99, 102, 106, 110, 112, 242], "password": [28, 97, 99, 102, 106, 110, 112, 242], "server": [28, 99, 242], "port": [28, 97, 99, 102, 106, 110, 112, 242], "replac": [28, 97, 98, 108, 140, 141, 185, 210, 219, 242, 319, 339, 392, 464, 547, 571, 618, 640, 719, 743, 799, 837, 838, 872, 918], "insert": [28, 97, 98, 102, 106, 108, 110, 111, 112, 156, 184, 210, 212, 242, 432, 447, 476, 547, 614, 640, 835, 855, 884, 918], "mode": [28, 242, 532, 547, 640, 918], "new": [28, 29, 95, 123, 124, 127, 135, 155, 156, 175, 176, 183, 184, 201, 212, 213, 219, 242, 250, 319, 356, 368, 391, 463, 464, 469, 470, 477, 478, 483, 547, 557, 566, 598, 612, 614, 618, 624, 640, 645, 716, 719, 761, 810, 820, 871, 872, 877, 878, 885, 887, 892, 898, 910, 918], "alreadi": [28, 242, 273, 313, 547, 669, 710, 918], "adbc": [28, 99, 242], "workbook": [29, 242], "worksheet": [29, 242], "posit": [29, 133, 138, 149, 177, 191, 197, 212, 219, 222, 242, 351, 352, 353, 354, 408, 444, 462, 500, 501, 514, 533, 547, 565, 569, 576, 601, 608, 614, 618, 622, 640, 757, 758, 759, 870, 918], "tupl": [29, 99, 127, 162, 187, 188, 192, 221, 242, 418, 547, 595, 604, 640, 821, 918], "a1": [29, 61, 63, 242], "table_styl": [29, 242], "column_format": [29, 242], "dtype_format": [29, 242], "oneormoredatatyp": [29, 118, 242, 789, 918], "conditional_format": [29, 242], "conditionalformatdict": [29, 242], "column_tot": [29, 242], "columntotalsdefinit": [29, 242], "column_width": [29, 242], "row_height": [29, 242], "sparklin": [29, 242], "sequenc": [29, 52, 60, 67, 85, 87, 88, 89, 91, 92, 94, 97, 98, 118, 119, 120, 133, 135, 138, 139, 164, 165, 171, 175, 178, 179, 197, 205, 210, 211, 212, 213, 214, 215, 242, 373, 390, 444, 478, 494, 495, 496, 498, 502, 507, 508, 509, 516, 518, 523, 524, 527, 531, 537, 547, 565, 566, 569, 582, 583, 594, 608, 613, 614, 615, 640, 648, 714, 781, 838, 887, 918], "autofilt": [29, 242], "autofit": [29, 242], "hidden_column": [29, 242], "hide_gridlin": [29, 242], "sheet_zoom": [29, 242], "excel": [29, 101, 242, 557], "object": [29, 33, 70, 86, 87, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 118, 119, 120, 126, 149, 166, 207, 242, 522, 557, 562, 580, 585, 597, 640, 662, 695, 717, 854, 896, 918], "open": [29, 97, 98, 101, 102, 106, 110, 112, 242], "xlsxwriter": [29, 114, 242], "ha": [29, 60, 69, 92, 126, 215, 242, 254, 313, 381, 399, 487, 496, 547, 624, 699, 710, 769, 780, 903, 918], "close": [29, 70, 150, 151, 242, 369, 421, 422, 423, 424, 425, 427, 428, 429, 441, 547, 577, 578, 640, 774, 849, 918], "xlsx": [29, 101, 242], "work": [29, 37, 98, 101, 151, 184, 242, 254, 273, 301, 302, 303, 304, 354, 363, 408, 461, 488, 547, 578, 640, 669, 697, 700, 701, 702, 767, 869, 904, 918], "directori": [29, 106, 242], "sheet1": [29, 242], "valid": [29, 102, 106, 120, 124, 137, 242, 313, 448, 449, 454, 455, 457, 547, 710, 756, 769, 856, 857, 862, 863, 865, 871, 872, 918], "notat": [29, 242], "integ": [29, 41, 42, 43, 44, 54, 55, 56, 57, 118, 119, 150, 151, 242, 301, 341, 363, 416, 421, 422, 423, 424, 425, 426, 427, 428, 429, 462, 497, 518, 522, 547, 577, 578, 640, 656, 657, 697, 745, 767, 819, 829, 838, 870, 918], "medium": [29, 242], "kei": [29, 60, 66, 150, 165, 172, 177, 179, 183, 186, 242, 577, 583, 592, 598, 599, 640], "contain": [29, 60, 66, 87, 90, 100, 109, 115, 135, 163, 175, 179, 242, 254, 373, 392, 449, 452, 454, 455, 457, 470, 471, 547, 566, 595, 640, 799, 805, 857, 860, 862, 863, 865, 878, 879, 896, 918], "follow": [29, 66, 97, 98, 100, 108, 109, 127, 150, 151, 165, 178, 215, 242, 254, 336, 340, 345, 414, 421, 422, 423, 424, 425, 427, 428, 429, 478, 496, 541, 543, 547, 548, 549, 552, 553, 554, 577, 578, 583, 594, 640, 740, 744, 749, 817, 837, 838, 912, 914, 918, 919, 922, 923, 924, 926], "first_column": [29, 242], "last_column": [29, 242], "banded_column": [29, 242], "banded_row": [29, 242], "sheet": [29, 101, 242], "formula": [29, 242, 350, 547, 755, 918], "chart": [29, 242, 595, 640], "subsequ": [29, 182, 207, 242, 568, 640], "colnam": [29, 119, 136, 242, 391, 547, 567, 640], "given": [29, 48, 50, 60, 69, 70, 85, 87, 88, 89, 91, 95, 97, 98, 108, 117, 118, 119, 120, 123, 127, 137, 138, 177, 178, 187, 193, 194, 197, 214, 242, 254, 270, 285, 320, 344, 350, 369, 387, 408, 414, 417, 418, 421, 422, 424, 427, 428, 429, 432, 434, 435, 455, 473, 478, 487, 494, 514, 547, 569, 587, 594, 602, 603, 608, 615, 624, 640, 649, 666, 681, 711, 720, 748, 755, 756, 774, 796, 798, 810, 817, 821, 824, 825, 827, 830, 831, 832, 835, 841, 842, 863, 881, 903, 906, 910, 918], "here": [29, 85, 87, 88, 89, 91, 99, 100, 109, 118, 119, 120, 242, 457, 640, 865], "dd": [29, 242], "mm": [29, 242], "yyyi": [29, 242], "00": [29, 70, 150, 165, 215, 242, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 473, 512, 577, 583, 640, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 881], "dtype": [29, 63, 85, 87, 89, 91, 95, 97, 98, 108, 117, 118, 119, 120, 123, 126, 150, 151, 165, 207, 242, 254, 255, 256, 257, 258, 259, 260, 263, 266, 267, 268, 269, 278, 290, 299, 302, 303, 304, 305, 306, 311, 312, 322, 325, 328, 330, 332, 335, 342, 348, 354, 356, 389, 390, 416, 417, 421, 422, 423, 424, 425, 427, 428, 429, 436, 439, 440, 447, 456, 467, 480, 482, 484, 485, 486, 490, 491, 496, 497, 502, 505, 514, 518, 522, 523, 536, 547, 577, 578, 583, 640, 663, 664, 665, 674, 686, 694, 699, 700, 701, 702, 708, 709, 713, 722, 725, 731, 733, 736, 739, 746, 752, 756, 761, 777, 789, 798, 822, 836, 843, 855, 864, 875, 881, 889, 900, 901, 902, 906, 918], "overridden": [29, 85, 87, 89, 91, 242, 640], "basi": [29, 119, 242], "param": [29, 85, 87, 88, 89, 91, 97, 98, 108, 119, 120, 187, 242, 640], "It": [29, 70, 127, 172, 178, 224, 242, 254, 291, 398, 547, 587, 592, 624, 640, 837, 838, 918], "also": [29, 70, 88, 119, 120, 136, 149, 150, 151, 172, 175, 191, 197, 219, 242, 309, 312, 339, 368, 369, 414, 421, 422, 423, 424, 425, 427, 428, 429, 444, 507, 508, 516, 518, 531, 546, 547, 576, 577, 578, 592, 601, 608, 618, 619, 640, 743, 774, 817, 918], "group": [29, 33, 98, 149, 150, 151, 163, 175, 177, 179, 213, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242, 249, 254, 273, 362, 408, 443, 444, 454, 482, 496, 547, 576, 577, 578, 606, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640, 669, 862], "float_dtyp": [29, 242], "simplifi": [29, 67, 242, 563, 568, 570, 595, 604, 605, 606, 640], "uniform": [29, 242], "condit": [29, 65, 135, 142, 187, 242, 452, 471, 516, 566, 573, 640], "suppli": [29, 85, 87, 88, 89, 91, 187, 242, 640], "typenam": [29, 242], "3_color_scal": [29, 242], "data_bar": [29, 242], "make": [29, 52, 68, 85, 90, 97, 98, 99, 102, 106, 110, 112, 150, 151, 172, 175, 182, 215, 242, 352, 353, 392, 417, 469, 476, 547, 577, 578, 592, 640, 758, 759, 799, 877, 884, 918], "icon": [29, 242], "multipl": [29, 67, 68, 97, 98, 108, 110, 111, 112, 118, 120, 133, 137, 139, 142, 149, 150, 155, 163, 177, 179, 191, 197, 219, 222, 242, 290, 396, 399, 403, 408, 418, 421, 422, 423, 424, 425, 427, 428, 429, 444, 498, 501, 507, 508, 516, 523, 531, 540, 547, 565, 573, 576, 577, 601, 608, 618, 622, 640, 648, 686, 756, 804, 821, 918], "singl": [29, 60, 68, 97, 98, 99, 106, 108, 118, 133, 134, 135, 139, 146, 177, 187, 197, 242, 254, 271, 290, 336, 360, 390, 415, 418, 444, 447, 493, 496, 498, 501, 503, 523, 532, 547, 565, 566, 608, 640, 648, 667, 686, 740, 818, 821, 855, 896, 918], "across": [29, 242, 509, 537], "effect": [29, 126, 144, 242, 254, 547, 620, 640], "heatmap": [29, 242], "min": [29, 33, 119, 120, 132, 141, 150, 151, 179, 242, 302, 304, 310, 359, 408, 414, 424, 533, 547, 572, 577, 578, 606, 640, 700, 702, 707, 712, 764, 817, 827, 918], "entir": [29, 242], "final": [29, 60, 112, 242, 351, 352, 353, 547, 570, 640, 757, 758, 759, 918], "made": [29, 242, 900, 918], "up": [29, 52, 99, 162, 165, 188, 204, 242, 254, 301, 476, 547, 582, 583, 587, 640, 697, 884, 918], "abov": [29, 242], "order": [29, 60, 88, 115, 127, 149, 150, 151, 177, 178, 179, 189, 197, 211, 215, 242, 254, 263, 266, 287, 300, 414, 431, 432, 433, 443, 444, 478, 488, 489, 498, 547, 576, 577, 578, 591, 605, 606, 608, 613, 640, 649, 658, 661, 683, 696, 788, 817, 822, 834, 835, 839, 851, 887, 904, 905, 918], "than": [29, 70, 84, 89, 91, 97, 98, 113, 119, 120, 127, 148, 149, 162, 165, 177, 187, 188, 189, 213, 224, 242, 254, 381, 431, 441, 459, 465, 470, 476, 504, 524, 527, 534, 537, 547, 576, 583, 605, 606, 624, 640, 649, 834, 849, 867, 873, 878, 884, 918], "add": [29, 50, 98, 127, 139, 150, 219, 220, 242, 411, 479, 512, 516, 540, 547, 577, 582, 618, 619, 620, 640, 648, 918], "total": [29, 137, 242, 756, 918], "export": [29, 162, 163, 188, 204, 242], "numer": [29, 165, 242, 302, 303, 304, 369, 417, 436, 547, 557, 583, 640, 700, 701, 702, 774, 787, 836, 843, 918], "associ": [29, 60, 242], "sum": [29, 60, 137, 144, 149, 151, 161, 179, 222, 242, 254, 291, 311, 312, 350, 360, 421, 422, 424, 427, 428, 429, 493, 494, 507, 509, 516, 524, 527, 531, 547, 563, 568, 570, 576, 578, 595, 604, 622, 640, 708, 709, 755, 756, 824, 825, 827, 830, 831, 832, 918], "pass": [29, 33, 60, 70, 87, 101, 118, 119, 120, 131, 133, 149, 153, 167, 177, 178, 191, 197, 200, 219, 222, 242, 254, 323, 339, 357, 367, 408, 444, 460, 466, 472, 498, 501, 518, 536, 547, 565, 576, 580, 587, 594, 601, 604, 608, 618, 622, 640, 649, 723, 743, 762, 771, 795, 868, 874, 880, 890, 918], "funcnam": [29, 242], "averag": [29, 242, 351, 352, 353, 414, 547, 757, 758, 759, 817, 918], "count_num": [29, 242], "count": [29, 97, 98, 102, 106, 108, 110, 111, 112, 132, 150, 151, 165, 175, 176, 179, 210, 214, 215, 220, 224, 233, 242, 271, 308, 336, 384, 404, 407, 421, 422, 423, 424, 425, 427, 428, 429, 449, 489, 491, 528, 547, 577, 578, 583, 615, 620, 624, 633, 640, 667, 712, 740, 806, 811, 857, 905, 907, 918], "std_dev": [29, 242], "var": [29, 242, 547, 640, 918], "pixel": [29, 242], "unit": [29, 36, 38, 70, 119, 120, 137, 242, 318, 319, 323, 344, 348, 389, 399, 490, 518, 547, 595, 640, 718, 719, 723, 748, 752, 756, 798, 906, 918], "row_index": [29, 242], "height": [29, 135, 242], "provid": [29, 97, 98, 99, 100, 108, 109, 119, 120, 242, 291, 295, 296, 450, 451, 454, 456, 457, 518, 557, 605, 606, 640, 690, 691, 858, 859, 862, 864, 865, 926], "intersect": [29, 242], "bodi": [29, 242], "start": [29, 96, 97, 98, 102, 106, 108, 110, 111, 112, 149, 150, 166, 196, 215, 220, 242, 286, 298, 321, 323, 324, 326, 331, 333, 337, 338, 340, 341, 344, 345, 346, 347, 349, 354, 369, 442, 448, 452, 467, 471, 501, 507, 514, 516, 540, 547, 576, 577, 595, 607, 620, 640, 682, 693, 718, 720, 721, 723, 724, 730, 732, 735, 737, 738, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 774, 850, 860, 875, 879, 918], "zero": [29, 85, 86, 96, 97, 98, 102, 106, 126, 128, 141, 162, 187, 202, 207, 242, 358, 359, 432, 441, 476, 547, 561, 572, 640, 687, 699, 764, 849, 884, 896, 900, 901, 918], "unless": [29, 60, 87, 207, 242, 640, 901, 909, 918], "marker": [29, 242], "compliant": [29, 242], "case": [29, 60, 85, 87, 88, 89, 91, 112, 127, 139, 150, 151, 162, 242, 390, 398, 399, 540, 547, 577, 578, 640, 648, 918], "three": [29, 209, 242, 432, 547], "avail": [29, 94, 100, 109, 118, 241, 242, 414, 541, 543, 546, 547, 548, 549, 552, 553, 554, 557, 558, 570, 639, 640, 817, 912, 914, 918, 919, 922, 923, 924], "insert_befor": [29, 242], "insert_aft": [29, 242], "respect": [29, 242], "direct": [29, 99, 106, 112, 213, 242], "ad": [29, 88, 126, 150, 210, 219, 242, 253, 357, 507, 508, 547, 577, 618, 640, 762, 918], "end": [29, 97, 98, 106, 108, 150, 242, 286, 297, 340, 354, 369, 448, 452, 467, 471, 501, 514, 547, 577, 579, 586, 595, 640, 682, 692, 744, 774, 860, 875, 879, 918], "far": [29, 242], "thei": [29, 88, 115, 124, 166, 242, 420, 547, 823, 918], "pure": [29, 242], "actual": [29, 88, 101, 119, 120, 242, 844, 918], "indic": [29, 65, 92, 96, 97, 98, 102, 106, 108, 117, 118, 120, 150, 151, 205, 242, 264, 290, 371, 374, 375, 377, 378, 379, 421, 422, 423, 424, 425, 427, 428, 429, 432, 438, 482, 498, 547, 577, 578, 640, 686, 778, 782, 783, 784, 785, 786, 835, 846, 891, 897, 918], "calcul": [29, 60, 150, 242, 272, 314, 351, 352, 353, 382, 389, 426, 441, 490, 496, 547, 577, 640, 668, 713, 757, 758, 759, 793, 829, 849, 853, 908, 918], "individu": [29, 119, 151, 242, 254, 455, 547, 578, 606, 640, 698, 863, 918], "gridlin": [29, 242], "zoom": [29, 242], "level": [29, 33, 108, 110, 111, 112, 119, 127, 144, 175, 242, 360, 547, 579, 586, 606, 640], "definit": [29, 242, 382, 547, 793, 918], "take": [29, 119, 144, 172, 178, 201, 242, 336, 483, 513, 515, 547, 592, 612, 640, 740, 892, 910, 918], "care": [29, 242, 254, 433, 547, 839, 918], "rel": [29, 100, 109, 115, 116, 242, 336, 351, 352, 353, 547, 740, 757, 758, 759, 918], "see": [29, 99, 100, 101, 109, 115, 116, 119, 120, 131, 164, 178, 242, 302, 303, 304, 343, 359, 368, 382, 390, 441, 531, 547, 700, 701, 702, 747, 793, 849, 918, 926], "readthedoc": [29, 242, 926], "io": [29, 242, 926], "working_with_conditional_format": [29, 242], "html": [29, 86, 99, 126, 131, 242], "similarli": [29, 88, 242], "well": [29, 97, 98, 108, 138, 179, 242, 369, 547, 569, 640, 774, 918], "mandatori": [29, 242], "adjac": [29, 242], "each": [29, 60, 98, 111, 115, 116, 118, 127, 148, 149, 163, 165, 177, 207, 212, 221, 222, 224, 225, 227, 236, 242, 254, 277, 289, 340, 345, 414, 455, 469, 470, 496, 503, 536, 547, 583, 595, 614, 622, 624, 625, 627, 636, 640, 673, 685, 698, 744, 749, 817, 863, 877, 878, 888, 918], "two": [29, 87, 89, 91, 99, 144, 171, 172, 179, 209, 223, 224, 242, 249, 315, 319, 443, 482, 494, 504, 506, 529, 534, 547, 591, 592, 623, 624, 640, 714, 719, 918], "help": [29, 242, 570, 640], "where": [29, 65, 99, 135, 139, 162, 171, 188, 242, 264, 347, 350, 432, 441, 504, 534, 540, 547, 591, 640, 648, 659, 751, 755, 835, 849, 853, 908, 910, 918], "appear": [29, 88, 115, 242, 489, 547, 905, 918], "working_with_sparklin": [29, 242], "instanti": [29, 191, 219, 242, 601, 618, 640], "basic": [29, 242], "random": [29, 118, 119, 120, 152, 189, 242, 365, 414, 431, 437, 547, 770, 817, 834, 845, 918], "date": [29, 36, 60, 70, 97, 98, 99, 108, 113, 132, 148, 150, 151, 163, 165, 242, 270, 271, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 369, 421, 422, 423, 424, 425, 427, 428, 429, 473, 486, 518, 527, 547, 577, 578, 583, 640, 666, 667, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 774, 789, 800, 803, 808, 809, 838, 881, 902, 918], "dtm": [29, 242, 319, 719], "2023": [29, 114, 163, 242, 319, 719], "num": [29, 209, 242, 369, 372, 476, 547, 774, 918], "500": [29, 162, 214, 242, 570, 615, 640, 730, 732, 738, 745, 824, 825, 827, 918], "val": [29, 186, 242, 300, 486, 547, 599, 640, 696], "10_000": [29, 242], "20_000": [29, 242], "30_000": [29, 242], "locat": [29, 139, 185, 208, 212, 242, 432, 547, 614, 640, 648, 835, 838, 891, 918], "u": [29, 36, 38, 70, 162, 188, 204, 242, 318, 319, 323, 344, 348, 473, 518, 532, 718, 719, 723, 748, 752], "increas": [29, 97, 106, 242, 313, 547, 710, 918], "b4": [29, 242], "light": [29, 242], "twice": [29, 101, 242], "differ": [29, 97, 113, 115, 139, 150, 151, 162, 188, 204, 210, 242, 272, 314, 321, 336, 337, 339, 346, 392, 405, 406, 473, 489, 515, 518, 524, 527, 547, 568, 577, 578, 640, 648, 649, 668, 713, 721, 740, 741, 743, 750, 808, 809, 836, 881, 918], "titl": [29, 242], "explicit": [29, 118, 242, 497, 531], "integr": [29, 242], "multi_fram": [29, 242], "wb": [29, 242], "coordin": [29, 242], "advanc": [29, 242], "len": [29, 69, 118, 119, 163, 242, 308, 418, 459, 465, 476, 547, 711, 821, 867, 873, 884, 918], "min_color": [29, 242], "76933c": [29, 242], "mid_color": [29, 242], "c4d79b": [29, 242], "max_color": [29, 242], "ebf1d": [29, 242], "data_bar_2010": [29, 242], "bar_color": [29, 242], "9bbb59": [29, 242], "bar_negative_color_sam": [29, 242], "bar_negative_border_color_sam": [29, 242], "000": [29, 242], "white": [29, 242], "w": [29, 242, 454, 862], "get_worksheet_by_nam": [29, 242], "fmt_titl": [29, 242], "add_format": [29, 242], "font_color": [29, 242], "4f6228": [29, 242], "font_siz": [29, 242], "12": [29, 60, 69, 70, 150, 151, 165, 215, 242, 311, 319, 324, 326, 333, 338, 340, 345, 349, 409, 436, 508, 510, 511, 523, 547, 577, 578, 579, 583, 586, 604, 611, 640, 649, 711, 719, 737, 744, 749, 833, 918], "ital": [29, 242], "bold": [29, 242], "customis": [29, 242], "trend": [29, 242], "win_loss": [29, 242], "subtl": [29, 242], "tone": [29, 242], "hidden": [29, 242], "id": [29, 224, 242, 463, 464, 489, 491, 547, 624, 905, 918], "q1": [29, 242], "55": [29, 62, 114, 242], "20": [29, 139, 155, 156, 178, 180, 184, 185, 242, 261, 262, 263, 266, 314, 340, 345, 365, 368, 518, 522, 547, 594, 640, 713, 749, 918], "35": [29, 120, 242, 314, 547, 713, 918], "q2": [29, 242], "30": [29, 69, 139, 150, 155, 178, 184, 185, 203, 219, 242, 261, 262, 263, 266, 314, 319, 322, 326, 338, 340, 345, 349, 365, 436, 547, 577, 594, 618, 640, 711, 713, 719, 722, 744, 749, 918], "15": [29, 127, 150, 151, 156, 242, 313, 314, 340, 345, 356, 508, 547, 577, 578, 640, 710, 713, 744, 749, 761, 918], "60": [29, 139, 242, 341, 342, 473, 741, 745, 746, 881], "q3": [29, 242], "50": [29, 139, 242, 302, 303, 304, 340, 345, 547, 700, 749, 918], "40": [29, 139, 178, 242, 340, 345, 365, 547, 594, 640, 726, 749], "80": [29, 242], "q4": [29, 242], "75": [29, 242], "account": [29, 242, 336, 351, 352, 353, 547, 740, 757, 758, 759, 918], "flavour": [29, 242], "integer_dtyp": [29, 191, 242, 601, 640], "0_": [29, 242], "just": [29, 99, 108, 171, 242, 591, 640], "unifi": [29, 242], "multi": [29, 97, 98, 242, 354, 547], "2_color_scal": [29, 242], "95b3d7": [29, 242], "ffffff": [29, 242], "ipccompress": [30, 242], "arrow": [30, 71, 85, 99, 102, 110, 202, 242, 605, 640, 896, 900, 918], "ipc": [30, 102, 103, 110, 113, 242, 557], "binari": [30, 242, 294, 296, 297, 298, 495, 689, 691, 692, 693], "feather": [30, 102, 110, 242, 557], "lz4": [30, 33, 242, 605, 606, 640], "zstd": [30, 33, 242, 605, 606, 640], "pretti": [31, 242], "row_ori": [31, 242], "iobas": [31, 32, 104, 105, 242, 597, 621, 640], "serial": [31, 32, 242], "represent": [31, 32, 242, 300, 321, 324, 326, 327, 329, 331, 333, 334, 337, 338, 341, 346, 347, 349, 486, 547, 568, 585, 640, 696, 721, 724, 726, 730, 732, 735, 737, 738, 741, 742, 745, 750, 751, 753, 902, 918], "orient": [31, 61, 63, 89, 91, 242, 640], "slower": [31, 89, 91, 127, 149, 177, 215, 224, 242, 576, 624, 640, 649, 918], "common": [31, 242], "write_ndjson": [31, 242], "newlin": [32, 105, 111, 242], "delimit": [32, 92, 97, 98, 105, 108, 111, 179, 205, 242, 447, 855, 897, 918], "parquetcompress": [33, 242], "compression_level": [33, 242, 606, 640], "statist": [33, 97, 98, 106, 112, 132, 242, 352, 353, 382, 421, 422, 423, 424, 425, 426, 427, 428, 429, 441, 547, 606, 640, 712, 758, 759, 793, 829, 849, 918], "row_group_s": [33, 242, 606, 640], "use_pyarrow": [33, 97, 102, 106, 242, 606, 640, 899, 900, 918], "pyarrow_opt": [33, 100, 106, 109, 242], "parquet": [33, 106, 107, 112, 242, 557, 606, 640], "gzip": [33, 242, 606, 640], "lzo": [33, 242, 606, 640], "brotli": [33, 242, 606, 640], "choos": [33, 242, 605, 606, 640], "good": [33, 162, 242, 605, 606, 640], "perform": [33, 76, 86, 97, 98, 102, 106, 108, 110, 111, 112, 126, 127, 150, 151, 165, 182, 224, 242, 254, 408, 547, 577, 578, 583, 605, 606, 620, 624, 640, 649, 918], "fast": [33, 242, 357, 433, 547, 605, 606, 640, 762, 839, 918], "decompress": [33, 242, 605, 606, 640], "backward": [33, 141, 165, 242, 293, 359, 547, 572, 583, 606, 640, 764, 918], "guarante": [33, 86, 97, 98, 242, 570, 606, 640], "deal": [33, 242, 414, 473, 547, 606, 640, 817, 881, 918], "older": [33, 242, 606, 640], "reader": [33, 94, 97, 98, 102, 106, 242, 558, 606, 640], "higher": [33, 181, 234, 242, 413, 425, 530, 547, 596, 606, 634, 640, 816, 828, 918], "mean": [33, 97, 98, 102, 106, 108, 132, 141, 149, 179, 222, 242, 356, 359, 422, 441, 454, 499, 547, 572, 576, 587, 606, 622, 640, 712, 761, 764, 769, 825, 849, 862, 918], "smaller": [33, 137, 242, 570, 606, 640, 756, 918], "disk": [33, 102, 242, 604, 605, 606, 640], "11": [33, 114, 151, 242, 316, 317, 326, 336, 340, 345, 368, 409, 428, 442, 476, 501, 537, 547, 563, 578, 579, 586, 595, 606, 611, 640, 649, 740, 744, 749, 823, 918], "22": [33, 242, 340, 345, 348, 473, 501, 606, 640, 744, 749, 752, 881], "extra": [33, 97, 100, 101, 102, 106, 109, 110, 112, 139, 242, 606, 640, 648, 918], "comput": [33, 67, 68, 73, 137, 149, 165, 207, 211, 222, 234, 242, 248, 255, 256, 257, 258, 259, 260, 281, 282, 283, 305, 306, 308, 309, 310, 311, 312, 315, 350, 355, 382, 387, 388, 403, 408, 409, 412, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 445, 484, 485, 498, 504, 506, 513, 529, 534, 547, 576, 580, 582, 583, 606, 613, 619, 622, 634, 640, 644, 650, 651, 652, 653, 654, 655, 677, 678, 679, 704, 705, 706, 707, 708, 709, 714, 755, 756, 760, 793, 796, 797, 804, 812, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 846, 847, 848, 849, 852, 893, 894, 901, 918], "reduc": [33, 97, 98, 106, 108, 110, 111, 112, 229, 230, 232, 235, 242, 436, 516, 547, 606, 629, 630, 632, 635, 640, 801, 815, 843, 889, 918], "pressur": [33, 106, 111, 112, 242, 436, 547, 606, 640, 843, 918], "improv": [33, 102, 110, 242, 606, 640], "speed": [33, 242, 254, 547, 606, 640], "minimum": [33, 118, 119, 120, 144, 173, 242, 302, 304, 351, 352, 353, 402, 406, 414, 527, 547, 593, 606, 640, 700, 702, 734, 757, 758, 759, 809, 814, 817, 918], "implement": [33, 86, 126, 127, 224, 242, 254, 547, 624, 649, 837, 838, 918], "v": [33, 69, 137, 242, 432, 547, 711, 835, 918], "At": [33, 242], "moment": [33, 131, 242, 382, 441, 547, 793, 849, 918], "argument": [33, 97, 100, 106, 109, 131, 133, 138, 149, 150, 151, 169, 177, 178, 179, 191, 197, 199, 207, 212, 215, 219, 222, 242, 340, 345, 354, 369, 408, 421, 422, 423, 424, 425, 427, 428, 429, 444, 460, 466, 472, 500, 501, 514, 533, 536, 547, 565, 569, 576, 577, 578, 594, 601, 608, 614, 618, 622, 640, 744, 749, 774, 868, 874, 880, 901, 918], "pyarrow": [33, 85, 90, 97, 100, 102, 106, 109, 113, 114, 163, 202, 206, 207, 242, 558, 896, 899, 900, 901, 918], "write_t": [33, 242], "base": [34, 135, 142, 150, 151, 242, 350, 351, 352, 353, 387, 388, 462, 524, 527, 547, 557, 566, 573, 577, 578, 640, 755, 757, 758, 759, 796, 797, 870, 910, 918], "calendar": [35, 36, 150, 151, 165, 215, 242, 326, 336, 340, 345, 349, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 726, 740, 744, 749, 753], "time": [36, 38, 66, 67, 70, 97, 98, 108, 139, 150, 151, 165, 215, 242, 269, 270, 271, 291, 318, 319, 320, 323, 336, 339, 344, 348, 369, 473, 486, 487, 502, 503, 512, 518, 532, 547, 563, 577, 578, 583, 595, 640, 648, 665, 667, 718, 719, 720, 723, 740, 743, 748, 752, 774, 800, 803, 881, 902, 903, 918], "time_unit": [36, 38, 70, 348, 752], "time_zon": [36, 70, 320, 339, 720, 743], "m": [36, 38, 70, 318, 319, 323, 343, 344, 348, 473, 512, 518, 718, 719, 723, 747, 748, 752, 881], "timezon": [36, 70, 473, 881], "zoneinfo": 36, "run": [36, 67, 127, 149, 166, 211, 224, 242, 254, 273, 313, 533, 547, 563, 568, 570, 576, 587, 591, 595, 604, 605, 606, 613, 624, 640, 649, 669, 710, 918, 925], "available_timezon": 36, "attribut": [36, 37, 38, 45, 117, 242, 541, 543, 548, 549, 552, 553, 554, 640, 912, 914, 919, 922, 923, 924], "128": [37, 62, 812, 918], "bit": [37, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 416, 448, 547, 819, 856, 918], "neg": [37, 150, 153, 167, 193, 194, 196, 200, 242, 285, 286, 434, 435, 442, 467, 547, 577, 602, 603, 607, 620, 640, 681, 682, 771, 795, 841, 842, 850, 875, 890, 918], "scale": [37, 137, 242, 756, 918], "experiment": [37, 69, 113, 191, 213, 214, 219, 242, 313, 340, 421, 422, 423, 424, 425, 427, 428, 429, 547, 601, 615, 618, 640, 710, 711, 744, 918], "progress": 37, "expect": [37, 77, 79, 84, 254, 496, 547, 585, 587, 640], "delta": [38, 100, 109, 504, 529, 534, 557, 853, 908, 918], "32": [39, 42, 55, 62, 151, 161, 242, 436, 547, 578, 640, 714, 741, 812, 828, 918], "sign": [41, 42, 43, 44, 336, 416, 476, 547, 740, 819, 884, 918], "inner": [45, 51, 164, 214, 242, 278, 315, 547, 582, 615, 621, 640, 674, 714, 918], "polarsdatatyp": [45, 95, 97, 98, 103, 107, 117, 119, 120, 123, 127, 136, 242, 254, 299, 354, 390, 456, 496, 497, 501, 514, 522, 523, 547, 567, 640, 649, 694, 864, 918], "pythondatatyp": 45, "nest": [45, 51, 137, 242, 557, 756, 918], "arrai": [45, 85, 89, 97, 98, 106, 137, 202, 206, 207, 242, 269, 280, 281, 282, 283, 284, 287, 288, 296, 302, 303, 304, 308, 309, 310, 311, 312, 388, 421, 422, 424, 427, 428, 429, 433, 449, 451, 454, 455, 457, 502, 513, 547, 640, 665, 676, 677, 678, 679, 680, 683, 684, 691, 700, 701, 702, 706, 707, 708, 709, 714, 756, 797, 824, 825, 827, 830, 831, 832, 839, 844, 857, 859, 862, 863, 865, 896, 900, 901, 909, 918], "within": [45, 115, 116, 165, 242, 583, 640], "wrap": [47, 369, 547], "arbitrari": [47, 119], "python": [47, 70, 97, 98, 114, 127, 162, 188, 204, 224, 242, 254, 319, 390, 496, 547, 624, 649, 719, 727, 728, 729, 734, 899, 918], "queri": [48, 67, 99, 102, 108, 110, 111, 112, 139, 166, 178, 242, 291, 392, 457, 547, 563, 568, 570, 579, 586, 595, 604, 620, 624, 640, 648, 865, 918, 925], "pars": [48, 97, 98, 101, 108, 110, 111, 149, 191, 197, 219, 222, 242, 408, 444, 456, 462, 473, 498, 500, 503, 518, 536, 547, 576, 601, 608, 618, 622, 640, 864, 870, 881], "transform": [48, 127, 242, 390, 474, 475, 547], "lf": [50, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 640], "under": [50, 61, 62, 63, 64, 541, 543, 548, 549, 552, 553, 554, 912, 914, 919, 922, 923, 924], "context": [51, 175, 242, 249, 254, 273, 360, 398, 443, 444, 491, 496, 505, 515, 518, 533, 546, 547, 557, 619, 640, 669], "manag": [51, 557], "categor": [51, 92, 122, 164, 205, 242, 300, 392, 486, 547, 695, 696, 902, 918], "temporarili": [51, 150, 151, 242, 577, 578, 640], "cach": [51, 67, 102, 108, 110, 112, 122, 392, 421, 422, 423, 424, 425, 427, 428, 429, 473, 547, 563, 568, 570, 595, 604, 640, 881], "categori": [51, 69, 122, 300, 696, 711, 918], "until": [51, 166, 242], "finish": [51, 73, 139, 242, 648, 918], "global": [51, 119, 122, 392, 547], "invalid": [51, 97, 98, 108, 456, 457, 462, 864, 865, 870], "outermost": 51, "exit": [51, 124], "df1": [51, 60, 68, 115, 139, 145, 207, 217, 242], "color": [51, 224, 624], "red": [51, 224, 624], "green": [51, 224, 624], "blue": 51, "orang": [51, 130, 225, 226, 228, 229, 230, 232, 234, 235, 242, 625, 626, 628, 629, 630, 632, 634, 635], "uint8": [51, 117, 311, 312, 480, 547, 708, 709, 889, 918], "df2": [51, 60, 68, 115, 139, 145, 207, 217, 242], "yellow": 51, "black": [51, 127, 242], "join": [51, 60, 67, 165, 214, 242, 368, 408, 547, 563, 568, 570, 583, 595, 604, 615, 619, 640], "succe": [51, 97, 98, 108], "df_join": 51, "cat": [51, 69, 448, 474, 475, 486, 503, 543, 547, 711, 856, 914, 918], "u8": [51, 92, 205, 242, 897, 918], "schemadict": [52, 85, 87, 88, 89, 90, 91, 108, 190, 242, 536, 587, 600, 624, 640], "composit": 52, "dai": [53, 70, 150, 151, 163, 165, 215, 242, 323, 326, 333, 336, 337, 338, 340, 344, 345, 346, 347, 349, 421, 422, 423, 424, 425, 427, 428, 429, 510, 511, 512, 547, 577, 578, 583, 640, 740, 741, 744, 749, 751], "unsign": [54, 55, 56, 57, 416, 547, 819, 918], "could": [58, 73, 135, 150, 242, 299, 507, 516, 547, 566, 577, 640, 694, 918], "static": [58, 624], "utf": 59, "descend": [60, 197, 242, 263, 266, 287, 414, 433, 443, 444, 487, 498, 547, 608, 640, 658, 661, 683, 788, 817, 839, 851, 903, 918], "uniqu": [60, 117, 118, 120, 160, 175, 233, 242, 265, 372, 380, 404, 473, 489, 491, 528, 547, 633, 640, 660, 712, 779, 790, 806, 881, 905, 907, 918], "inject": 60, "fill": [60, 68, 95, 123, 140, 141, 194, 213, 242, 293, 309, 312, 358, 359, 364, 368, 421, 422, 424, 427, 428, 429, 435, 459, 465, 476, 517, 547, 571, 572, 603, 619, 640, 763, 764, 810, 824, 825, 827, 830, 831, 832, 842, 867, 873, 884, 918], "sort": [60, 61, 115, 150, 151, 165, 172, 178, 179, 215, 227, 236, 242, 263, 266, 300, 360, 433, 444, 491, 493, 498, 547, 568, 577, 578, 583, 592, 594, 595, 604, 627, 636, 640, 658, 661, 696, 788, 839, 904, 907, 918], "origin": [60, 97, 98, 211, 242, 339, 381, 392, 408, 416, 449, 454, 455, 457, 459, 465, 476, 547, 613, 640, 743, 799, 857, 862, 863, 865, 867, 873, 884, 918], "doe": [60, 79, 85, 87, 88, 89, 91, 97, 98, 100, 101, 108, 109, 113, 115, 116, 139, 163, 187, 188, 219, 242, 348, 392, 489, 515, 547, 570, 587, 618, 640, 648, 752, 769, 799, 844, 909, 918], "receiv": [60, 127, 178, 242, 547, 594, 640], "now": [60, 151, 242, 578, 640], "whose": [60, 165, 179, 242, 354, 514, 547, 583, 640], "post": 60, "constrain": 60, "newli": 60, "boolean": [60, 65, 142, 144, 197, 242, 251, 252, 270, 294, 360, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 444, 456, 493, 498, 536, 547, 573, 608, 640, 646, 647, 659, 666, 689, 765, 774, 775, 776, 778, 779, 781, 782, 783, 784, 785, 786, 790, 813, 814, 837, 856, 910, 918], "2022": [60, 70, 132, 148, 242, 319, 473, 512, 518, 719, 726, 881], "x": [60, 97, 98, 99, 108, 118, 119, 137, 155, 158, 160, 164, 171, 242, 254, 269, 278, 365, 390, 417, 438, 441, 469, 486, 496, 507, 508, 509, 516, 523, 531, 537, 547, 582, 587, 591, 607, 640, 645, 649, 764, 791, 846, 849, 877, 902, 918], "y": [60, 118, 119, 137, 158, 160, 164, 171, 242, 269, 278, 343, 417, 473, 509, 537, 547, 582, 591, 607, 640, 645, 747, 881, 918], "df3": [60, 242], "set_tbl_format": 60, "09": [60, 151, 242, 319, 326, 578, 640, 721], "01": [60, 70, 132, 148, 150, 151, 215, 242, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 473, 512, 577, 578, 640, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 881], "02": [60, 70, 114, 148, 150, 151, 215, 242, 318, 319, 323, 324, 325, 331, 332, 333, 341, 342, 344, 346, 348, 430, 473, 512, 547, 577, 578, 640, 718, 719, 723, 724, 725, 727, 728, 729, 730, 732, 734, 735, 736, 737, 738, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 881], "03": [60, 70, 150, 151, 215, 242, 318, 319, 320, 322, 323, 325, 332, 333, 339, 340, 341, 342, 343, 344, 345, 346, 348, 577, 578, 640, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 734, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752], "af1": 60, "af2": 60, "af3": 60, "keep": [60, 97, 98, 108, 211, 214, 215, 242, 381, 392, 500, 547, 613, 615, 640, 799, 918], "easili": [60, 191, 219, 222, 242, 501, 536, 601, 618, 622, 640], "wise": [60, 144, 242, 255, 256, 257, 258, 259, 260, 305, 306, 355, 388, 438, 439, 440, 484, 485, 507, 508, 516, 531, 547, 650, 651, 652, 653, 654, 655, 704, 705, 760, 797, 846, 847, 848, 893, 894, 918], "dot": [60, 547, 604, 640, 918], "product": [60, 131, 242, 311, 315, 496, 547, 708, 714, 918], "fill_nul": [60, 140, 242, 473, 547, 571, 619, 640, 881, 918], "167": 60, "47": 60, "callabl": [61, 62, 63, 64, 108, 127, 144, 178, 224, 242, 254, 291, 390, 391, 420, 496, 507, 508, 516, 523, 531, 547, 587, 594, 624, 640, 649, 687, 823, 918], "decor": [61, 62, 63, 64, 119, 120, 127, 242, 254, 547, 649, 918], "access": [61, 62, 63, 64, 162, 187, 188, 242, 392, 547, 619, 640], "by_first_letter_of_column_nam": 61, "f": [61, 98, 132, 148, 163, 202, 210, 213, 242, 254, 291, 436, 453, 473, 496, 502, 507, 508, 516, 523, 531, 547, 687, 861, 881], "fromkei": [61, 63], "by_first_letter_of_column_valu": 61, "starts_with": [61, 448, 452, 860], "slice": [61, 67, 137, 153, 163, 200, 242, 277, 289, 420, 421, 422, 423, 424, 425, 427, 428, 429, 547, 563, 568, 570, 587, 595, 604, 605, 606, 640, 673, 685, 756, 771, 823, 824, 825, 826, 827, 828, 830, 831, 832, 890, 918], "to_seri": [61, 65, 242, 291, 687], "xx": [61, 63], "xy": [61, 63], "yy": [61, 63], "yz": [61, 63], "a2": [61, 63], "b1": [61, 63], "b2": [61, 63], "pow_n": 62, "powersofn": 62, "next": [62, 293, 414, 547, 817, 918], "p": [62, 178, 242, 536, 547, 594, 640], "ceil": [62, 547, 918], "previou": [62, 124, 409, 478, 547, 812, 918], "floor": [62, 547, 918], "nearest": [62, 165, 181, 234, 242, 301, 363, 413, 425, 530, 547, 583, 596, 634, 640, 697, 767, 773, 816, 828, 918], "24": [62, 114, 127, 137, 151, 242, 311, 313, 325, 547, 578, 640, 710, 725, 918], "001": [62, 327, 328, 330, 335, 512, 731, 733, 739], "next_pow2": 62, "prev_pow2": 62, "nearest_pow2": 62, "split_by_column_dtyp": 63, "collect": [63, 67, 109, 113, 166, 202, 242, 254, 497, 502, 518, 536, 547, 565, 566, 569, 570, 571, 572, 573, 574, 576, 577, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 593, 594, 596, 598, 599, 601, 602, 603, 607, 608, 609, 610, 611, 612, 613, 614, 616, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 640], "31": [64, 319, 321, 322, 333, 346, 473, 510, 511, 518, 719, 721, 722, 881], "42": [64, 151, 152, 242, 578, 640, 770, 918], "961": 64, "1764": 64, "4160": 64, "eager": [65, 150, 213, 242, 497, 518, 522, 532, 536, 546, 557, 577, 640], "evalu": [65, 140, 142, 165, 242, 264, 313, 367, 369, 373, 392, 495, 497, 513, 532, 536, 547, 573, 580, 582, 583, 640, 659, 710, 910, 918], "immedi": [65, 414, 497, 532, 536, 547, 817, 918], "arg_tru": [65, 547, 918], "u32": [65, 150, 176, 220, 225, 233, 235, 242, 249, 261, 262, 263, 264, 265, 266, 267, 268, 271, 280, 307, 308, 321, 324, 327, 331, 333, 337, 338, 341, 346, 347, 384, 392, 404, 407, 414, 432, 449, 458, 461, 486, 489, 498, 505, 528, 547, 577, 620, 625, 633, 635, 640, 658, 659, 660, 676, 694, 721, 724, 730, 732, 735, 737, 738, 741, 742, 745, 750, 751, 817, 857, 866, 869, 902, 905, 907, 918], "build": [66, 86], "wa": 66, "compil": [66, 267, 268, 663, 664], "gate": 66, "info": [66, 100, 109, 114], "otherwis": [66, 172, 191, 242, 295, 302, 303, 304, 351, 352, 353, 416, 448, 450, 540, 547, 592, 601, 640, 649, 690, 700, 701, 702, 757, 758, 759, 819, 837, 838, 856, 858, 918], "version": [66, 69, 92, 100, 109, 114, 266, 356, 529, 531, 534, 547, 661, 761, 918], "depend": [66, 114, 254, 267, 268, 398, 414, 496, 515, 518, 547, 663, 664, 817, 918], "host": [66, 97, 102, 106, 110, 112], "git": 66, "lazy_fram": 67, "type_coercion": [67, 563, 568, 570, 595, 604, 605, 606, 640], "predicate_pushdown": [67, 563, 568, 570, 587, 595, 604, 605, 606, 640], "projection_pushdown": [67, 563, 568, 570, 587, 595, 604, 605, 606, 640], "simplify_express": [67, 563, 568, 570, 595, 604, 605, 606, 640], "no_optim": [67, 563, 570, 587, 595, 605, 606, 640], "slice_pushdown": [67, 563, 568, 570, 587, 595, 604, 605, 606, 640], "common_subplan_elimin": [67, 563, 568, 570, 595, 604, 640], "graph": [67, 166, 242, 580, 619, 640], "parallel": [67, 68, 94, 99, 106, 112, 150, 165, 166, 178, 242, 273, 313, 547, 557, 577, 582, 583, 640, 669, 710, 918], "threadpool": 67, "coercion": [67, 417, 547, 563, 568, 570, 595, 604, 605, 606, 640], "optim": [67, 106, 108, 110, 111, 112, 162, 166, 178, 182, 188, 242, 563, 568, 570, 587, 595, 604, 605, 606, 620, 640], "predic": [67, 108, 110, 111, 112, 113, 142, 187, 242, 360, 493, 516, 540, 547, 563, 568, 570, 573, 587, 595, 598, 604, 605, 606, 620, 640, 765, 837, 838, 918], "pushdown": [67, 563, 568, 570, 587, 595, 598, 604, 605, 606, 620, 640, 837, 838, 918], "project": [67, 108, 110, 111, 112, 254, 443, 444, 547, 563, 568, 570, 587, 595, 598, 604, 605, 606, 621, 640], "turn": [67, 97, 98, 108, 122, 491, 547, 563, 568, 570, 587, 595, 605, 606, 640], "off": [67, 97, 98, 108, 122, 491, 547, 563, 568, 570, 587, 595, 605, 606, 640], "Will": [67, 210, 242, 524, 527, 563, 568, 570, 595, 604, 640, 918], "try": [67, 80, 82, 97, 98, 101, 102, 106, 108, 110, 112, 563, 568, 570, 595, 604, 640], "branch": [67, 563, 568, 570, 595, 604, 640], "subplan": [67, 563, 568, 570, 595, 604, 640], "occur": [67, 271, 403, 414, 547, 563, 568, 570, 595, 604, 640, 667, 804, 817, 918], "union": [67, 68, 175, 242, 524, 527, 563, 568, 570, 595, 604, 640, 714, 781, 838, 918], "part": [67, 85, 469, 470, 563, 568, 570, 595, 604, 619, 640, 721, 724, 730, 732, 735, 737, 738, 745, 753, 877, 878], "fashion": [67, 164, 242, 563, 568, 570, 595, 604, 640], "item": [68, 98, 189, 242, 270, 276, 278, 356, 431, 470, 547, 666, 672, 674, 761, 834, 878, 918], "iter": [68, 149, 150, 151, 162, 163, 177, 187, 188, 191, 197, 210, 219, 221, 222, 242, 313, 354, 408, 444, 498, 500, 501, 503, 514, 533, 536, 547, 576, 577, 578, 601, 608, 618, 622, 640, 710, 918], "rechunk": [68, 85, 90, 97, 98, 102, 106, 108, 110, 111, 112, 139, 242, 547, 648, 698, 805, 918], "concatmethod": 68, "vertic": [68, 139, 213, 217, 242, 447, 524, 855], "aggreg": [68, 97, 98, 106, 144, 150, 168, 169, 170, 173, 175, 179, 180, 181, 198, 199, 213, 216, 222, 223, 226, 228, 242, 249, 360, 386, 390, 408, 420, 421, 422, 423, 424, 425, 427, 428, 429, 491, 507, 508, 509, 516, 521, 524, 527, 531, 537, 547, 577, 587, 588, 589, 590, 593, 596, 609, 610, 616, 622, 623, 626, 628, 640, 823, 824, 825, 827, 830, 831, 832, 918], "concaten": [68, 144, 178, 242, 503, 547, 594, 640, 698, 805, 918], "sure": [68, 85, 90, 97, 98, 99, 102, 106, 182, 242, 497], "contigu": [68, 85, 90, 97, 98, 102, 106, 108, 110, 111, 112, 182, 242], "diagon": [68, 210, 242], "strategi": [68, 97, 117, 118, 119, 120, 141, 150, 164, 165, 174, 242, 254, 291, 359, 547, 572, 577, 582, 583, 640, 687, 764, 918], "vstack": [68, 139, 242], "find": [68, 143, 242, 432, 547, 835, 918], "miss": [68, 97, 98, 108, 140, 242, 293, 351, 352, 353, 364, 368, 375, 377, 534, 547, 571, 640, 757, 758, 759, 909, 918], "stack": [68, 155, 217, 242], "length": [68, 69, 95, 118, 123, 150, 151, 196, 242, 286, 313, 340, 345, 399, 420, 421, 422, 423, 424, 425, 427, 428, 429, 442, 459, 461, 465, 467, 476, 497, 547, 577, 578, 595, 607, 640, 682, 687, 698, 710, 711, 719, 744, 749, 794, 810, 823, 824, 825, 826, 827, 828, 830, 831, 832, 850, 867, 869, 873, 875, 884, 918], "don": [68, 127, 213, 242, 254, 273, 313, 496, 547, 649, 669, 710, 836, 909, 918], "t": [68, 101, 108, 127, 178, 213, 242, 254, 273, 313, 350, 351, 352, 353, 460, 466, 472, 473, 496, 540, 547, 594, 640, 649, 669, 710, 755, 757, 758, 759, 836, 868, 874, 880, 881, 909, 918], "match": [68, 79, 85, 87, 88, 89, 91, 115, 116, 141, 165, 187, 242, 397, 448, 449, 452, 455, 456, 457, 460, 463, 464, 466, 471, 472, 473, 501, 572, 583, 640, 789, 856, 857, 860, 863, 864, 865, 868, 871, 872, 874, 879, 880, 881, 918], "relev": 68, "execut": [68, 166, 242, 273, 560, 587, 595, 640, 669], "df_h1": 68, "l1": 68, "l2": 68, "df_h2": 68, "r1": 68, "r2": 68, "r3": 68, "df_d1": 68, "df_d2": 68, "bin": [69, 462, 541, 711, 870, 912, 918], "label": [69, 420, 421, 422, 423, 424, 425, 427, 428, 429, 547, 595, 640, 711, 823, 824, 825, 826, 827, 828, 830, 831, 832, 918], "break_point_label": [69, 711, 918], "break_point": [69, 711, 918], "category_label": [69, 711, 918], "discret": [69, 272, 314, 350, 547, 668, 711, 713, 755, 918], "deprec": [69, 92, 266, 356, 529, 534, 547, 640, 661, 761, 918], "sinc": [69, 92, 100, 109, 266, 323, 356, 518, 529, 534, 547, 661, 723, 761, 918], "assign": [69, 118, 150, 242, 414, 469, 470, 547, 577, 640, 711, 799, 817, 877, 878, 918], "must": [69, 86, 87, 100, 109, 138, 150, 151, 165, 172, 187, 242, 291, 390, 421, 422, 423, 424, 425, 427, 428, 429, 547, 569, 577, 578, 583, 587, 592, 640, 711, 918], "breakpoint": [69, 711, 918], "inf": [69, 119, 120, 260, 371, 374, 547, 655, 711, 778, 782, 798, 812, 906, 918], "low": [70, 150, 242, 341, 497, 577, 640], "high": [70, 150, 242, 341, 497, 577, 640], "interv": [70, 150, 151, 215, 242, 340, 341, 345, 369, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 640, 721, 723, 724, 730, 732, 735, 737, 738, 741, 742, 744, 745, 747, 748, 749, 750, 751, 753, 774, 918], "timedelta": [70, 150, 151, 215, 242, 321, 323, 324, 326, 331, 333, 336, 337, 338, 340, 341, 343, 344, 345, 346, 347, 349, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 640, 727, 729, 734, 740, 744, 749, 800, 803, 808, 809, 918], "1d": [70, 150, 151, 165, 215, 242, 318, 325, 332, 336, 340, 345, 348, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 718, 723, 725, 727, 728, 729, 734, 736, 740, 744, 747, 748, 749, 751, 752], "closedinterv": [70, 150, 151, 242, 369, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 640, 774, 918], "lower": [70, 108, 150, 181, 234, 242, 369, 389, 413, 416, 425, 497, 530, 547, 570, 577, 596, 634, 640, 774, 798, 816, 819, 828, 906, 918], "bound": [70, 97, 98, 137, 150, 242, 276, 290, 369, 389, 490, 497, 547, 577, 640, 672, 686, 756, 774, 798, 906, 918], "upper": [70, 97, 98, 137, 150, 242, 369, 490, 497, 547, 577, 640, 756, 774, 798, 906, 918], "period": [70, 150, 151, 193, 194, 242, 285, 340, 345, 351, 352, 353, 409, 434, 435, 547, 577, 578, 602, 603, 640, 681, 744, 749, 757, 758, 759, 812, 841, 842, 918], "like": [70, 86, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 158, 160, 164, 242, 273, 401, 414, 524, 527, 537, 547, 570, 597, 640, 669, 817, 918], "durat": [70, 165, 215, 242, 322, 325, 328, 330, 332, 335, 342, 348, 486, 547, 583, 640, 722, 725, 731, 733, 736, 739, 746, 752, 902, 918], "3d12h4m25": [70, 150, 151, 165, 215, 242, 340, 345, 577, 578, 583, 640, 744, 749], "hour": [70, 150, 151, 165, 215, 242, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 511, 512, 547, 577, 578, 583, 640, 740, 744, 749], "minut": [70, 150, 151, 165, 215, 242, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 511, 512, 547, 577, 578, 583, 640, 740, 744, 749], "tempor": [70, 150, 151, 162, 188, 204, 242, 369, 421, 422, 423, 424, 425, 427, 428, 429, 547, 557, 577, 578, 640, 774, 789, 918], "window": [70, 150, 151, 242, 313, 340, 345, 351, 352, 353, 408, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 502, 547, 577, 578, 640, 710, 744, 749, 757, 758, 759, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 918], "granular": 70, "finer": 70, "permut": 70, "1mo": [70, 150, 151, 165, 215, 242, 320, 322, 336, 339, 340, 343, 345, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 720, 722, 737, 740, 741, 742, 743, 744, 749, 750], "dtrang": 70, "1985": 70, "04": [70, 113, 150, 215, 242, 319, 320, 321, 322, 325, 331, 332, 333, 337, 339, 340, 341, 342, 343, 346, 347, 348, 473, 512, 577, 640, 720, 722, 725, 730, 732, 735, 736, 737, 738, 742, 743, 745, 746, 747, 750, 751, 752, 881], "05": [70, 113, 115, 116, 165, 215, 242, 319, 320, 322, 339, 341, 343, 583, 640, 719, 720, 721, 722, 743, 744, 749, 751], "07": [70, 319, 321, 337, 339, 340, 345, 347, 473, 518, 719, 721, 751, 881], "08": [70, 115, 116, 151, 242, 319, 340, 473, 512, 578, 640, 744, 749, 881], "zone": [70, 97, 98, 108, 320, 339, 720, 743], "america": [70, 743], "new_york": [70, 743], "\u03bc": [70, 150, 151, 165, 215, 242, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 473, 518, 577, 578, 583, 640, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 881], "est": [70, 743], "encount": [71, 150, 242, 405, 406, 456, 457, 504, 507, 516, 534, 547, 577, 640, 808, 809, 864, 865, 918], "duplic": [74, 158, 164, 165, 211, 242, 370, 547, 582, 583, 613, 640, 776, 918], "certain": [75, 100, 109, 156, 215, 242, 501, 563, 595, 605, 606, 640, 918], "structur": [76, 80, 82, 139, 178, 242, 547, 594, 640, 648, 918], "least": [77, 119, 409, 491, 547, 812, 907, 918], "unexpect": [78, 242], "caus": [78, 86, 97, 98, 108, 126, 139, 242, 648, 918], "panic": 78, "combin": [80, 82, 150, 151, 152, 165, 215, 242, 264, 345, 460, 466, 472, 547, 577, 578, 583, 604, 640, 749, 868, 874, 880], "mismatch": 80, "incompat": 82, "pa": [85, 113], "chunkedarrai": [85, 174, 242, 714, 918], "schemadefinit": [85, 87, 88, 89, 91, 242, 640], "schema_overrid": [85, 87, 88, 89, 90, 91, 163, 242, 640], "copi": [85, 86, 126, 128, 129, 163, 202, 207, 219, 242, 357, 476, 547, 561, 562, 618, 640, 645, 699, 703, 716, 762, 884, 896, 900, 901, 918], "most": [85, 97, 98, 108, 399, 403, 409, 470, 491, 547, 804, 812, 878, 907, 918], "closest": 85, "pair": [85, 87, 88, 89, 91, 183, 242, 598, 640], "declar": [85, 87, 88, 89, 91, 242, 640], "sever": [85, 87, 88, 89, 91, 242, 640], "wai": [85, 87, 88, 89, 91, 133, 149, 163, 178, 197, 222, 242, 408, 444, 501, 547, 565, 576, 594, 608, 622, 640], "As": [85, 87, 88, 89, 91, 101, 242, 532, 640], "auto": [85, 87, 88, 89, 91, 106, 112, 210, 242, 640], "automat": [85, 87, 88, 89, 91, 97, 98, 99, 108, 119, 120, 191, 219, 242, 460, 466, 472, 473, 601, 618, 640, 868, 874, 880, 881, 918], "equival": [85, 87, 88, 89, 91, 100, 161, 175, 242, 461, 640, 792, 869, 882, 883, 918], "form": [85, 87, 88, 89, 91, 162, 188, 213, 242, 409, 547, 640, 812, 918], "them": [85, 87, 88, 89, 91, 139, 150, 151, 165, 172, 215, 242, 278, 369, 405, 406, 502, 547, 577, 578, 583, 592, 640, 648, 674, 808, 809, 918], "dimens": [85, 87, 89, 91, 242, 418, 547, 640, 821, 918], "construct": [85, 87, 88, 89, 90, 91, 242, 392, 547, 575, 597, 640, 918], "allow_copi": [86, 126], "interchang": [86, 126], "protocol": [86, 99, 126], "__dataframe__": 86, "convers": [86, 126, 163, 207, 242, 473, 557, 881, 899, 900, 901, 918], "detail": [86, 99, 115, 116, 126, 242, 640, 926], "latest": [86, 100, 109, 126, 364, 399, 547], "index": [86, 90, 93, 99, 114, 126, 143, 150, 151, 156, 165, 179, 185, 187, 196, 208, 215, 220, 242, 249, 261, 262, 263, 265, 266, 267, 268, 276, 286, 290, 336, 421, 422, 423, 424, 425, 427, 428, 429, 432, 442, 454, 467, 482, 547, 577, 578, 583, 607, 620, 640, 656, 657, 658, 659, 660, 661, 663, 664, 672, 682, 686, 740, 810, 835, 838, 850, 862, 875, 891, 918], "throw": [86, 299, 456, 457, 547, 694, 864, 865, 918], "runtimeerror": 86, "from_panda": [86, 101], "from_arrow": 86, "effici": [86, 163, 242], "map": [87, 88, 97, 98, 102, 103, 106, 107, 108, 110, 127, 136, 162, 183, 187, 188, 203, 242, 340, 345, 391, 392, 491, 496, 547, 567, 598, 640, 744, 749, 799, 918], "clone": [87, 88, 89, 90, 91, 128, 206, 207, 242, 561, 640, 699, 899, 900, 901, 909, 918], "dimension": [87, 89, 91, 242, 640, 918], "infer_schema_length": [88, 91, 97, 98, 101, 108, 111, 242, 640], "mani": [88, 91, 99, 139, 242, 648, 918], "scan": [88, 91, 97, 98, 106, 108, 109, 110, 111, 112, 113, 570, 579, 586, 640], "slow": [88, 91, 97, 98, 108, 254, 313, 547, 710, 918], "NOT": [88, 115, 116], "typic": [88, 127, 242, 649, 918], "clearer": 88, "after": [88, 96, 97, 98, 102, 106, 108, 110, 111, 112, 139, 212, 241, 242, 354, 392, 414, 476, 547, 614, 640, 648, 743, 799, 817, 884, 918], "load": [88, 90, 100, 109, 242, 557, 579, 586, 640], "want": [88, 127, 139, 175, 242, 254, 302, 303, 304, 360, 390, 392, 421, 422, 423, 424, 425, 427, 428, 429, 507, 516, 547, 563, 579, 586, 640, 648, 649, 700, 701, 702, 900, 918], "_partial_": [88, 242, 640], "omit": [88, 118, 119, 120, 175, 242], "partial": 88, "present": [88, 115, 119, 373, 547, 909, 918], "np": [89, 142, 242, 482, 547, 640, 778, 782, 783, 784, 823, 891, 918], "ndarrai": [89, 142, 206, 242, 482, 547, 640, 714, 835, 838, 891, 900, 918], "numpi": [89, 114, 131, 206, 207, 242, 405, 406, 547, 640, 778, 782, 783, 784, 808, 809, 823, 835, 900, 901, 909, 918], "columnar": [89, 91, 162, 188, 242], "interpret": [89, 91, 97, 98, 108, 242, 640], "yield": [89, 91, 97, 98, 108, 137, 139, 210, 242, 640, 648, 756, 918], "conclus": [89, 91, 242, 640], "pd": [90, 101, 486, 547, 902, 918], "nan_to_nul": [90, 242, 640, 918], "include_index": 90, "datetimeindex": [90, 714, 918], "panda": [90, 101, 114, 207, 242, 486, 547, 640, 901, 902, 918], "instal": [90, 97, 98, 99, 102, 106, 114, 131, 206, 207, 242, 604, 640, 901, 918], "nan": [90, 115, 116, 119, 126, 140, 207, 242, 316, 317, 358, 368, 375, 377, 378, 379, 393, 402, 405, 406, 504, 534, 547, 571, 640, 651, 655, 715, 763, 783, 784, 808, 809, 823, 901, 918], "convert": [90, 92, 100, 101, 109, 126, 203, 204, 205, 206, 209, 242, 291, 320, 462, 473, 640, 687, 720, 870, 881, 888, 899, 900, 901, 909, 918], "pd_df": 90, "pd_seri": 90, "dummi": [92, 205, 242, 897, 918], "to_dummi": [92, 242, 918], "foo_1": [92, 205, 242], "foo_2": [92, 205, 242], "bar_3": [92, 205, 242], "bar_4": [92, 205, 242], "ham_a": [92, 205, 242], "ham_b": [92, 205, 242], "datatypeclass": 93, "get": [93, 103, 107, 121, 130, 136, 146, 147, 150, 151, 153, 154, 158, 160, 167, 174, 187, 190, 192, 196, 200, 218, 227, 236, 242, 249, 261, 262, 263, 265, 266, 275, 279, 280, 292, 308, 309, 310, 311, 312, 323, 361, 366, 370, 372, 380, 383, 385, 393, 394, 395, 398, 400, 402, 405, 406, 413, 442, 446, 458, 461, 480, 481, 488, 492, 515, 520, 524, 525, 526, 527, 535, 538, 539, 547, 564, 567, 574, 577, 578, 579, 584, 586, 600, 607, 611, 617, 627, 636, 640, 656, 657, 658, 659, 660, 661, 671, 675, 676, 688, 698, 706, 707, 708, 709, 723, 768, 771, 774, 776, 779, 790, 795, 800, 802, 803, 805, 808, 809, 813, 814, 816, 850, 853, 866, 869, 890, 896, 897, 904, 908, 909, 918], "uint32": [93, 114, 137, 242, 263, 266, 267, 268, 280, 321, 324, 327, 329, 331, 333, 334, 337, 338, 341, 346, 347, 417, 449, 458, 461, 482, 486, 547, 659, 663, 664, 676, 694, 721, 724, 730, 732, 735, 737, 738, 741, 742, 745, 750, 751, 756, 836, 857, 902, 918], "regular": [93, 162, 187, 188, 215, 242, 354, 501, 514, 524, 527, 537, 547], "uint64": [93, 152, 242, 267, 268, 365, 416, 547, 663, 664, 770, 819, 918], "bigidx": 93, "read": [94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 139, 242, 390, 547, 570, 575, 597, 640, 648, 918], "over": [94, 97, 98, 100, 108, 119, 127, 139, 162, 163, 187, 188, 210, 221, 224, 242, 254, 313, 359, 368, 390, 391, 420, 421, 422, 423, 424, 425, 427, 428, 429, 496, 507, 508, 516, 523, 531, 547, 624, 648, 649, 710, 823, 824, 825, 827, 831, 918], "fetch": [94, 108, 166, 242, 561, 563, 579, 586, 640], "ideal": 94, "read_csv_batch": [94, 558], "tpch": [94, 98], "tables_scale_100": [94, 98], "lineitem": [94, 98, 99], "tbl": [94, 98], "try_parse_d": [94, 97, 98, 108], "In": [95, 100, 109, 112, 119, 120, 123, 127, 137, 139, 150, 151, 175, 242, 254, 398, 547, 577, 578, 640, 648, 756, 818, 918], "probabl": [95, 123, 350, 547, 755, 918], "n_row": [96, 97, 98, 102, 106, 108, 110, 111, 112, 163, 242, 570, 640], "accept": [96, 97, 98, 100, 102, 106, 138, 149, 191, 197, 219, 222, 242, 354, 408, 444, 498, 500, 501, 503, 514, 536, 547, 569, 576, 601, 608, 618, 622, 640], "stop": [96, 97, 98, 102, 106, 108, 110, 111, 112, 321, 323, 324, 326, 331, 333, 337, 338, 340, 341, 344, 345, 346, 347, 349, 718, 720, 721, 723, 724, 730, 732, 735, 737, 738, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753], "textio": 97, "new_column": [97, 98, 101], "comment_char": [97, 98, 108], "quote_char": [97, 98, 108], "skip_row": [97, 98, 108], "missing_utf8_is_empty_str": [97, 98, 108], "ignore_error": [97, 98, 108], "n_thread": [97, 98], "8192": 97, "csvencod": [97, 98, 108], "low_memori": [97, 98, 106, 108, 111, 112], "storage_opt": [97, 100, 102, 106, 109, 110, 112], "skip_rows_after_head": [97, 98, 108], "row_count_nam": [97, 98, 102, 106, 108, 110, 111, 112], "row_count_offset": [97, 98, 102, 106, 108, 110, 111, 112], "sample_s": [97, 98], "eol_char": [97, 98, 108], "we": [97, 98, 101, 108, 165, 242, 273, 462, 522, 540, 583, 587, 640, 649, 669, 870, 918], "handler": [97, 98, 101], "g": [97, 98, 100, 101, 102, 106, 109, 110, 112, 213, 242, 254, 354, 436, 514, 547, 598, 640, 836, 900, 918], "via": [97, 98, 101, 108, 110, 111, 112, 162, 188, 242, 254, 547], "builtin": [97, 98, 101], "stringio": [97, 98], "fsspec": [97, 98, 102, 106, 109, 110, 112, 114], "remot": [97, 98, 102, 106], "first": [97, 98, 101, 108, 111, 127, 148, 150, 153, 165, 167, 174, 178, 179, 200, 210, 211, 215, 227, 242, 263, 265, 266, 273, 276, 277, 313, 336, 340, 366, 372, 385, 392, 432, 454, 456, 457, 463, 464, 500, 507, 516, 520, 547, 563, 577, 579, 583, 586, 594, 613, 619, 627, 640, 658, 661, 669, 672, 673, 687, 710, 712, 740, 744, 771, 779, 795, 799, 835, 862, 864, 865, 871, 872, 890, 918], "autogener": [97, 98, 108], "column_x": [97, 98, 108], "enumer": [97, 98, 108, 163, 242], "shorter": [97, 98], "remain": [97, 98, 108, 137, 242, 254, 469, 470, 547, 587, 640, 756, 877, 878, 918], "comment": [97, 98, 108], "instanc": [97, 98, 108, 119, 120, 139, 144, 242, 291, 299, 399, 421, 422, 423, 424, 425, 427, 428, 429, 507, 516, 547, 587, 620, 640, 648, 694, 918], "special": [97, 98, 108, 649, 918], "handl": [97, 98, 108, 113, 272, 314, 476, 547, 668, 713, 884, 918], "escap": [97, 98, 108], "dure": [97, 98, 108, 124, 139, 242, 648, 918], "equal": [97, 98, 108, 115, 116, 122, 145, 150, 165, 172, 242, 420, 421, 422, 423, 424, 425, 427, 428, 429, 458, 459, 465, 476, 497, 547, 577, 583, 592, 640, 823, 824, 825, 826, 827, 828, 830, 831, 832, 836, 866, 867, 873, 884, 918], "would": [97, 98, 108, 263, 266, 276, 398, 414, 498, 547, 587, 640, 658, 661, 672, 817, 900, 918], "prefer": [97, 98, 100, 108, 127, 139, 162, 187, 188, 224, 242, 254, 420, 547, 624, 640, 648, 649, 823, 918], "treat": [97, 98, 108, 448, 463, 464, 856, 871, 872], "befor": [97, 108, 124, 139, 150, 165, 212, 242, 311, 312, 313, 392, 409, 420, 421, 422, 423, 424, 425, 427, 428, 429, 476, 480, 547, 577, 580, 583, 614, 640, 648, 708, 709, 710, 799, 812, 823, 824, 825, 826, 827, 828, 830, 831, 832, 884, 889, 918], "10000": [97, 163, 242, 476], "check": [97, 98, 108, 115, 116, 145, 159, 161, 242, 251, 252, 270, 294, 297, 298, 369, 373, 448, 452, 471, 547, 587, 640, 646, 647, 666, 689, 692, 693, 775, 777, 780, 781, 787, 788, 789, 791, 792, 836, 856, 860, 879, 918], "might": [97, 98, 108, 254, 398, 489, 547, 901, 918], "issu": [97, 98, 101, 108, 311, 312, 480, 547, 708, 709, 889, 918], "iso8601": [97, 98, 108], "naiv": [97, 98, 108, 319, 719], "hand": [97, 98, 108], "alwai": [97, 127, 224, 242, 398, 587, 624, 640, 649, 918], "physic": [97, 98, 165, 242, 300, 486, 547, 560, 582, 583, 640, 696, 902, 918], "cpu": [97, 98], "your": [97, 98, 115, 116, 127, 162, 191, 219, 222, 242, 254, 547, 563, 579, 586, 587, 601, 618, 622, 640, 649, 918], "system": [97, 98], "wrongli": 97, "done": [97, 98, 108, 113, 148, 165, 242, 253, 299, 459, 465, 547, 583, 640, 694, 867, 873, 918], "buffer": [97, 98, 137, 162, 242, 756, 918], "modifi": [97, 98, 108, 124, 155, 162, 217, 242, 264, 339, 348, 547, 743, 752, 820, 882, 883, 918], "lossi": [97, 98, 108], "decod": [97, 98], "im": [97, 98], "usag": [97, 98, 108, 119, 120, 195, 242, 844, 918], "expens": [97, 98, 106, 108, 111, 112, 127, 162, 187, 188, 210, 211, 242, 254, 547, 613, 640, 648, 649, 918], "nativ": [97, 102, 106, 127, 162, 188, 204, 224, 242, 254, 547, 624, 649, 918], "parser": 97, "even": 97, "possibl": [97, 127, 149, 162, 188, 211, 224, 242, 254, 389, 398, 470, 490, 547, 576, 613, 624, 640, 649, 878, 918], "regard": [97, 504, 534], "sens": [97, 102, 106, 110, 112, 150, 151, 172, 215, 242, 577, 578, 592, 640], "particular": [97, 102, 106, 110, 112, 137, 242, 756, 918], "storag": [97, 100, 102, 106, 109, 110, 112], "skip": [97, 98, 101, 106, 108, 112, 213, 242, 649, 918], "offset": [97, 98, 102, 106, 108, 110, 111, 112, 150, 151, 196, 215, 220, 242, 286, 336, 340, 345, 442, 467, 473, 547, 577, 578, 607, 620, 640, 682, 740, 744, 749, 850, 875, 881, 918], "row_count": [97, 98, 102, 106, 108, 110, 111, 112], "sampl": [97, 98, 224, 242, 441, 547, 624, 849, 918], "estim": [97, 98, 137, 242, 352, 353, 382, 547, 756, 758, 759, 793, 918], "alloc": [97, 98, 137, 182, 242, 756, 918], "need": [97, 98, 101, 115, 116, 150, 151, 195, 206, 242, 291, 392, 436, 458, 547, 577, 578, 640, 843, 866, 918], "scan_csv": [97, 98, 605, 606, 640], "lazili": [97, 98, 108, 109, 110, 111, 112, 392, 547], "glob": [97, 98, 108, 110, 111, 112], "pattern": [97, 98, 108, 110, 111, 112, 162, 242, 397, 448, 449, 454, 455, 463, 464, 837, 838, 856, 857, 862, 863, 871, 872, 918], "store": [97, 106, 139, 162, 188, 242, 648, 918], "continu": [97, 106, 441, 547, 849, 918], "benchmark": [97, 106], "50000": 98, "batchedcsvread": [98, 557], "batch": [98, 111, 587, 640], "upon": 98, "creation": 98, "gather": 98, "next_batch": 98, "call": [98, 119, 120, 127, 149, 166, 241, 242, 254, 309, 312, 547, 558, 576, 639, 640, 649, 918], "big": 98, "interest": 98, "seen_group": 98, "big_fil": 98, "while": [98, 100, 101, 109, 119, 120, 162, 171, 210, 242, 591, 640], "df_current_batch": 98, "concat": [98, 502, 698, 805, 918], "partition_df": 98, "partition_bi": [98, 163, 242], "as_dict": [98, 177, 242], "fh": 98, "write_csv": [98, 108, 242], "els": 98, "partition_on": 99, "partition_rang": 99, "partition_num": 99, "dbreadengin": 99, "connectorx": [99, 114], "raw": 99, "partit": [99, 100, 106, 109, 113, 163, 177, 242], "backend": [99, 100, 109], "transfer": 99, "document": [99, 101, 457, 473, 865, 881], "redshift": 99, "mysql": 99, "mariadb": 99, "clickhous": 99, "oracl": 99, "bigqueri": 99, "pleas": 99, "doc": [99, 131, 242], "github": 99, "com": [99, 351, 352, 353, 454, 547, 757, 758, 759, 862, 918], "sfu": 99, "db": 99, "connector": 99, "destin": 99, "sqlite": 99, "develop": [99, 119, 120], "flight_sql": 99, "further": [99, 901, 918], "wide": [99, 148, 171, 213, 242, 591, 640], "adopt": 99, "significantli": 99, "better": [99, 127, 224, 242, 254, 491, 547, 624, 837, 838, 918], "driver": 99, "cpp": 99, "partition_col": 99, "explicitli": [99, 118, 119, 392, 536, 547], "delta_table_opt": [100, 109], "lake": [100, 109, 557], "root": [100, 109, 381, 391, 400, 411, 445, 479, 546, 547, 852, 918], "filesystem": [100, 109], "absolut": [100, 109, 115, 116, 187, 242, 248, 351, 352, 353, 547, 644, 757, 758, 759, 918], "gc": [100, 109], "azur": [100, 109], "deltalak": [100, 109, 114], "cloud": [100, 109, 113], "configur": [100, 109], "authent": [100, 109], "keyword": [100, 106, 109, 131, 178, 187, 191, 219, 222, 242, 533, 536, 547, 594, 601, 618, 622, 640, 918], "table_path": [100, 109], "avoid": 100, "year": [100, 109, 150, 151, 165, 215, 242, 326, 336, 337, 340, 345, 346, 421, 422, 423, 424, 425, 427, 428, 429, 510, 511, 547, 577, 578, 583, 640, 726, 740, 741, 744, 749, 750], "2021": [100, 109, 132, 148, 150, 215, 242, 473, 522, 577, 640, 726, 789, 881, 918], "aw": [100, 109], "bucket": [100, 109, 340, 345, 744, 749], "aws_access_key_id": [100, 109], "the_aws_access_key_id": [100, 109], "aws_secret_access_kei": [100, 109], "the_aws_secret_access_kei": [100, 109], "googl": [100, 109], "service_account": [100, 109], "service_account_json_absolute_path": [100, 109], "az": [100, 109], "adl": [100, 109], "abf": [100, 109], "azure_storage_account_nam": [100, 109], "azure_storage_account_kei": [100, 109], "without_fil": [100, 109], "track": [100, 109, 127, 242], "sheet_id": 101, "sheet_nam": 101, "xlsx2csv_option": 101, "read_csv_opt": 101, "xlsx2csv": [101, 114], "read_csv": [101, 108], "skip_empty_lin": 101, "my": [101, 113], "datasheet": 101, "correct": [101, 352, 353, 382, 426, 441, 547, 587, 640, 758, 759, 793, 829, 849, 918], "look": [101, 291, 294, 689], "fix": [101, 118, 119, 348, 421, 422, 423, 424, 425, 427, 428, 429, 547, 752], "whole": [101, 443, 444, 454, 547, 640, 862], "With": [101, 127, 242, 254, 547, 649, 918], "1000": [101, 137, 242, 327, 328, 476, 731], "spreadsheet": [101, 179, 242], "xl": 101, "xlsm": 101, "xlsb": 101, "odf": 101, "od": [101, 472, 880], "odt": 101, "memory_map": [102, 106, 110], "v2": [102, 110], "greatli": [102, 110], "repeat": [102, 110, 415, 417, 547], "o": [102, 110, 313, 453, 487, 547, 710, 861, 903, 918], "page": [102, 106, 110, 112, 242, 547, 557, 606, 640, 918], "give": [102, 106, 110, 111, 112, 171, 242, 323, 382, 417, 547, 557, 591, 640, 723, 793, 918], "That": [102, 587, 640], "filenam": 102, "my_fil": 102, "write_ipc": [102, 242], "read_ndjson": 104, "parallelstrategi": [106, 112], "use_statist": [106, 112], "awar": [106, 162, 188, 204, 242, 473, 881], "stabl": [106, 131, 189, 242, 591, 640], "row_group": [106, 112], "read_tabl": 106, "with_column_nam": 108, "push": [108, 110, 111, 112, 113], "down": [108, 110, 111, 112, 113, 363, 547, 767, 918], "therebi": [108, 110, 111, 112], "potenti": [108, 110, 111, 112], "overhead": [108, 110, 111, 112], "updat": [108, 242, 640], "thu": [108, 139, 242, 504, 534, 648, 918], "realloc": [108, 110, 111, 139, 242, 648, 918], "my_long_fil": 108, "doesn": [108, 350, 547, 755, 909, 918], "thing": [108, 494, 515], "less": [108, 165, 242, 459, 465, 470, 476, 583, 640, 867, 873, 878, 884], "limit": [108, 141, 242, 293, 302, 303, 304, 359, 364, 547, 572, 579, 606, 640, 700, 701, 702, 764, 918], "breezah": 108, "languag": [108, 150, 151, 165, 215, 242, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 740, 744, 749], "terribl": 108, "mydf": 108, "lambda": [108, 127, 144, 178, 224, 242, 254, 291, 351, 352, 353, 390, 391, 420, 496, 507, 508, 509, 516, 523, 531, 537, 547, 587, 594, 624, 640, 649, 687, 757, 758, 759, 918], "aws_region": 109, "eu": 109, "central": [109, 382, 441, 547, 793, 849, 918], "allow_pyarrow_filt": 113, "comparison": 113, "dset": 113, "folder": 113, "1970": 113, "stdout": [114, 148, 242], "13": [114, 128, 129, 140, 141, 147, 151, 156, 166, 174, 219, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 242, 420, 422, 502, 507, 516, 539, 547, 561, 562, 571, 572, 578, 585, 618, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 640, 649, 744, 749, 750, 918], "platform": 114, "maco": 114, "arm64": 114, "arm": 114, "64bit": [114, 416, 547, 819, 918], "main": 114, "feb": 114, "59": [114, 319, 331, 341, 511, 719, 735, 745], "clang": 114, "14": [114, 127, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 242, 326, 368, 547, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 744], "1400": 114, "29": 114, "202": 114, "2_alpha": 114, "detect": 114, "matplotlib": [114, 595, 604, 640], "check_dtyp": [115, 116], "check_exact": [115, 116], "rtol": [115, 116], "1e": [115, 116], "atol": [115, 116], "nans_compare_equ": [115, 116], "check_column_ord": 115, "check_row_ord": 115, "assertionerror": [115, 116], "compar": [115, 116, 145, 242, 495, 836, 918], "exactli": [115, 116, 119, 120, 469, 470, 844, 877, 878, 918], "toler": [115, 116, 165, 242, 583, 640], "inexact": [115, 116], "assert": [115, 116, 118, 119, 120, 151, 242, 557, 578, 640, 769, 918], "irrespect": 115, "unsort": 115, "check_nam": 116, "s1": [116, 144, 242, 901, 910, 918], "searchstrategi": [117, 119, 120], "null_prob": [117, 119, 120], "percentag": [117, 119, 120, 409, 547, 812, 918], "chanc": [117, 119, 120], "flag": [117, 433, 547, 568, 587, 640, 839, 918], "hypothesi": [117, 118, 119, 120, 926], "sampled_from": 117, "unique_small_int": 117, "ccy": 117, "gbp": 117, "eur": [117, 132, 148, 242], "jpy": 117, "min_col": [118, 119], "max_col": [118, 119], "suitabl": [118, 127, 242, 254, 432, 547, 649, 835, 918], "standalon": [118, 119], "itself": [118, 585, 640], "mincol": 118, "exact": [118, 119, 120, 195, 242, 473, 881], "especi": 118, "punctuat": 118, "test_special_char_colname_init": 118, "z": [118, 119, 137, 158, 160, 164, 171, 242, 269, 300, 365, 417, 473, 547, 582, 591, 607, 640, 696, 764, 881, 918], "test_unique_xyz": 118, "assert_someth": 118, "min_siz": [119, 120], "max_siz": [119, 120], "include_col": 119, "allow_infin": [119, 120], "allowed_dtyp": [119, 120], "excluded_dtyp": [119, 120], "describ": [119, 148, 242, 918], "desir": 119, "ignor": [119, 120, 169, 199, 242, 272, 314, 339, 351, 352, 353, 405, 406, 547, 668, 713, 743, 757, 758, 759, 808, 809, 918], "ensur": [119, 120, 122, 149, 177, 187, 242, 369, 491, 547, 576, 587, 640, 900, 907, 918], "n_chunk": [119, 120, 242, 918], "randomis": 119, "onto": 119, "independ": [119, 120], "either": [119, 151, 166, 169, 177, 187, 199, 242, 578, 585, 640], "pct": 119, "preced": 119, "disallow": [119, 120], "exclud": [119, 120, 309, 312, 369, 501, 534, 547, 774, 789, 918], "deploi": [119, 120], "characterist": [119, 120], "directli": [119, 120, 351, 352, 353, 547, 640, 757, 758, 759, 918], "concret": [119, 120], "test_repr": [119, 120], "isinst": [119, 120, 242], "repr": [119, 120], "known": [119, 624], "df_strategi": 119, "15836": 119, "1755e": 119, "38": 119, "575050513": 119, "constructor": 120, "max_data_s": 120, "distinct": [120, 177, 242, 292, 414, 512, 547, 688, 817, 918], "54666": 120, "6414": 120, "63290": 120, "toggl": [122, 473, 881], "scope": 124, "lifetim": 124, "initi": [124, 507, 516], "whatev": 124, "were": 124, "enter": 124, "set_verbos": 124, "do_various_th": 124, "restor": 124, "nan_as_nul": 126, "_pyarrowdatafram": 126, "nullabl": 126, "extens": [126, 207, 242, 901, 918], "propag": [126, 169, 199, 242, 405, 406, 547, 808, 809, 918], "return_dtyp": [127, 242, 254, 390, 496, 523, 547, 649, 918], "inference_s": [127, 242], "256": [127, 242, 812, 918], "user": [127, 178, 224, 242, 254, 433, 496, 547, 594, 624, 640, 649, 839, 918], "udf": [127, 178, 224, 242, 254, 496, 547, 594, 624, 640, 649, 918], "logic": [127, 224, 242, 486, 547, 575, 582, 597, 621, 624, 640, 649, 902, 918], "almost": [127, 224, 242, 624, 649, 918], "_significantly_": [127, 224, 242, 624, 649, 918], "intens": [127, 224, 242, 624, 649, 918], "becaus": [127, 137, 150, 166, 213, 224, 242, 273, 577, 624, 640, 649, 669, 756, 918], "forc": [127, 165, 224, 242, 582, 583, 624, 640, 649, 918], "materi": [127, 224, 242, 595, 624, 640, 649, 918], "parallelis": [127, 224, 242, 624, 649, 918], "optimis": [127, 224, 242, 624, 640, 649, 837, 838, 918], "wherev": [127, 224, 242, 254, 547, 624, 649, 918], "strongli": [127, 187, 224, 242, 254, 547, 624, 649, 918], "achiev": [127, 224, 242, 254, 547, 624, 649, 918], "best": [127, 224, 242, 254, 547, 624, 649, 918], "tri": [127, 242], "arbitrarili": [127, 242], "rearrang": [127, 242], "preserv": [127, 207, 242, 438, 547, 846, 901, 918], "syntax": [127, 175, 242, 604, 640, 918], "lru_cach": [127, 242, 254, 547, 649, 918], "magnitud": [127, 242, 254, 547, 649, 918], "speedup": [127, 162, 242, 254, 547, 649, 918], "column_1": [127, 210, 242], "scalar": [127, 161, 242, 432, 496, 547, 792, 835, 918], "ident": [128, 129, 242, 561, 562, 640, 699, 703, 918], "cheap": [128, 129, 242, 561, 562, 640, 648, 699, 703, 918], "deepcopi": [128, 129, 242, 561, 562, 640, 699, 703, 918], "clear": [129, 242, 562, 640, 703, 918], "properti": [130, 136, 154, 190, 192, 218, 242, 557, 564, 567, 600, 617, 640], "appl": [130, 155, 164, 183, 185, 203, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 242, 411, 419, 452, 471, 479, 547, 582, 598, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 640, 860, 879], "banana": [130, 203, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 242, 411, 419, 479, 547, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635], "pearson": [131, 242, 382, 441, 504, 529, 547, 793, 849, 918], "correl": [131, 242, 504, 529, 534], "coeffici": [131, 242, 441, 547, 849, 918], "corrcoef": [131, 242], "summari": [132, 242, 712, 918], "glimps": [132, 153, 242], "usd": [132, 148, 242], "2020": [132, 148, 151, 242, 320, 322, 325, 327, 328, 330, 332, 335, 339, 342, 343, 473, 578, 640, 720, 722, 725, 731, 733, 736, 739, 743, 746, 881], "null_count": [132, 135, 242, 313, 547, 710, 712, 918], "266667": [132, 242], "666667": [132, 169, 216, 230, 242, 351, 547, 616, 630, 640], "std": [132, 242, 420, 547, 640, 712, 830, 918], "101514": [132, 242], "707107": [132, 242, 352, 547, 758, 918], "57735": [132, 242], "median": [132, 179, 242, 423, 547, 619, 640, 826, 918], "more_column": [133, 138, 212, 242, 354, 514, 547, 565, 569, 614, 640], "Or": [133, 149, 150, 151, 165, 197, 215, 222, 242, 408, 444, 501, 540, 547, 565, 576, 577, 578, 583, 608, 622, 640], "subset": [135, 175, 211, 242, 566, 613, 640], "snippet": [135, 242, 566, 640], "is_nul": [135, 242, 547, 566, 640, 918], "sizeunit": [137, 242, 756, 918], "heap": [137, 242, 756, 918], "its": [137, 242, 319, 340, 345, 719, 744, 749, 756, 918], "bitmap": [137, 242, 756, 918], "therefor": [137, 242, 291, 756, 918], "structarrai": [137, 242, 756, 918], "constant": [137, 151, 242, 357, 547, 578, 640, 756, 762, 918], "unchang": [137, 242, 254, 486, 547, 587, 624, 640, 756, 902, 918], "capac": [137, 195, 242, 756, 844, 918], "ffi": [137, 242, 756, 918], "kb": [137, 242, 756, 918], "mb": [137, 242, 756, 918], "gb": [137, 242, 756, 918], "tb": [137, 242, 756, 918], "revers": [137, 242, 287, 308, 309, 310, 311, 312, 391, 411, 479, 547, 640, 706, 707, 708, 709, 918], "1_000_000": [137, 242, 756, 918], "25888898": [137, 242], "689577102661133": [137, 242], "long": [138, 171, 213, 242, 569, 591, 640], "letter": [138, 227, 236, 242, 354, 514, 547, 569, 627, 636, 640], "faster": [139, 213, 242, 254, 420, 461, 489, 547, 605, 606, 640, 648, 649, 823, 869, 918], "onlin": [139, 242, 648, 918], "rerun": [139, 242, 648, 918], "latter": [139, 242, 648, 918], "fill_valu": [140, 194, 213, 242, 358, 435, 547, 571, 603, 640, 763, 842, 918], "Not": [140, 242, 375, 377, 392, 547, 571, 640], "To": [140, 242, 316, 317, 359, 524, 527, 537, 547, 571, 640], "fillnullstrategi": [141, 242, 359, 547, 572, 640, 764, 918], "matches_supertyp": [141, 242, 572, 640], "forward": [141, 165, 242, 359, 364, 547, 572, 583, 640, 764, 918], "consecut": [141, 242, 293, 359, 364, 447, 547, 572, 640, 764, 855, 918], "supertyp": [141, 242, 253, 547, 572, 640], "fill_nan": [141, 242, 547, 640, 918], "OR": [142, 242, 495, 573, 640], "reduct": [144, 242], "supercast": [144, 242], "similar": [144, 165, 242, 408, 547, 583, 640], "parent": [144, 242], "rule": [144, 242, 343, 747], "arithmet": [144, 242], "zip_with": [144, 242, 918], "foo11": [144, 242], "bar22": [144, 242], "null_equ": [145, 242, 836, 918], "retriev": [146, 242, 267, 268, 477, 663, 664, 885], "return_as_str": [148, 242], "preview": [148, 242], "nice": [148, 242], "few": [148, 242], "rather": [148, 165, 242, 476, 583, 640, 884], "head": [148, 167, 200, 242, 253, 385, 547, 586, 640, 795, 890, 918], "tail": [148, 153, 242, 253, 441, 547, 640, 771, 849, 918], "intoexpr": [149, 150, 151, 191, 197, 219, 222, 242, 408, 444, 498, 500, 503, 507, 516, 533, 536, 547, 576, 577, 578, 601, 608, 622, 640], "more_bi": [149, 177, 197, 242, 444, 547, 576, 608, 640], "maintain_ord": [149, 177, 179, 211, 215, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 242, 249, 254, 482, 488, 505, 547, 563, 568, 570, 576, 595, 604, 605, 606, 613, 623, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 640, 904, 918], "consist": [149, 177, 242, 473, 576, 640, 881], "agg": [149, 150, 151, 242, 249, 254, 360, 362, 443, 444, 482, 493, 505, 547, 563, 568, 570, 576, 577, 578, 595, 604, 640], "anoth": [149, 242, 290, 313, 318, 547, 576, 619, 640, 686, 710, 718, 836, 918], "index_column": [150, 151, 242, 577, 578, 640], "truncat": [150, 242, 577, 595, 640], "include_boundari": [150, 242, 577, 640], "start_bi": [150, 242, 577, 640], "startbi": [150, 242, 577, 640], "dynamicgroupbi": [150, 242], "normal": [150, 242, 350, 382, 441, 547, 577, 640, 755, 793, 849, 918], "groupbi": [150, 151, 175, 242, 249, 254, 273, 313, 360, 362, 408, 443, 444, 482, 493, 496, 505, 547, 563, 568, 570, 577, 578, 595, 604, 640, 669, 710, 918], "member": [150, 242, 577, 640, 781, 918], "seen": [150, 242, 293, 364, 547, 577, 640], "roll": [150, 151, 242, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 502, 547, 577, 578, 640, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 918], "slot": [150, 242, 272, 313, 314, 547, 577, 640, 668, 710, 713, 918], "1n": [150, 151, 165, 215, 242, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 740, 744, 749], "nanosecond": [150, 151, 165, 215, 242, 336, 340, 341, 345, 421, 422, 423, 424, 425, 427, 428, 429, 512, 547, 577, 578, 583, 640, 740, 744, 745, 749], "1u": [150, 151, 165, 215, 242, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 740, 744, 749], "microsecond": [150, 151, 165, 215, 242, 336, 340, 341, 345, 421, 422, 423, 424, 425, 427, 428, 429, 511, 512, 547, 577, 578, 583, 595, 640, 740, 744, 749], "1m": [150, 151, 165, 215, 242, 327, 328, 330, 335, 336, 340, 342, 345, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 731, 733, 739, 740, 744, 746, 749], "millisecond": [150, 151, 165, 215, 242, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 512, 547, 577, 578, 583, 640, 740, 744, 749], "1h": [150, 151, 165, 215, 242, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 724, 740, 744, 749], "1w": [150, 151, 165, 215, 242, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 740, 744, 749], "week": [150, 151, 165, 215, 242, 336, 340, 345, 347, 421, 422, 423, 424, 425, 427, 428, 429, 512, 547, 577, 578, 583, 640, 740, 744, 749, 751], "month": [150, 151, 165, 215, 242, 321, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 510, 511, 547, 577, 578, 583, 640, 721, 740, 744, 749], "1y": [150, 151, 165, 215, 242, 336, 340, 345, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 740, 744, 749, 753], "1i": [150, 151, 165, 215, 242, 336, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 578, 583, 640, 740], "10i": [150, 151, 242, 577, 578, 640], "ascend": [150, 151, 242, 577, 578, 640], "often": [150, 151, 242, 271, 417, 547, 577, 578, 640, 667], "dynam": [150, 242, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 640], "matter": [150, 151, 162, 188, 204, 242, 577, 578, 640], "_lower_bound": [150, 242, 577, 640], "_upper_bound": [150, 242, 577, 640], "impact": [150, 242, 577, 640], "harder": [150, 242, 577, 640], "side": [150, 151, 242, 369, 421, 422, 423, 424, 425, 427, 428, 429, 432, 547, 577, 578, 640, 774, 835, 918], "inclus": [150, 151, 242, 369, 421, 422, 423, 424, 425, 427, 428, 429, 468, 469, 547, 577, 578, 640, 774, 876, 877, 918], "datapoint": [150, 242, 577, 640], "mondai": [150, 242, 347, 577, 640, 751], "date_rang": [150, 215, 242, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 577, 640, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753], "30m": [150, 242, 340, 345, 577, 640, 744, 749], "time_min": [150, 242, 577, 640], "time_max": [150, 242, 577, 640], "23": [150, 151, 242, 319, 324, 340, 511, 577, 578, 640, 719, 724], "boundari": [150, 242, 302, 303, 304, 547, 577, 640, 700, 701, 702, 918], "time_count": [150, 242, 577, 640], "_lower_boundari": [150, 242, 577, 640], "_upper_boundari": [150, 242, 577, 640], "lower_bound": [150, 242, 547, 577, 640, 906, 918], "upper_bound": [150, 242, 291, 547, 577, 640, 798, 918], "time_agg_list": [150, 242, 577, 640], "idx": [150, 163, 242, 291, 577, 640, 687, 838, 918], "arang": [150, 213, 224, 242, 577, 624, 640], "2i": [150, 242, 577, 640], "3i": [150, 242, 577, 640], "a_agg_list": [150, 242, 577, 640], "rollinggroupbi": [151, 242], "dynamic_groupbi": [151, 242, 578, 640], "groupby_dynam": [151, 242, 578, 640], "45": [151, 242, 319, 340, 345, 449, 455, 578, 640, 719, 744, 749, 857, 863], "48": [151, 242, 578, 640], "18": [151, 242, 312, 340, 345, 348, 368, 381, 547, 578, 595, 640, 752], "19": [151, 165, 242, 340, 578, 583, 640, 744, 749], "43": [151, 242, 312, 547, 578, 640], "strptime": [151, 242, 343, 578, 640, 747], "2d": [151, 206, 242, 578, 640, 721], "sum_a": [151, 242, 578, 640], "min_a": [151, 242, 578, 640], "max_a": [151, 242, 578, 640], "to_list": [151, 242, 291, 578, 640, 687, 918], "seed": [152, 189, 242, 365, 431, 437, 547, 770, 834, 845, 918], "seed_1": [152, 242, 365, 547, 770, 918], "seed_2": [152, 242, 365, 547, 770, 918], "seed_3": [152, 242, 365, 547, 770, 918], "hash": [152, 242, 547, 918], "u64": [152, 242, 365, 416, 547, 595, 640, 770, 918], "10783150408545073287": [152, 242], "1438741209321515184": [152, 242], "10047419486152048166": [152, 242], "2047317070637311557": [152, 242], "last": [153, 165, 167, 179, 197, 200, 211, 236, 242, 263, 266, 276, 289, 313, 321, 337, 346, 443, 470, 481, 538, 547, 583, 608, 611, 613, 636, 640, 658, 661, 672, 685, 710, 721, 741, 750, 771, 795, 878, 890, 918], "ab": [153, 167, 200, 219, 242, 477, 478, 524, 527, 547, 618, 640, 771, 795, 890, 918], "grown": [155, 242], "baz": [156, 157, 179, 212, 242, 468, 470, 581, 614, 640, 878], "intermedi": [157, 242, 581, 640, 773, 918], "linear": [157, 181, 234, 242, 269, 368, 395, 413, 425, 502, 503, 530, 547, 581, 596, 634, 640, 665, 773, 816, 828, 918], "mask": [158, 160, 242, 270, 294, 295, 370, 372, 380, 448, 450, 547, 666, 689, 690, 765, 774, 776, 779, 790, 813, 814, 837, 856, 858, 910, 918], "visual": [158, 160, 242], "buffer_s": [162, 242], "intern": [162, 242], "veri": [162, 210, 242, 254, 547, 562, 640, 703, 918], "fit": [162, 195, 213, 242, 436, 547, 843, 844, 918], "signific": [162, 242, 254, 547], "4x": [162, 242], "disabl": [162, 242], "materialis": [162, 163, 187, 188, 242], "iter_row": [163, 187, 188, 242], "17_500": [163, 242], "klmnoopqrstuvwxyz": [163, 242], "__name__": [163, 242], "7500": [163, 242], "recordbatch": [163, 242], "15_000": [163, 242], "record_batch": [163, 242], "to_arrow": [163, 242, 918], "to_batch": [163, 242], "date32": [163, 242], "large_str": [163, 202, 207, 242], "15000": [163, 242], "2500": [163, 242], "left_on": [164, 165, 242, 582, 583, 640], "right_on": [164, 165, 242, 582, 583, 640], "joinstrategi": [164, 242, 582, 640], "suffix": [164, 165, 191, 219, 222, 242, 297, 375, 377, 378, 379, 408, 419, 452, 547, 582, 583, 601, 618, 619, 622, 640, 692, 860], "_right": [164, 165, 242, 582, 583, 640], "outer": [164, 242, 582, 640], "semi": [164, 242, 582, 640], "anti": [164, 242, 582, 640, 837, 838, 918], "cross": [164, 242, 582, 640], "join_asof": [164, 242, 582, 640], "stringcach": [164, 242, 557], "other_df": [164, 242], "by_left": [165, 242, 583, 640], "by_right": [165, 242, 583, 640], "asofjoinstrategi": [165, 242, 583, 640], "allow_parallel": [165, 242, 582, 583, 640], "force_parallel": [165, 242, 582, 583, 640], "asof": [165, 242, 583, 640], "asof_join": [165, 242], "search": [165, 242, 583, 640], "greater": [165, 242, 441, 470, 547, 583, 640, 849, 878, 918], "distanc": [165, 242, 583, 640], "plan": [165, 166, 242, 560, 568, 575, 582, 583, 597, 604, 621, 640], "gdp": [165, 242, 583, 640], "2016": [165, 242, 583, 640], "2017": [165, 242, 583, 640], "2018": [165, 242, 583, 640], "2019": [165, 242, 583, 640], "record": [165, 242, 583, 640], "jan": [165, 242, 583, 640], "1st": [165, 242, 583, 640], "4164": [165, 242, 583, 640], "4411": [165, 242, 583, 640], "4566": [165, 242, 583, 640], "4696": [165, 242, 583, 640], "popul": [165, 242, 583, 640], "12th": [165, 242, 583, 640], "82": [165, 242, 583, 640], "66": [165, 242, 583, 640, 828, 918], "83": [165, 242, 583, 640], "52": [165, 219, 242, 430, 547, 583, 618, 640], "request": [166, 242], "small": [166, 242, 340, 570, 640], "describe_plan": [166, 242, 640], "unoptim": [166, 242, 640], "describe_optimized_plan": [166, 242, 640], "show_graph": [166, 242, 640], "un": [166, 242], "graphviz": [166, 242, 604, 640], "advis": [166, 242], "axi": [168, 169, 171, 173, 199, 242, 591, 640], "null_strategi": [169, 199, 242], "nullstrategi": [169, 199, 242], "spam": [169, 242], "id_var": [171, 242, 591, 640], "value_var": [171, 242, 591, 640], "variable_nam": [171, 242, 591, 640], "value_nam": [171, 242, 591, 640], "unpivot": [171, 242, 591, 640], "leav": [171, 242, 591, 640], "identifi": [171, 177, 211, 242, 591, 613, 640], "massag": [171, 242, 591, 640], "measur": [171, 242, 591, 640], "merg": [172, 242, 592, 640], "caller": [172, 242, 291, 587, 592, 624, 640], "respons": [172, 242, 592, 640], "One": [175, 179, 242, 918], "what": [175, 242, 900, 909, 918], "struct": [175, 191, 209, 212, 219, 242, 291, 392, 456, 469, 470, 491, 507, 508, 509, 523, 547, 601, 614, 618, 640, 687, 864, 877, 878], "pack": [175, 242], "expr_unique_subset": [175, 242], "df_nuniqu": [175, 242], "df_agg_nuniqu": [175, 242], "simpl": [175, 242], "func": [178, 242, 594, 640], "offer": [178, 242, 547, 594, 640], "recommend": [178, 242], "fulli": [178, 189, 242], "advantag": [178, 242], "cast_str_to_int": [178, 242, 594, 640], "col_nam": [178, 242, 594, 640], "tdf": [178, 242, 594, 640], "aggregate_funct": [179, 242], "pivotagg": [179, 242], "sort_column": [179, 242], "predefin": [179, 242], "predict": [179, 182, 215, 242], "transpos": [179, 242], "discoveri": [179, 242], "interpol": [181, 234, 242, 359, 395, 413, 425, 530, 547, 596, 634, 640, 816, 828, 918], "rollinginterpolationmethod": [181, 234, 242, 413, 425, 530, 547, 596, 634, 640, 816, 828, 918], "midpoint": [181, 234, 242, 413, 425, 530, 547, 596, 634, 640, 816, 828, 918], "old": [183, 242, 598, 640], "new_col": [184, 242], "by_pred": [187, 242], "accord": [187, 242, 392, 547, 726], "never": [187, 242], "mutual": [187, 242], "exclus": [187, 242], "addition": [187, 242], "clariti": [187, 242], "anyth": [187, 242], "toomanyrowsreturn": [187, 242, 557], "norowsreturn": [187, 242, 557], "inherit": [187, 242], "rowsexcept": [187, 242, 557], "frac": [189, 242, 351, 352, 353, 431, 441, 487, 547, 757, 758, 759, 834, 849, 903, 918], "with_replac": [189, 242, 431, 547, 834, 918], "shuffl": [189, 224, 242, 431, 547, 624, 834, 918], "neither": [189, 242], "nor": [189, 242], "modul": [189, 242, 431, 437, 546, 547, 834, 845, 918], "more_expr": [191, 219, 242, 408, 500, 533, 547, 601, 618, 640], "named_expr": [191, 219, 242, 533, 536, 601, 618, 640], "threshold": [191, 242, 601, 640], "set_auto_structifi": [191, 219, 242, 601, 618, 640], "is_odd": [191, 242, 601, 640], "_is_odd": [191, 242, 601, 640], "shift_and_fil": [193, 242, 547, 640, 918], "shift": [194, 242, 272, 314, 409, 435, 502, 547, 603, 640, 668, 713, 812, 842, 918], "shrink": [195, 242, 436, 547, 843, 844, 918], "hold": [195, 242], "nulls_last": [197, 242, 263, 266, 443, 547, 608, 640, 658, 661, 918], "ddof": [198, 216, 242, 446, 492, 504, 529, 534, 535, 539, 547, 609, 616, 640, 853, 908, 918], "standard": [198, 242, 326, 352, 427, 441, 446, 457, 535, 547, 609, 640, 726, 758, 849, 853, 865, 918], "deviat": [198, 242, 352, 427, 446, 535, 547, 609, 640, 758, 853, 918], "degre": [198, 216, 242, 446, 492, 504, 529, 534, 547, 853, 908, 918], "freedom": [198, 216, 242, 446, 492, 504, 529, 534, 547, 853, 908, 918], "816497": [198, 242], "21": [199, 242, 518], "16a": [199, 242], "27b": [199, 242], "38c": [199, 242], "nth": [201, 242, 470, 483, 547, 612, 640, 878, 892, 918], "mostli": [202, 242, 360, 547], "categoricaltyp": [202, 242], "as_seri": [203, 242], "fruit": [203, 242, 411, 419, 452, 471, 479, 547, 860, 879], "car": [203, 242, 411, 419, 479, 547], "beetl": [203, 242, 411, 419, 479, 547], "audi": [203, 242, 411, 419, 479, 547], "28": [203, 242, 348, 752], "300": [203, 242, 824, 825, 827, 918], "re": [206, 242], "ll": [206, 242], "numpy_arrai": [206, 242], "use_pyarrow_extension_arrai": [207, 242, 901, 918], "trigger": [207, 242, 901, 918], "sent": [207, 242, 900, 901, 918], "pandas_df1": [207, 242], "pandas_df2": [207, 242], "pandas_df2_pa": [207, 242], "na": [207, 242, 901, 918], "four": [209, 242], "five": [209, 242], "include_head": [210, 242], "header_nam": [210, 242], "column_nam": [210, 242], "perhap": [210, 242], "column_2": [210, 242], "name_gener": [210, 242, 291, 687], "base_nam": [210, 242], "my_column_": [210, 242], "my_column_0": [210, 242], "my_column_1": [210, 242], "my_column_2": [210, 242], "uniquekeepstrategi": [211, 242, 613, 640], "decompos": [212, 242, 614, 640], "t_a": [212, 242, 614, 640], "t_b": [212, 242, 614, 640], "t_c": [212, 242, 614, 640], "t_d": [212, 242, 614, 640], "womp": [212, 242, 614, 640], "t_": [212, 242, 614, 640], "t_struct": [212, 242, 614, 640], "step": [213, 242, 497], "unstackdirect": [213, 242], "much": [213, 242, 290, 313, 547, 686, 710, 918], "pivot": [213, 242], "phase": [213, 242], "subject": [213, 242], "ascii_uppercas": [213, 242], "col1": [213, 242, 640], "col2": [213, 242, 640], "h": [213, 242, 343, 436, 473, 547, 881], "col1_0": [213, 242], "col1_1": [213, 242], "col1_2": [213, 242], "col2_0": [213, 242], "col2_1": [213, 242], "col2_2": [213, 242], "syntact": [214, 242, 509, 514, 515, 519, 530, 533, 537, 615, 640, 852, 918], "sugar": [214, 242, 509, 514, 515, 519, 530, 533, 537, 615, 640, 852, 918], "coalesc": [214, 242, 615, 640], "400": [214, 242, 615, 640, 824, 825, 827, 918], "600": [214, 242, 615, 640], "700": [214, 242, 615, 640], "new_df": [214, 242, 615, 640], "time_column": [215, 242], "frequenc": [215, 242], "forward_fil": [215, 242, 309, 312, 547], "06": [215, 242, 319, 326, 338, 339, 349, 744, 751], "varianc": [216, 242, 353, 382, 429, 492, 539, 547, 616, 640, 759, 793, 832, 908, 918], "grow": [217, 242], "is_not": [219, 242, 547, 618, 640], "not_c": [219, 242, 618, 640], "diff": [219, 242, 322, 325, 328, 330, 332, 335, 342, 547, 618, 640, 722, 725, 731, 733, 736, 739, 746, 918], "_diff": [219, 242, 618, 640], "row_nr": [220, 242, 392, 547, 620, 640, 838, 918], "more_agg": [222, 622], "named_agg": [222, 622], "_sum": [222, 622], "_mean_squar": [222, 622], "b_sum": [222, 622], "c_mean_squar": [222, 622], "17": [222, 430, 518, 547, 622, 704, 744, 918], "sub": [224, 297, 298, 452, 471, 692, 693, 860, 879], "triangl": [224, 624], "group_df": [224, 624], "nr": [227, 236, 627, 636], "maxim": [229, 261, 547, 629, 656, 918], "833333": [230, 630], "minim": [232, 262, 268, 436, 547, 632, 657, 664, 803, 843, 918], "overview": [242, 547, 557, 640, 918], "public": [242, 547, 557, 640, 918], "frameinittyp": [242, 640], "variou": [242, 547, 640, 918], "entri": [242, 640], "prevent": [242, 311, 312, 381, 480, 547, 640, 708, 709, 889, 918], "come": [242, 382, 547, 558, 639, 640, 793, 918], "behavior": [242, 254, 290, 496, 524, 527, 547, 686], "mydatafram": 242, "notic": [242, 640, 918], "df4": 242, "df5": 242, "df6": 242, "corr": [242, 529, 534], "drop_in_plac": 242, "drop_nul": [242, 316, 547, 640, 918], "estimated_s": [242, 918], "explod": [242, 362, 418, 547, 640, 821, 918], "find_idx_by_nam": 242, "fold": [242, 399, 500, 507, 508, 531, 537], "frame_equ": [242, 340, 345], "get_column": [242, 537], "groupby_rol": [242, 421, 422, 423, 424, 425, 427, 428, 429, 547, 577, 640], "hash_row": 242, "hstack": 242, "insert_at_idx": 242, "is_dupl": [242, 547, 918], "is_empti": [242, 918], "is_uniqu": [242, 547, 918], "iter_slic": 242, "melt": [242, 640], "merge_sort": [242, 640], "n_uniqu": [242, 547, 918], "pipe": [242, 547, 640], "quantil": [242, 425, 547, 640, 828, 918], "replace_at_idx": 242, "shrink_to_fit": [242, 918], "take_everi": [242, 547, 640, 918], "to_dict": 242, "to_numpi": [242, 390, 547, 918], "to_panda": [242, 918], "to_struct": 242, "unnest": [242, 469, 470, 478, 640, 877, 878], "unstack": 242, "upsampl": 242, "write_avro": 242, "write_databas": 242, "write_excel": 242, "write_json": [242, 597, 640], "write_parquet": 242, "94": [249, 547], "confus": [251, 375, 377, 547], "tt": [251, 547], "tf": [251, 252, 547], "ff": [251, 252, 547], "upcast": [253, 547], "skip_nul": [254, 547, 649, 918], "pass_nam": [254, 547], "applystrategi": [254, 547], "thread_loc": [254, 547], "assum": [254, 547, 587, 624, 640], "considd": [254, 547], "code": [254, 433, 547, 585, 640, 839, 918], "amount": [254, 547], "releas": [254, 547], "gil": [254, 547], "discourag": [254, 547], "loop": [254, 547], "a_times_2": [254, 547], "invers": [255, 256, 257, 258, 259, 260, 547, 650, 651, 652, 653, 654, 655, 918], "cosin": [255, 256, 305, 306, 390, 547, 650, 651, 704, 705, 918], "570796": [255, 257, 547, 650, 652, 918], "hyperbol": [256, 258, 260, 306, 440, 485, 547, 651, 653, 655, 705, 848, 894, 918], "sine": [257, 258, 390, 439, 440, 547, 652, 653, 847, 848, 918], "881374": [258, 547, 653, 918], "tangent": [259, 260, 484, 485, 547, 654, 655, 893, 894, 918], "785398": [259, 547, 654, 918], "arg_wher": [264, 547], "arg_sort": [266, 547, 661, 918], "favour": [266, 356, 547, 661, 761, 918], "sublist": [267, 268, 270, 272, 275, 276, 277, 278, 279, 286, 289, 290, 663, 664, 666, 668, 671, 672, 673, 674, 675, 682, 685, 686, 687, 781, 918], "membership": [270, 666], "listcol": 271, "number_of_two": 271, "null_behavior": [272, 314, 547, 668, 713, 918], "nullbehavior": [272, 314, 547, 668, 713, 918], "th": [272, 314, 441, 547, 668, 713, 849, 918], "against": [273, 640, 669, 925], "blindli": [273, 669], "worth": [273, 669], "enough": [273, 441, 547, 669, 849, 918], "concat_list": [273, 513, 669], "rank": [273, 504, 513, 534, 547, 669, 918], "exprnamespac": 274, "reshap": [274, 547, 670, 918], "flat": [274, 418, 547, 670, 821, 918], "taken": [286, 467, 482, 547, 682, 875], "null_on_oob": [290, 686], "cheaper": [290, 686], "n_field_strategi": [291, 687], "tostructstrategi": [291, 687], "first_non_nul": [291, 687], "max_width": [291, 687], "field_0": [291, 687], "field_1": [291, 687], "field_n": [291, 687], "know": [291, 461, 869, 900, 909, 918], "incorrectli": 291, "downstream": [291, 433, 547, 839, 918], "advic": 291, "col_name_": [291, 687], "col_name_0": [291, 687], "col_name_1": [291, 687], "col_name_2": [291, 687], "substr": [294, 297, 298, 448, 452, 463, 464, 468, 469, 470, 471, 689, 692, 693, 856, 860, 871, 872, 876, 877, 878, 879], "transferencod": [295, 296, 450, 451, 690, 691, 858, 859], "strict": [295, 299, 448, 450, 462, 473, 547, 690, 694, 836, 856, 858, 870, 881, 918], "hex": [295, 296, 450, 451, 462, 690, 691, 858, 859, 870], "base64": [295, 296, 450, 451, 690, 691, 858, 859], "prefix": [298, 471, 476, 547, 693, 879, 884], "due": [299, 547, 694, 918], "overflow": [299, 311, 312, 462, 480, 547, 694, 708, 709, 870, 889, 918], "categoricalord": [300, 696], "lexic": [300, 696], "k": [300, 382, 487, 547, 696, 793, 903, 918], "min_val": [302, 304, 547, 700, 702, 918], "max_val": [302, 303, 547, 700, 701, 918], "foo_clip": [302, 303, 304, 547], "clip": [303, 304, 547, 701, 702, 918], "543081": [306, 547, 705, 918], "cumul": [308, 309, 310, 311, 312, 507, 508, 509, 547, 706, 707, 708, 709, 918], "a_revers": [308, 309, 310, 311, 312, 391, 419, 479, 547], "value_cummax": [309, 547], "value_cummax_all_fil": [309, 547], "uint16": [311, 312, 480, 547, 708, 709, 889, 918], "value_cumsum": [312, 547], "value_cumsum_all_fil": [312, 547], "min_period": [313, 351, 352, 353, 420, 421, 422, 423, 424, 425, 427, 428, 429, 547, 710, 757, 758, 759, 823, 824, 825, 826, 827, 828, 830, 831, 832, 918], "slide": [313, 547, 710, 918], "realli": [313, 547, 710, 918], "complex": [313, 487, 547, 710, 903, 918], "visit": [313, 547, 710, 918], "44": [315, 547], "drop_nan": [317, 547, 918], "tu": [318, 319, 323, 344, 348, 718, 719, 723, 743, 748, 752], "lose": [318, 718], "2001": [318, 321, 323, 324, 326, 331, 333, 336, 337, 338, 340, 341, 344, 345, 346, 347, 348, 349, 473, 718, 721, 723, 724, 727, 728, 729, 730, 732, 734, 735, 737, 738, 740, 741, 742, 744, 745, 747, 748, 749, 750, 751, 752, 753, 881], "tu_m": [318, 718], "tu_n": [318, 718], "tm": [319, 719], "compon": [319, 341, 473, 512, 719, 745], "resolv": 319, "456000": [319, 719], "101000": 319, "456": [319, 719, 898, 918], "101": [319, 462, 870], "d1": 319, "d2": 319, "d3": 319, "utc": [320, 339, 473, 720, 743, 881], "tz": [320, 339, 720, 743], "europ": [320, 339, 720, 743], "london": [320, 339, 720, 743], "gmt": [320, 339, 720, 743], "bst": [320, 339, 720, 743], "extract": [321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 341, 342, 346, 347, 349, 455, 456, 457, 547, 721, 722, 724, 725, 726, 730, 731, 732, 733, 735, 736, 737, 738, 739, 741, 742, 745, 746, 750, 751, 753, 863, 864, 865], "weekdai": [321, 337], "day_of_month": [321, 337, 347], "ordinal_dai": [321, 347], "day_of_year": [321, 337, 347], "days_diff": 322, "epochtimeunit": [323, 518, 723], "unix": [323, 518, 723], "epoch_n": [323, 723], "epoch_": [323, 723], "978307200000000": [323, 344, 723, 748], "978307200": [323, 723], "978393600000000": [323, 344, 723, 748], "978393600": [323, 723], "978480000000000": [323, 344, 723, 748], "978480000": [323, 723], "hours_diff": 325, "iso": [326, 346, 347, 726, 750, 751], "correspond": [326, 414, 547, 726, 817, 918], "2006": [326, 336, 740], "180": [326, 338, 349], "2002": [326, 336, 338, 349, 740, 753], "2004": [326, 336, 740], "2005": [326, 336, 740], "1001": [327, 328, 330, 335], "002": [327, 328, 330, 335, 512, 731, 733, 739], "2000": [327, 336, 740], "003": [327, 328, 330, 335], "3000": 327, "997": [327, 328, 330, 335], "997000": 327, "998": [327, 328, 330, 335], "998000": 327, "999": [327, 328, 330, 335], "999000": 327, "microseconds_diff": 328, "milliseconds_diff": 330, "minutes_diff": 332, "1440": [332, 736], "nanoseconds_diff": 335, "1000000": [335, 476, 739], "leap": [336, 740], "minu": [336, 740], "dictat": [336, 740], "date_plus_1i": [336, 740], "1y2mo": [336, 740], "date_min": 336, "1998": [336, 740], "1999": [336, 740], "2003": [336, 518, 740], "ordin": [337, 414, 547, 741, 817, 918], "366": [337, 741], "convert_time_zon": [339, 743], "timestamp": [339, 518, 743], "unset": [339, 743], "london_timezon": 339, "amsterdam": 339, "london_to_amsterdam": 339, "cet": 339, "cest": 339, "half": [340, 351, 352, 353, 547, 744, 757, 758, 759, 918], "225": [340, 345], "to_fram": [340, 345, 473, 837, 838, 877, 878, 881, 918], "10m": [340, 345, 744, 749], "milli": [341, 745], "micro": [341, 745], "456789": 341, "654321": 341, "111110": 341, "765431": 341, "sec": 341, "11111": 341, "seconds_diff": 342, "timestamp_n": [344, 748], "timestamp_m": 344, "978307200000": 344, "978393600000": 344, "978480000000": 344, "53": [346, 750], "sundai": [347, 751], "incorrect": [348, 433, 547, 624, 752, 839, 918], "tu_u": [348, 752], "32971": [348, 752], "32974": [348, 752], "32976": [348, 752], "718281828459045": [350, 387, 547, 755, 796, 918], "pk": [350, 547, 755, 918], "459148": [350, 547], "754888": [350, 547], "span": [351, 352, 353, 547, 757, 758, 759, 918], "half_lif": [351, 352, 353, 547, 757, 758, 759, 918], "adjust": [351, 352, 353, 441, 547, 757, 758, 759, 849, 918], "ignore_nul": [351, 352, 353, 547, 757, 758, 759, 909, 918], "exponenti": [351, 352, 353, 355, 547, 757, 758, 759, 760, 918], "weight": [351, 352, 353, 420, 421, 422, 423, 424, 425, 427, 428, 429, 441, 547, 757, 758, 759, 823, 824, 825, 826, 827, 828, 830, 831, 832, 849, 918], "decai": [351, 352, 353, 547, 757, 758, 759, 918], "term": [351, 352, 353, 458, 461, 547, 757, 758, 759, 866, 869, 918], "mass": [351, 352, 353, 547, 757, 758, 759, 918], "gamma": [351, 352, 353, 547, 757, 758, 759, 918], "foral": [351, 352, 353, 547, 757, 758, 759, 918], "geq": [351, 352, 353, 547, 757, 758, 759, 918], "theta": [351, 352, 353, 547, 757, 758, 759, 918], "life": [351, 352, 353, 547, 757, 758, 759, 918], "exp": [351, 352, 353, 547, 757, 758, 759, 918], "ln": [351, 352, 353, 547, 757, 758, 759, 918], "smooth": [351, 352, 353, 547, 757, 758, 759, 918], "factor": [351, 352, 353, 486, 547, 757, 758, 759, 902, 918], "leq": [351, 352, 353, 547, 757, 758, 759, 918], "begin": [351, 352, 353, 454, 547, 757, 758, 759, 862, 918], "imbal": [351, 352, 353, 547, 757, 758, 759, 918], "ew": [351, 352, 353, 547, 757, 758, 759, 918], "w_i": [351, 352, 353, 547, 757, 758, 759, 918], "recurs": [351, 352, 353, 547, 757, 758, 759, 918], "y_0": [351, 352, 353, 547, 757, 758, 759, 918], "x_0": [351, 352, 353, 547, 757, 758, 759, 918], "y_t": [351, 352, 353, 547, 757, 758, 759, 918], "y_": [351, 352, 353, 547, 757, 758, 759, 918], "x_t": [351, 352, 353, 547, 757, 758, 759, 918], "observ": [351, 352, 353, 547, 757, 758, 759, 918], "x_2": [351, 352, 353, 547, 757, 758, 759, 918], "428571": [351, 547], "bia": [352, 353, 382, 426, 441, 547, 758, 759, 793, 829, 849, 918], "unbias": [352, 353, 547, 758, 759, 918], "963624": [352, 547, 758, 918], "928571": [353, 547, 759, 918], "wildcard": [354, 494, 501, 507, 508, 516, 531, 547], "regex": [354, 397, 448, 449, 452, 454, 455, 463, 464, 471, 514, 524, 527, 537, 547, 856, 857, 860, 862, 863, 871, 872, 879], "aa": [354, 514, 547], "ba": [354, 514, 547], "cc": [354, 514, 547], "718282": [355, 547], "389056": [355, 547], "54": [355, 547], "59815": [355, 547], "expand": [356, 396, 397, 417, 547, 761, 918], "arr": [356, 513, 547, 548, 761, 900, 918, 919], "exprlistnamespac": [356, 362, 418, 547], "exprstringnamespac": [356, 547], "pythonliter": [357, 547, 618, 640, 762, 918], "extrem": [357, 547, 762, 918], "group_col": [360, 493, 547], "g1": [360, 493, 547], "g2": [360, 493, 547], "lt": [360, 493, 547, 918], "gte": [360, 493, 547], "9774092659964970114": [365, 547], "13614470193936745724": [365, 547], "1101441246220388612": [365, 547], "11638928888656214026": [365, 547], "13382926553367784577": [365, 547], "cumsum": [367, 547, 580, 640, 918], "interpolationmethod": [368, 547, 773, 918], "regrid": [368, 547], "grid": [368, 547], "df_original_grid": [368, 547], "grid_point": [368, 547], "df_new_grid": [368, 547], "conflat": [369, 547], "finit": [371, 504, 534, 547, 778, 918], "primit": [373, 547, 900, 918], "optional_memb": [373, 547, 781, 918], "infinit": [374, 547, 782, 918], "_isnan": [375, 547], "b_isnan": [375, 547], "negat": [376, 547], "_is_not_nan": [377, 547], "b_is_not_nan": [377, 547], "_not_nul": [378, 547], "a_not_nul": [378, 547], "b_not_nul": [378, 547], "_isnul": [379, 547], "a_isnul": [379, 547], "b_isnul": [379, 547], "undo": [381, 401, 547], "duplicateerror": [381, 547, 557], "occurr": [381, 547], "333333": [381, 429, 547, 812, 832, 918], "fisher": [382, 441, 547, 793, 849, 918], "fourth": [382, 547, 793, 918], "subtract": [382, 547, 793, 918], "distribut": [382, 441, 547, 793, 849, 918], "elimin": [382, 547, 793, 918], "bias": [382, 441, 547, 793, 849, 918], "scipi": [382, 441, 547, 793, 849, 918], "stat": [382, 441, 547, 793, 849, 918], "153061": [382, 547], "logarithm": [387, 388, 547, 796, 797, 918], "584963": [387, 547], "30103": [388, 547], "60206": [388, 547], "lowest": [389, 547], "9223372036854775808": [389, 547], "agg_list": [390, 547], "elementwis": [390, 420, 421, 422, 423, 424, 425, 427, 428, 429, 494, 495, 547, 823, 824, 825, 826, 827, 828, 830, 831, 832, 918], "third": [390, 547], "parti": [390, 547], "book": [390, 547], "argmax": [390, 547], "_revers": [391, 419, 479, 547], "b_revers": [391, 419, 479, 547], "remap": [392, 547, 799, 918], "lookup": [392, 547, 799, 918], "country_code_dict": [392, 547], "ca": [392, 547], "canada": [392, 547], "de": [392, 547], "germani": [392, 547], "fr": [392, 547], "franc": [392, 547], "country_cod": [392, 547], "unknown": [392, 522, 547], "rest": [392, 547], "computeerror": [398, 462, 557, 870], "keep_nam": [401, 547], "poison": [405, 406, 547, 808, 809, 918], "nanmax": [405, 406, 547, 808, 809, 918], "wherea": [405, 406, 547, 579, 586, 640, 808, 809, 918], "outcom": [408, 547], "_max": [408, 547], "c_max": [408, 547], "_min": [408, 547], "c_min": [408, 547], "recent": [409, 547, 812, 918], "percent": [409, 547, 812, 918], "090909": [409, 547], "expon": [410, 547], "power": [410, 547], "reverse_": [411, 547], "reverse_a": [411, 547], "reverse_fruit": [411, 547], "reverse_b": [411, 547], "reverse_car": [411, 547], "rankmethod": [414, 547, 817, 918], "ti": [414, 547, 817, 918], "appropri": [414, 547, 817, 918], "competit": [414, 547, 817, 918], "highest": [414, 490, 504, 534, 547, 640, 817, 918], "safe": [416, 547, 819, 900, 918], "coerc": [417, 547], "dim": [418, 547, 821, 918], "fruits_revers": [419, 479, 547], "cars_revers": [419, 479, 547], "window_s": [420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 547, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 918], "rolling_min": [420, 547, 823, 918], "rolling_max": [420, 547, 823, 918], "rolling_mean": [420, 547, 823, 918], "rolling_sum": [420, 547, 823, 918], "multipli": [420, 421, 422, 423, 424, 425, 427, 428, 429, 547, 823, 824, 825, 826, 827, 828, 830, 831, 832, 918], "358899": [420, 547], "041452": [420, 547], "567764": [420, 547], "travers": [421, 422, 424, 427, 428, 429, 547, 824, 825, 827, 830, 831, 832, 918], "vector": [421, 422, 424, 427, 428, 429, 547, 824, 825, 827, 830, 831, 832, 918], "5h": [421, 422, 423, 424, 425, 427, 428, 429, 547], "33": [425, 430, 501, 547, 828, 918], "skew": [426, 547, 829, 918], "527525": [427, 547, 830, 918], "digit": [430, 476, 547, 833, 857, 884, 918], "searchsortedsid": [432, 547, 835, 918], "maintain": [432, 488, 547, 605, 606, 640, 835, 904, 918], "leftmost": [432, 547, 835, 918], "rightmost": [432, 547, 835, 918], "six": [432, 547], "extrema": [436, 547, 843, 918], "112": [436, 547], "129": [436, 547], "i8": [436, 547, 713, 822, 906, 918], "8589934592": [436, 547], "1073741824": [436, 547], "content": [437, 491, 547, 845, 918], "175201": [440, 547, 848, 918], "about": [441, 547, 849, 918], "unimod": [441, 547, 849, 918], "skewtest": [441, 547, 849, 918], "speak": [441, 547, 849, 918], "g_1": [441, 547, 849, 918], "m_3": [441, 547, 849, 918], "m_2": [441, 547, 849, 918], "m_i": [441, 547, 849, 918], "sum_": [441, 547, 849, 918], "texttt": [441, 547, 849, 918], "k_3": [441, 547, 849, 918], "k_2": [441, 547, 849, 918], "sqrt": [441, 547, 849, 918], "343622": [441, 547], "value1": [444, 547], "value2": [444, 547], "414214": [445, 547, 852, 918], "ends_with": [448, 471, 879], "crab": [448, 856], "dog": [448, 474, 475, 503, 856], "rab": [448, 856], "success": [449, 455, 857, 863], "overlap": [449, 455, 857, 863], "captur": [449, 454, 455, 857, 862, 863], "123": [449, 455, 464, 857, 863, 872, 898, 918], "bla": [449, 455, 857, 863], "asd": [449, 455, 857, 863], "678": [449, 455, 857, 863], "910t": [449, 455, 857, 863], "r": [449, 453, 454, 455, 463, 547, 857, 861, 862, 863, 871], "count_digit": 449, "666f6f": [451, 859], "626172": [451, 859], "mango": [452, 471, 860, 879], "go": [452, 860], "has_suffix": 452, "group_index": [454, 862], "vote": [454, 862], "ballon_dor": [454, 862], "candid": [454, 862], "messi": [454, 862], "ref": [454, 862], "candidat": [454, 862], "jorginho": [454, 862], "ronaldo": [454, 862], "extracted_nr": 455, "910": [455, 863], "json_path_match": [456, 864], "jsonpath": [456, 457, 864, 865], "json_path": [457, 865], "regardless": [457, 865], "json_val": [457, 865], "n_char": [458, 866], "caf\u00e9": [458, 461, 866, 869], "345": [458, 461, 866, 869], "\u6771\u4eac": [458, 461, 866, 869], "nchar": [458, 461], "fillchar": [459, 465, 867, 873], "justifi": [459, 465, 867, 873], "pad": [459, 465, 476, 867, 873, 884], "cow": [459, 465, 867, 873], "monkei": [459, 465, 867, 873], "hippopotamu": [459, 465, 867, 873], "strip": [460, 466, 868, 874], "whitespac": [460, 466, 472, 868, 874, 880], "tworld": [460, 472, 868, 880], "wod": [460, 466, 868, 874], "rld": [460, 868], "text": [461, 463, 464, 869], "radix": [462, 870], "parseerror": [462, 870], "becom": [462, 870], "defult": [462, 870], "silent": [462, 870], "110": [462, 870], "010": [462, 870], "fa1e": [462, 870], "ff00": [462, 870], "cafe": [462, 870], "64030": [462, 870], "65280": [462, 870], "51966": [462, 870], "replace_al": [463, 871], "123abc": [463, 871], "abc456": [463, 871], "abcabc": [464, 872], "123a123": [464, 872], "bc": [464, 537, 872], "trail": [466, 472, 874, 880], "worl": [466, 472, 874, 880], "subslic": [467, 875], "pear": [467, 875], "papaya": [467, 875], "dragonfruit": [467, 875], "s_slice": 467, "ear": [467, 875], "aya": [467, 875], "uit": [467, 875], "ya": [467, 875], "onf": [467, 875], "a_1": [469, 877, 897, 918], "d_4": [469, 877], "rename_field": [469, 470, 877, 878], "first_part": [469, 470, 877, 878], "second_part": [469, 470, 877, 878], "remaind": [470, 878], "app": [471, 879], "has_prefix": 471, "polarstemporaltyp": [473, 881], "tz_awar": [473, 881], "strftime": [473, 881], "anywher": [473, 881], "3f": 473, "00z": [473, 881], "sun": [473, 881], "jul": [473, 881], "34": [473, 881], "lowercas": [474, 882], "variant": [474, 475], "uppercas": [475, 883], "100000": 476, "0010": 476, "0001": 476, "00000": 476, "00001": 476, "cd": [477, 478], "struct_col": [477, 478], "www": 478, "xxx": 478, "yyi": 478, "zzz": 478, "obvious": 478, "referenc": 478, "structfieldnotfounderror": [478, 557], "56": [484, 547], "761594": [485, 547, 894, 918], "replic": [486, 547, 902, 918], "vals_phys": [486, 547], "largest": [487, 547, 903, 918], "smallest": [487, 547, 903, 918], "bottom_k": [487, 547], "value_count": [489, 547, 918], "9223372036854775807": [490, 547], "multithread": [491, 547], "columnwis": [494, 495], "AND": 494, "bitwis": [494, 495], "returns_scalar": 496, "product_a": 496, "49": 496, "Be": 497, "more_nam": 501, "hamburg": 501, "lag": 502, "mimic": 502, "a_lag_": 502, "a_rol": 502, "plai": 503, "swim": 503, "walk": 503, "full_sent": 503, "correlationmethod": 504, "propagate_nan": [504, 534], "spearman": [504, 534], "larger": [504, 534, 605, 606, 640], "544705": [504, 529], "covari": 506, "acc": [507, 508, 516, 531], "include_init": 507, "accumul": [507, 508, 516, 531], "fn": [507, 508, 516, 531], "new_valu": [507, 508, 516, 531], "simpli": [507, 516], "cumreduc": 507, "cumfold": 509, "999999": 511, "add_week": 512, "add_dai": 512, "add_second": 512, "add_millisecond": 512, "add_hour": 512, "add_millisec": 512, "ond": 512, "eval": 513, "mathemat": 513, "a_b_doubl": 513, "fstring": 517, "placehold": 517, "hello_": 517, "_world": 517, "foo_": 517, "_bar_": 517, "foo_a_bar_1": 517, "foo_b_bar_2": 517, "foo_c_bar_3": 517, "epoch": [518, 743], "timestep": 518, "1666683077": 518, "1666683099": 518, "39": 518, "12345": [518, 697, 767, 833, 918], "12346": 518, "agg_group": [519, 547], "allow_object": 522, "valueexcept": 522, "test_func": 523, "selector": [524, 527, 537], "favor": [529, 534], "605551": 535, "605551275463989": 535, "my_struct": 536, "q": 536, "isn": 540, "thens": 540, "chain": 540, "sometim": 546, "arcco": [547, 918], "arccosh": [547, 918], "arcsin": [547, 918], "arcsinh": [547, 918], "arctan": [547, 918], "arctanh": [547, 918], "arg_max": [547, 918], "arg_min": [547, 918], "arg_uniqu": [547, 918], "argsort": [547, 918], "backward_fil": 547, "clip_max": [547, 918], "clip_min": [547, 918], "co": [547, 918], "cosh": [547, 918], "cumcount": 547, "cummax": [547, 918], "cummin": [547, 918], "cumprod": [547, 918], "cumulative_ev": [547, 918], "entropi": [547, 918], "ewm_mean": [547, 918], "ewm_std": [547, 918], "ewm_var": [547, 918], "extend_const": [547, 918], "flatten": 547, "inspect": [547, 640], "is_between": [547, 918], "is_finit": [547, 918], "is_first": [547, 918], "is_in": [547, 918], "is_infinit": [547, 918], "is_nan": [547, 918], "is_not_nan": [547, 918], "is_not_nul": [547, 918], "kurtosi": [547, 918], "log10": [547, 918], "map_alia": 547, "map_dict": [547, 918], "nan_max": [547, 918], "nan_min": [547, 918], "pct_chang": [547, 918], "extract_numb": 547, "pow": 547, "reinterpret": [547, 918], "repeat_bi": 547, "rolling_appli": [547, 918], "rolling_median": [547, 918], "rolling_quantil": [547, 918], "rolling_skew": [547, 918], "rolling_std": [547, 918], "rolling_var": [547, 918], "search_sort": [547, 918], "set_sort": [547, 918], "shrink_dtyp": [547, 918], "sin": [547, 918], "sinh": [547, 918], "sort_bi": 547, "tan": [547, 918], "tanh": [547, 918], "to_phys": [547, 918], "top_k": [547, 918], "unique_count": [547, 918], "expos": 557, "registr": 557, "miscellan": 557, "arrowerror": 557, "columnnotfounderror": 557, "invalidoperationerror": 557, "nodataerror": 557, "panicexcept": 557, "schemaerror": 557, "schemafieldnotfounderror": 557, "shapeerror": 557, "build_info": 557, "get_index_typ": 557, "show_vers": 557, "threadpool_s": 557, "sqlcontext": [557, 925], "hit": [560, 640], "node": [560, 580, 587, 591, 595, 598, 640], "huge": [563, 640], "saver": [563, 640], "purpos": [570, 640], "influenc": [570, 587, 640], "read_json": [575, 621, 640], "lazygroupbi": [576, 577, 578, 640], "other_lf": [582, 640], "validate_output_schema": [587, 640], "streamabl": [587, 591, 640], "past": [587, 640], "paramount": [587, 640], "hard": [587, 640], "bug": [587, 624, 640], "elig": [587, 640], "ot": [587, 640], "exectut": [587, 640], "invari": [587, 640], "upheld": [587, 640], "prune": [587, 640], "show_plot": [595, 640], "truncate_nod": [595, 640], "figsiz": [595, 604, 640], "gantt": [595, 640], "plot": [595, 604, 640], "groupby_partit": [595, 640], "470": [595, 640], "475": [595, 640], "1964": [595, 640], "from_json": [597, 640], "swap": [598, 640], "output_path": [604, 640], "raw_output": [604, 640], "figur": [604, 640], "persist": [605, 606, 640], "ram": [605, 606, 640], "slightli": [605, 606, 640], "my_larger_than_ram_fil": [605, 606, 640], "data_pagesize_limit": [606, 640], "290994": [609, 640], "118034": [609, 640], "433013": [609, 640], "1875": [616, 640], "polarsexprtyp": [618, 640], "extern": [619, 640], "lf_other": [619, 640], "afoo": [619, 640], "cfoo": [619, 640], "train_lf": [619, 640], "feature_0": [619, 640], "feature_1": [619, 640], "test_lf": [619, 640], "_train": [619, 640], "feature_0_train": [619, 640], "dataframescan": [621, 640], "output_schema": [621, 640], "initialis": 640, "lf2": 640, "lf3": 640, "lf4": 640, "lf5": 640, "lf6": 640, "explain": 640, "profil": 640, "sink_ipc": 640, "sink_parquet": 640, "with_context": 640, "sr": [645, 918], "new_aliased_sr": [645, 918], "append_chunk": [648, 918], "super": [648, 918], "141593": [650, 918], "292432": [651, 918], "549306": [655, 918], "listnamespac": [662, 761, 821, 918], "catnamespac": 695, "56789": [697, 767, 833, 918], "901234": [697, 767, 833, 918], "pi": [704, 847, 893, 918], "1232e": [704, 918], "quick": [712, 918], "series_num": [712, 918], "581139": [712, 918], "series_str": [712, 918], "datetimenamespac": 717, "500m": [730, 732, 738, 745], "500000": 730, "2m": 735, "500000000": 738, "date_minus_1y_2mon": 740, "1583020800": 743, "1585699200": 743, "1588291200": 743, "nyc": 743, "edt": 743, "1583038800": 743, "1585717200": 743, "1588309200": 743, "165": [744, 749], "series_equ": [744, 749, 918], "timestamp_u": 748, "978307200000000000": 748, "978393600000000000": 748, "978480000000000000": 748, "005": [755, 918], "06293300616044681": [755, 918], "65": [755, 918], "8568409950394724": [755, 918], "4000000": [756, 918], "814697265625": [756, 918], "stringnamespac": [761, 854, 918], "bitmask": [769, 918], "swiftli": [769, 918], "10734580197236529959": [770, 918], "3022416320763508302": [770, 918], "13756996518000038261": [770, 918], "fall": [774, 918], "2147483648": [798, 918], "iso3166": [799, 918], "tur": [799, 918], "jpn": [799, 918], "nld": [799, 918], "country_lookup": [799, 918], "japan": [799, 918], "t\u00fcrkiy": [799, 918], "netherland": [799, 918], "unrecognis": [799, 918], "unspecifi": [799, 918], "country_nam": [799, 918], "166667": [812, 918], "142857": [812, 918], "512": [812, 918], "peak": [813, 814, 918], "nanstd": [823, 918], "858612": [823, 918], "200": [824, 825, 827, 918], "150": [825, 918], "250": [825, 918], "350": [825, 918], "450": [825, 918], "381802": [829, 918], "dev": [830, 918], "57": [833, 918], "frequent": [837, 838, 918], "mutat": [838, 918], "2246e": [847, 893, 918], "divisor": [853, 908, 918], "6331e16": [893, 918], "lib": [896, 918], "int64arrai": [896, 918], "a_2": [897, 918], "a_3": [897, 918], "zero_copy_onli": [900, 918], "writabl": [900, 918], "complet": [900, 918], "view": [900, 918], "presenc": [900, 918], "immut": [900, 918], "127": [906, 918], "seriesview": [909, 918], "arraylik": 918, "dtype_if_empti": 918, "position": 918, "scenario": 918, "through": 918, "chunk_length": 918, "cut": 918, "eq": 918, "ge": 918, "get_chunk": 918, "gt": 918, "has_valid": 918, "is_boolean": 918, "is_float": 918, "is_numer": 918, "is_sort": 918, "is_tempor": 918, "is_utf8": 918, "le": 918, "ne": 918, "new_from_index": 918, "peak_max": 918, "peak_min": 918, "set_at_idx": 918}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [925, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 0, 1, "", "Struct"], [53, 0, 1, "", "Time"], [54, 0, 1, "", "UInt16"], [55, 0, 1, "", "UInt32"], [56, 0, 1, "", "UInt64"], [57, 0, 1, "", "UInt8"], [58, 0, 1, "", "Unknown"], [59, 0, 1, "", "Utf8"], [60, 4, 1, "", "align_frames"], [494, 4, 1, "", "all"], [495, 4, 1, "", "any"], [496, 4, 1, "", "apply"], [497, 4, 1, "", "arange"], [498, 4, 1, "", "arg_sort_by"], [65, 4, 1, "", "arg_where"], [499, 4, 1, "", "avg"], [66, 4, 1, "", "build_info"], [500, 4, 1, "", "coalesce"], [501, 4, 1, "", "col"], [67, 4, 1, "", "collect_all"], [68, 4, 1, "", "concat"], [502, 4, 1, "", "concat_list"], [503, 4, 1, "", "concat_str"], [504, 4, 1, "", "corr"], [505, 4, 1, "", "count"], [506, 4, 1, "", "cov"], [507, 4, 1, "", "cumfold"], [508, 4, 1, "", "cumreduce"], [509, 4, 1, "", "cumsum"], [69, 4, 1, "", "cut"], [510, 4, 1, "", "date"], [70, 4, 1, "", "date_range"], [511, 4, 1, "", "datetime"], [512, 4, 1, "", "duration"], [513, 4, 1, "", "element"], [514, 4, 1, "", "exclude"], [515, 4, 1, "", "first"], [516, 4, 1, "", "fold"], [517, 4, 1, "", "format"], [85, 4, 1, "", "from_arrow"], [86, 4, 1, "", "from_dataframe"], [87, 4, 1, "", "from_dict"], [88, 4, 1, "", "from_dicts"], [518, 4, 1, "", "from_epoch"], [89, 4, 1, "", "from_numpy"], [90, 4, 1, "", "from_pandas"], [91, 4, 1, "", "from_records"], [92, 4, 1, "", "get_dummies"], [93, 4, 1, "", "get_index_type"], [519, 4, 1, "", "groups"], [520, 4, 1, "", "head"], [521, 4, 1, "", "list"], [522, 4, 1, "", "lit"], [523, 4, 1, "", "map"], [524, 4, 1, "", "max"], [525, 4, 1, "", "mean"], [526, 4, 1, "", "median"], [527, 4, 1, "", "min"], [528, 4, 1, "", "n_unique"], [95, 4, 1, "", "ones"], [529, 4, 1, "", "pearson_corr"], [530, 4, 1, "", "quantile"], [96, 4, 1, "", "read_avro"], [97, 4, 1, "", "read_csv"], [98, 4, 1, "", "read_csv_batched"], [99, 4, 1, "", "read_database"], [100, 4, 1, "", "read_delta"], [101, 4, 1, "", "read_excel"], [102, 4, 1, "", "read_ipc"], [103, 4, 1, "", "read_ipc_schema"], [104, 4, 1, "", "read_json"], [105, 4, 1, "", "read_ndjson"], [106, 4, 1, "", "read_parquet"], [107, 4, 1, "", "read_parquet_schema"], [531, 4, 1, "", "reduce"], [532, 4, 1, "", "repeat"], [108, 4, 1, "", "scan_csv"], [109, 4, 1, "", "scan_delta"], [110, 4, 1, "", "scan_ipc"], [111, 4, 1, "", "scan_ndjson"], [112, 4, 1, "", "scan_parquet"], [113, 4, 1, "", "scan_pyarrow_dataset"], [533, 4, 1, "", "select"], [114, 4, 1, "", "show_versions"], [534, 4, 1, "", "spearman_rank_corr"], [535, 4, 1, "", "std"], [536, 4, 1, "", "struct"], [537, 4, 1, "", "sum"], [538, 4, 1, "", "tail"], [121, 4, 1, "", "threadpool_size"], [122, 4, 1, "", "toggle_string_cache"], [539, 4, 1, "", "var"], [540, 4, 1, "", "when"], [123, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[126, 1, 1, "", "__dataframe__"], [127, 1, 1, "", "apply"], [128, 1, 1, "", "clear"], [129, 1, 1, "", "clone"], [130, 2, 1, "", "columns"], [131, 1, 1, "", "corr"], [132, 1, 1, "", "describe"], [133, 1, 1, "", "drop"], [134, 1, 1, "", "drop_in_place"], [135, 1, 1, "", "drop_nulls"], [136, 2, 1, "", "dtypes"], [137, 1, 1, "", "estimated_size"], [138, 1, 1, "", "explode"], [139, 1, 1, "", "extend"], [140, 1, 1, "", "fill_nan"], [141, 1, 1, "", "fill_null"], [142, 1, 1, "", "filter"], [143, 1, 1, "", "find_idx_by_name"], [144, 1, 1, "", "fold"], [145, 1, 1, "", "frame_equal"], [146, 1, 1, "", "get_column"], [147, 1, 1, "", "get_columns"], [148, 1, 1, "", "glimpse"], [149, 1, 1, "", "groupby"], [150, 1, 1, "", "groupby_dynamic"], [151, 1, 1, "", "groupby_rolling"], [152, 1, 1, "", "hash_rows"], [153, 1, 1, "", "head"], [154, 2, 1, "", "height"], [155, 1, 1, "", "hstack"], [156, 1, 1, "", "insert_at_idx"], [157, 1, 1, "", "interpolate"], [158, 1, 1, "", "is_duplicated"], [159, 1, 1, "", "is_empty"], [160, 1, 1, "", "is_unique"], [161, 1, 1, "", "item"], [162, 1, 1, "", "iter_rows"], [163, 1, 1, "", "iter_slices"], [164, 1, 1, "", "join"], [165, 1, 1, "", "join_asof"], [166, 1, 1, "", "lazy"], [167, 1, 1, "", "limit"], [168, 1, 1, "", "max"], [169, 1, 1, "", "mean"], [170, 1, 1, "", "median"], [171, 1, 1, "", "melt"], [172, 1, 1, "", "merge_sorted"], [173, 1, 1, "", "min"], [174, 1, 1, "", "n_chunks"], [175, 1, 1, "", "n_unique"], [176, 1, 1, "", "null_count"], [177, 1, 1, "", "partition_by"], [178, 1, 1, "", "pipe"], [179, 1, 1, "", "pivot"], [180, 1, 1, "", "product"], [181, 1, 1, "", "quantile"], [182, 1, 1, "", "rechunk"], [183, 1, 1, "", "rename"], [184, 1, 1, "", "replace"], [185, 1, 1, "", "replace_at_idx"], [186, 1, 1, "", "reverse"], [187, 1, 1, "", "row"], [188, 1, 1, "", "rows"], [189, 1, 1, "", "sample"], [190, 2, 1, "", "schema"], [191, 1, 1, "", "select"], [192, 2, 1, "", "shape"], [193, 1, 1, "", "shift"], [194, 1, 1, "", "shift_and_fill"], [195, 1, 1, "", "shrink_to_fit"], [196, 1, 1, "", "slice"], [197, 1, 1, "", "sort"], [198, 1, 1, "", "std"], [199, 1, 1, "", "sum"], [200, 1, 1, "", "tail"], [201, 1, 1, "", "take_every"], [202, 1, 1, "", "to_arrow"], [203, 1, 1, "", "to_dict"], [204, 1, 1, "", "to_dicts"], [205, 1, 1, "", "to_dummies"], [206, 1, 1, "", "to_numpy"], [207, 1, 1, "", "to_pandas"], [208, 1, 1, "", "to_series"], [209, 1, 1, "", "to_struct"], [210, 1, 1, "", "transpose"], [211, 1, 1, "", "unique"], [212, 1, 1, "", "unnest"], [213, 1, 1, "", "unstack"], [214, 1, 1, "", "update"], [215, 1, 1, "", "upsample"], [216, 1, 1, "", "var"], [217, 1, 1, "", "vstack"], [218, 2, 1, "", "width"], [219, 1, 1, "", "with_columns"], [220, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[248, 1, 1, "", "abs"], [249, 1, 1, "", "agg_groups"], [250, 1, 1, "", "alias"], [251, 1, 1, "", "all"], [252, 1, 1, "", "any"], [253, 1, 1, "", "append"], [254, 1, 1, "", "apply"], [255, 1, 1, "", "arccos"], [256, 1, 1, "", "arccosh"], [257, 1, 1, "", "arcsin"], [258, 1, 1, "", "arcsinh"], [259, 1, 1, "", "arctan"], [260, 1, 1, "", "arctanh"], [261, 1, 1, "", "arg_max"], [262, 1, 1, "", "arg_min"], [263, 1, 1, "", "arg_sort"], [264, 1, 1, "", "arg_true"], [265, 1, 1, "", "arg_unique"], [266, 1, 1, "", "argsort"], [293, 1, 1, "", "backward_fill"], [299, 1, 1, "", "cast"], [301, 1, 1, "", "ceil"], [302, 1, 1, "", "clip"], [303, 1, 1, "", "clip_max"], [304, 1, 1, "", "clip_min"], [305, 1, 1, "", "cos"], [306, 1, 1, "", "cosh"], [307, 1, 1, "", "count"], [308, 1, 1, "", "cumcount"], [309, 1, 1, "", "cummax"], [310, 1, 1, "", "cummin"], [311, 1, 1, "", "cumprod"], [312, 1, 1, "", "cumsum"], [313, 1, 1, "", "cumulative_eval"], [314, 1, 1, "", "diff"], [315, 1, 1, "", "dot"], [316, 1, 1, "", "drop_nans"], [317, 1, 1, "", "drop_nulls"], [350, 1, 1, "", "entropy"], [351, 1, 1, "", "ewm_mean"], [352, 1, 1, "", "ewm_std"], [353, 1, 1, "", "ewm_var"], [354, 1, 1, "", "exclude"], [355, 1, 1, "", "exp"], [356, 1, 1, "", "explode"], [357, 1, 1, "", "extend_constant"], [358, 1, 1, "", "fill_nan"], [359, 1, 1, "", "fill_null"], [360, 1, 1, "", "filter"], [361, 1, 1, "", "first"], [362, 1, 1, "", "flatten"], [363, 1, 1, "", "floor"], [364, 1, 1, "", "forward_fill"], [365, 1, 1, "", "hash"], [366, 1, 1, "", "head"], [367, 1, 1, "", "inspect"], [368, 1, 1, "", "interpolate"], [369, 1, 1, "", "is_between"], [370, 1, 1, "", "is_duplicated"], [371, 1, 1, "", "is_finite"], [372, 1, 1, "", "is_first"], [373, 1, 1, "", "is_in"], [374, 1, 1, "", "is_infinite"], [375, 1, 1, "", "is_nan"], [376, 1, 1, "", "is_not"], [377, 1, 1, "", "is_not_nan"], [378, 1, 1, "", "is_not_null"], [379, 1, 1, "", "is_null"], [380, 1, 1, "", "is_unique"], [381, 1, 1, "", "keep_name"], [382, 1, 1, "", "kurtosis"], [383, 1, 1, "", "last"], [384, 1, 1, "", "len"], [385, 1, 1, "", "limit"], [386, 1, 1, "", "list"], [387, 1, 1, "", "log"], [388, 1, 1, "", "log10"], [389, 1, 1, "", "lower_bound"], [390, 1, 1, "", "map"], [391, 1, 1, "", "map_alias"], [392, 1, 1, "", "map_dict"], [393, 1, 1, "", "max"], [394, 1, 1, "", "mean"], [395, 1, 1, "", "median"], [402, 1, 1, "", "min"], [403, 1, 1, "", "mode"], [404, 1, 1, "", "n_unique"], [405, 1, 1, "", "nan_max"], [406, 1, 1, "", "nan_min"], [407, 1, 1, "", "null_count"], [408, 1, 1, "", "over"], [409, 1, 1, "", "pct_change"], [410, 1, 1, "", "pow"], [411, 1, 1, "", "prefix"], [412, 1, 1, "", "product"], [413, 1, 1, "", "quantile"], [414, 1, 1, "", "rank"], [415, 1, 1, "", "rechunk"], [416, 1, 1, "", "reinterpret"], [417, 1, 1, "", "repeat_by"], [418, 1, 1, "", "reshape"], [419, 1, 1, "", "reverse"], [420, 1, 1, "", "rolling_apply"], [421, 1, 1, "", "rolling_max"], [422, 1, 1, "", "rolling_mean"], [423, 1, 1, "", "rolling_median"], [424, 1, 1, "", "rolling_min"], [425, 1, 1, "", "rolling_quantile"], [426, 1, 1, "", "rolling_skew"], [427, 1, 1, "", "rolling_std"], [428, 1, 1, "", "rolling_sum"], [429, 1, 1, "", "rolling_var"], [430, 1, 1, "", "round"], [431, 1, 1, "", "sample"], [432, 1, 1, "", "search_sorted"], [433, 1, 1, "", "set_sorted"], [434, 1, 1, "", "shift"], [435, 1, 1, "", "shift_and_fill"], [436, 1, 1, "", "shrink_dtype"], [437, 1, 1, "", "shuffle"], [438, 1, 1, "", "sign"], [439, 1, 1, "", "sin"], [440, 1, 1, "", "sinh"], [441, 1, 1, "", "skew"], [442, 1, 1, "", "slice"], [443, 1, 1, "", "sort"], [444, 1, 1, "", "sort_by"], [445, 1, 1, "", "sqrt"], [446, 1, 1, "", "std"], [479, 1, 1, "", "suffix"], [480, 1, 1, "", "sum"], [481, 1, 1, "", "tail"], [482, 1, 1, "", "take"], [483, 1, 1, "", "take_every"], [484, 1, 1, "", "tan"], [485, 1, 1, "", "tanh"], [486, 1, 1, "", "to_physical"], [487, 1, 1, "", "top_k"], [488, 1, 1, "", "unique"], [489, 1, 1, "", "unique_counts"], [490, 1, 1, "", "upper_bound"], [491, 1, 1, "", "value_counts"], [492, 1, 1, "", "var"], [493, 1, 1, "", "where"]], "polars.Expr.arr": [[267, 1, 1, "", "arg_max"], [268, 1, 1, "", "arg_min"], [269, 1, 1, "", "concat"], [270, 1, 1, "", "contains"], [271, 1, 1, "", "count_match"], [272, 1, 1, "", "diff"], [273, 1, 1, "", "eval"], [274, 1, 1, "", "explode"], [275, 1, 1, "", "first"], [276, 1, 1, "", "get"], [277, 1, 1, "", "head"], [278, 1, 1, "", "join"], [279, 1, 1, "", "last"], [280, 1, 1, "", "lengths"], [281, 1, 1, "", "max"], [282, 1, 1, "", "mean"], [283, 1, 1, "", "min"], [284, 1, 1, "", "reverse"], [285, 1, 1, "", "shift"], [286, 1, 1, "", "slice"], [287, 1, 1, "", "sort"], [288, 1, 1, "", "sum"], [289, 1, 1, "", "tail"], [290, 1, 1, "", "take"], [291, 1, 1, "", "to_struct"], [292, 1, 1, "", "unique"]], "polars.Expr.bin": [[294, 1, 1, "", "contains"], [295, 1, 1, "", "decode"], [296, 1, 1, "", "encode"], [297, 1, 1, "", "ends_with"], [298, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[300, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[318, 1, 1, "", "cast_time_unit"], [319, 1, 1, "", "combine"], [320, 1, 1, "", "convert_time_zone"], [321, 1, 1, "", "day"], [322, 1, 1, "", "days"], [323, 1, 1, "", "epoch"], [324, 1, 1, "", "hour"], [325, 1, 1, "", "hours"], [326, 1, 1, "", "iso_year"], [327, 1, 1, "", "microsecond"], [328, 1, 1, "", "microseconds"], [329, 1, 1, "", "millisecond"], [330, 1, 1, "", "milliseconds"], [331, 1, 1, "", "minute"], [332, 1, 1, "", "minutes"], [333, 1, 1, "", "month"], [334, 1, 1, "", "nanosecond"], [335, 1, 1, "", "nanoseconds"], [336, 1, 1, "", "offset_by"], [337, 1, 1, "", "ordinal_day"], [338, 1, 1, "", "quarter"], [339, 1, 1, "", "replace_time_zone"], [340, 1, 1, "", "round"], [341, 1, 1, "", "second"], [342, 1, 1, "", "seconds"], [343, 1, 1, "", "strftime"], [344, 1, 1, "", "timestamp"], [345, 1, 1, "", "truncate"], [346, 1, 1, "", "week"], [347, 1, 1, "", "weekday"], [348, 1, 1, "", "with_time_unit"], [349, 1, 1, "", "year"]], "polars.Expr.meta": [[396, 1, 1, "", "has_multiple_outputs"], [397, 1, 1, "", "is_regex_projection"], [398, 1, 1, "", "output_name"], [399, 1, 1, "", "pop"], [400, 1, 1, "", "root_names"], [401, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[447, 1, 1, "", "concat"], [448, 1, 1, "", "contains"], [449, 1, 1, "", "count_match"], [450, 1, 1, "", "decode"], [451, 1, 1, "", "encode"], [452, 1, 1, "", "ends_with"], [453, 1, 1, "", "explode"], [454, 1, 1, "", "extract"], [455, 1, 1, "", "extract_all"], [456, 1, 1, "", "json_extract"], [457, 1, 1, "", "json_path_match"], [458, 1, 1, "", "lengths"], [459, 1, 1, "", "ljust"], [460, 1, 1, "", "lstrip"], [461, 1, 1, "", "n_chars"], [462, 1, 1, "", "parse_int"], [463, 1, 1, "", "replace"], [464, 1, 1, "", "replace_all"], [465, 1, 1, "", "rjust"], [466, 1, 1, "", "rstrip"], [467, 1, 1, "", "slice"], [468, 1, 1, "", "split"], [469, 1, 1, "", "split_exact"], [470, 1, 1, "", "splitn"], [471, 1, 1, "", "starts_with"], [472, 1, 1, "", "strip"], [473, 1, 1, "", "strptime"], [474, 1, 1, "", "to_lowercase"], [475, 1, 1, "", "to_uppercase"], [476, 1, 1, "", "zfill"]], "polars.Expr.struct": [[477, 1, 1, "", "field"], [478, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[560, 1, 1, "", "cache"], [561, 1, 1, "", "clear"], [562, 1, 1, "", "clone"], [563, 1, 1, "", "collect"], [564, 2, 1, "", "columns"], [565, 1, 1, "", "drop"], [566, 1, 1, "", "drop_nulls"], [567, 2, 1, "", "dtypes"], [568, 1, 1, "", "explain"], [569, 1, 1, "", "explode"], [570, 1, 1, "", "fetch"], [571, 1, 1, "", "fill_nan"], [572, 1, 1, "", "fill_null"], [573, 1, 1, "", "filter"], [574, 1, 1, "", "first"], [575, 1, 1, "", "from_json"], [576, 1, 1, "", "groupby"], [577, 1, 1, "", "groupby_dynamic"], [578, 1, 1, "", "groupby_rolling"], [579, 1, 1, "", "head"], [580, 1, 1, "", "inspect"], [581, 1, 1, "", "interpolate"], [582, 1, 1, "", "join"], [583, 1, 1, "", "join_asof"], [584, 1, 1, "", "last"], [585, 1, 1, "", "lazy"], [586, 1, 1, "", "limit"], [587, 1, 1, "", "map"], [588, 1, 1, "", "max"], [589, 1, 1, "", "mean"], [590, 1, 1, "", "median"], [591, 1, 1, "", "melt"], [592, 1, 1, "", "merge_sorted"], [593, 1, 1, "", "min"], [594, 1, 1, "", "pipe"], [595, 1, 1, "", "profile"], [596, 1, 1, "", "quantile"], [597, 1, 1, "", "read_json"], [598, 1, 1, "", "rename"], [599, 1, 1, "", "reverse"], [600, 2, 1, "", "schema"], [601, 1, 1, "", "select"], [602, 1, 1, "", "shift"], [603, 1, 1, "", "shift_and_fill"], [604, 1, 1, "", "show_graph"], [605, 1, 1, "", "sink_ipc"], [606, 1, 1, "", "sink_parquet"], [607, 1, 1, "", "slice"], [608, 1, 1, "", "sort"], [609, 1, 1, "", "std"], [610, 1, 1, "", "sum"], [611, 1, 1, "", "tail"], [612, 1, 1, "", "take_every"], [613, 1, 1, "", "unique"], [614, 1, 1, "", "unnest"], [615, 1, 1, "", "update"], [616, 1, 1, "", "var"], [617, 2, 1, "", "width"], [618, 1, 1, "", "with_columns"], [619, 1, 1, "", "with_context"], [620, 1, 1, "", "with_row_count"], [621, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"]], "polars.Series": [[644, 1, 1, "", "abs"], [645, 1, 1, "", "alias"], [646, 1, 1, "", "all"], [647, 1, 1, "", "any"], [648, 1, 1, "", "append"], [649, 1, 1, "", "apply"], [650, 1, 1, "", "arccos"], [651, 1, 1, "", "arccosh"], [652, 1, 1, "", "arcsin"], [653, 1, 1, "", "arcsinh"], [654, 1, 1, "", "arctan"], [655, 1, 1, "", "arctanh"], [656, 1, 1, "", "arg_max"], [657, 1, 1, "", "arg_min"], [658, 1, 1, "", "arg_sort"], [659, 1, 1, "", "arg_true"], [660, 1, 1, "", "arg_unique"], [661, 1, 1, "", "argsort"], [662, 3, 1, "", "arr"], [694, 1, 1, "", "cast"], [695, 3, 1, "", "cat"], [697, 1, 1, "", "ceil"], [698, 1, 1, "", "chunk_lengths"], [699, 1, 1, "", "clear"], [700, 1, 1, "", "clip"], [701, 1, 1, "", "clip_max"], [702, 1, 1, "", "clip_min"], [703, 1, 1, "", "clone"], [704, 1, 1, "", "cos"], [705, 1, 1, "", "cosh"], [706, 1, 1, "", "cummax"], [707, 1, 1, "", "cummin"], [708, 1, 1, "", "cumprod"], [709, 1, 1, "", "cumsum"], [710, 1, 1, "", "cumulative_eval"], [711, 1, 1, "", "cut"], [712, 1, 1, "", "describe"], [713, 1, 1, "", "diff"], [714, 1, 1, "", "dot"], [715, 1, 1, "", "drop_nans"], [716, 1, 1, "", "drop_nulls"], [717, 3, 1, "", "dt"], [754, 3, 1, "", "dtype"], [755, 1, 1, "", "entropy"], [756, 1, 1, "", "estimated_size"], [757, 1, 1, "", "ewm_mean"], [758, 1, 1, "", "ewm_std"], [759, 1, 1, "", "ewm_var"], [760, 1, 1, "", "exp"], [761, 1, 1, "", "explode"], [762, 1, 1, "", "extend_constant"], [763, 1, 1, "", "fill_nan"], [764, 1, 1, "", "fill_null"], [765, 1, 1, "", "filter"], [766, 3, 1, "", "flags"], [767, 1, 1, "", "floor"], [768, 1, 1, "", "get_chunks"], [769, 1, 1, "", "has_validity"], [770, 1, 1, "", "hash"], [771, 1, 1, "", "head"], [772, 3, 1, "", "inner_dtype"], [773, 1, 1, "", "interpolate"], [774, 1, 1, "", "is_between"], [775, 1, 1, "", "is_boolean"], [776, 1, 1, "", "is_duplicated"], [777, 1, 1, "", "is_empty"], [778, 1, 1, "", "is_finite"], [779, 1, 1, "", "is_first"], [780, 1, 1, "", "is_float"], [781, 1, 1, "", "is_in"], [782, 1, 1, "", "is_infinite"], [783, 1, 1, "", "is_nan"], [784, 1, 1, "", "is_not_nan"], [785, 1, 1, "", "is_not_null"], [786, 1, 1, "", "is_null"], [787, 1, 1, "", "is_numeric"], [788, 1, 1, "", "is_sorted"], [789, 1, 1, "", "is_temporal"], [790, 1, 1, "", "is_unique"], [791, 1, 1, "", "is_utf8"], [792, 1, 1, "", "item"], [793, 1, 1, "", "kurtosis"], [794, 1, 1, "", "len"], [795, 1, 1, "", "limit"], [796, 1, 1, "", "log"], [797, 1, 1, "", "log10"], [798, 1, 1, "", "lower_bound"], [799, 1, 1, "", "map_dict"], [800, 1, 1, "", "max"], [801, 1, 1, "", "mean"], [802, 1, 1, "", "median"], [803, 1, 1, "", "min"], [804, 1, 1, "", "mode"], [805, 1, 1, "", "n_chunks"], [806, 1, 1, "", "n_unique"], [807, 3, 1, "", "name"], [808, 1, 1, "", "nan_max"], [809, 1, 1, "", "nan_min"], [810, 1, 1, "", "new_from_index"], [811, 1, 1, "", "null_count"], [812, 1, 1, "", "pct_change"], [813, 1, 1, "", "peak_max"], [814, 1, 1, "", "peak_min"], [815, 1, 1, "", "product"], [816, 1, 1, "", "quantile"], [817, 1, 1, "", "rank"], [818, 1, 1, "", "rechunk"], [819, 1, 1, "", "reinterpret"], [820, 1, 1, "", "rename"], [821, 1, 1, "", "reshape"], [822, 1, 1, "", "reverse"], [823, 1, 1, "", "rolling_apply"], [824, 1, 1, "", "rolling_max"], [825, 1, 1, "", "rolling_mean"], [826, 1, 1, "", "rolling_median"], [827, 1, 1, "", "rolling_min"], [828, 1, 1, "", "rolling_quantile"], [829, 1, 1, "", "rolling_skew"], [830, 1, 1, "", "rolling_std"], [831, 1, 1, "", "rolling_sum"], [832, 1, 1, "", "rolling_var"], [833, 1, 1, "", "round"], [834, 1, 1, "", "sample"], [835, 1, 1, "", "search_sorted"], [836, 1, 1, "", "series_equal"], [837, 1, 1, "", "set"], [838, 1, 1, "", "set_at_idx"], [839, 1, 1, "", "set_sorted"], [840, 3, 1, "", "shape"], [841, 1, 1, "", "shift"], [842, 1, 1, "", "shift_and_fill"], [843, 1, 1, "", "shrink_dtype"], [844, 1, 1, "", "shrink_to_fit"], [845, 1, 1, "", "shuffle"], [846, 1, 1, "", "sign"], [847, 1, 1, "", "sin"], [848, 1, 1, "", "sinh"], [849, 1, 1, "", "skew"], [850, 1, 1, "", "slice"], [851, 1, 1, "", "sort"], [852, 1, 1, "", "sqrt"], [853, 1, 1, "", "std"], [854, 3, 1, "", "str"], [889, 1, 1, "", "sum"], [890, 1, 1, "", "tail"], [891, 1, 1, "", "take"], [892, 1, 1, "", "take_every"], [893, 1, 1, "", "tan"], [894, 1, 1, "", "tanh"], [895, 3, 1, "", "time_unit"], [896, 1, 1, "", "to_arrow"], [897, 1, 1, "", "to_dummies"], [898, 1, 1, "", "to_frame"], [899, 1, 1, "", "to_list"], [900, 1, 1, "", "to_numpy"], [901, 1, 1, "", "to_pandas"], [902, 1, 1, "", "to_physical"], [903, 1, 1, "", "top_k"], [904, 1, 1, "", "unique"], [905, 1, 1, "", "unique_counts"], [906, 1, 1, "", "upper_bound"], [907, 1, 1, "", "value_counts"], [908, 1, 1, "", "var"], [909, 1, 1, "", "view"], [910, 1, 1, "", "zip_with"]], "polars.Series.arr": [[663, 1, 1, "", "arg_max"], [664, 1, 1, "", "arg_min"], [665, 1, 1, "", "concat"], [666, 1, 1, "", "contains"], [667, 1, 1, "", "count_match"], [668, 1, 1, "", "diff"], [669, 1, 1, "", "eval"], [670, 1, 1, "", "explode"], [671, 1, 1, "", "first"], [672, 1, 1, "", "get"], [673, 1, 1, "", "head"], [674, 1, 1, "", "join"], [675, 1, 1, "", "last"], [676, 1, 1, "", "lengths"], [677, 1, 1, "", "max"], [678, 1, 1, "", "mean"], [679, 1, 1, "", "min"], [680, 1, 1, "", "reverse"], [681, 1, 1, "", "shift"], [682, 1, 1, "", "slice"], [683, 1, 1, "", "sort"], [684, 1, 1, "", "sum"], [685, 1, 1, "", "tail"], [686, 1, 1, "", "take"], [687, 1, 1, "", "to_struct"], [688, 1, 1, "", "unique"]], "polars.Series.bin": [[689, 1, 1, "", "contains"], [690, 1, 1, "", "decode"], [691, 1, 1, "", "encode"], [692, 1, 1, "", "ends_with"], [693, 1, 1, "", "starts_with"]], "polars.Series.cat": [[696, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[718, 1, 1, "", "cast_time_unit"], [719, 1, 1, "", "combine"], [720, 1, 1, "", "convert_time_zone"], [721, 1, 1, "", "day"], [722, 1, 1, "", "days"], [723, 1, 1, "", "epoch"], [724, 1, 1, "", "hour"], [725, 1, 1, "", "hours"], [726, 1, 1, "", "iso_year"], [727, 1, 1, "", "max"], [728, 1, 1, "", "mean"], [729, 1, 1, "", "median"], [730, 1, 1, "", "microsecond"], [731, 1, 1, "", "microseconds"], [732, 1, 1, "", "millisecond"], [733, 1, 1, "", "milliseconds"], [734, 1, 1, "", "min"], [735, 1, 1, "", "minute"], [736, 1, 1, "", "minutes"], [737, 1, 1, "", "month"], [738, 1, 1, "", "nanosecond"], [739, 1, 1, "", "nanoseconds"], [740, 1, 1, "", "offset_by"], [741, 1, 1, "", "ordinal_day"], [742, 1, 1, "", "quarter"], [743, 1, 1, "", "replace_time_zone"], [744, 1, 1, "", "round"], [745, 1, 1, "", "second"], [746, 1, 1, "", "seconds"], [747, 1, 1, "", "strftime"], [748, 1, 1, "", "timestamp"], [749, 1, 1, "", "truncate"], [750, 1, 1, "", "week"], [751, 1, 1, "", "weekday"], [752, 1, 1, "", "with_time_unit"], [753, 1, 1, "", "year"]], "polars.Series.str": [[855, 1, 1, "", "concat"], [856, 1, 1, "", "contains"], [857, 1, 1, "", "count_match"], [858, 1, 1, "", "decode"], [859, 1, 1, "", "encode"], [860, 1, 1, "", "ends_with"], [861, 1, 1, "", "explode"], [862, 1, 1, "", "extract"], [863, 1, 1, "", "extract_all"], [864, 1, 1, "", "json_extract"], [865, 1, 1, "", "json_path_match"], [866, 1, 1, "", "lengths"], [867, 1, 1, "", "ljust"], [868, 1, 1, "", "lstrip"], [869, 1, 1, "", "n_chars"], [870, 1, 1, "", "parse_int"], [871, 1, 1, "", "replace"], [872, 1, 1, "", "replace_all"], [873, 1, 1, "", "rjust"], [874, 1, 1, "", "rstrip"], [875, 1, 1, "", "slice"], [876, 1, 1, "", "split"], [877, 1, 1, "", "split_exact"], [878, 1, 1, "", "splitn"], [879, 1, 1, "", "starts_with"], [880, 1, 1, "", "strip"], [881, 1, 1, "", "strptime"], [882, 1, 1, "", "to_lowercase"], [883, 1, 1, "", "to_uppercase"], [884, 1, 1, "", "zfill"]], "polars.Series.struct": [[885, 1, 1, "", "field"], [886, 3, 1, "", "fields"], [887, 1, 1, "", "rename_fields"], [888, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.Struct": [[52, 1, 1, "", "__init__"]], "polars.Time": [[53, 1, 1, "", "__init__"]], "polars.UInt16": [[54, 1, 1, "", "__init__"]], "polars.UInt32": [[55, 1, 1, "", "__init__"]], "polars.UInt64": [[56, 1, 1, "", "__init__"]], "polars.UInt8": [[57, 1, 1, "", "__init__"]], "polars.Unknown": [[58, 1, 1, "", "__init__"]], "polars.Utf8": [[59, 1, 1, "", "__init__"]], "polars.api": [[61, 4, 1, "", "register_dataframe_namespace"], [62, 4, 1, "", "register_expr_namespace"], [63, 4, 1, "", "register_lazyframe_namespace"], [64, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[221, 1, 1, "", "__iter__"], [222, 1, 1, "", "agg"], [223, 1, 1, "", "all"], [224, 1, 1, "", "apply"], [225, 1, 1, "", "count"], [226, 1, 1, "", "first"], [227, 1, 1, "", "head"], [228, 1, 1, "", "last"], [229, 1, 1, "", "max"], [230, 1, 1, "", "mean"], [231, 1, 1, "", "median"], [232, 1, 1, "", "min"], [233, 1, 1, "", "n_unique"], [234, 1, 1, "", "quantile"], [235, 1, 1, "", "sum"], [236, 1, 1, "", "tail"]], "polars.exceptions": [[71, 5, 1, "", "ArrowError"], [72, 5, 1, "", "ColumnNotFoundError"], [73, 5, 1, "", "ComputeError"], [74, 5, 1, "", "DuplicateError"], [75, 5, 1, "", "InvalidOperationError"], [76, 5, 1, "", "NoDataError"], [77, 5, 1, "", "NoRowsReturned"], [78, 5, 1, "", "PanicException"], [79, 5, 1, "", "RowsException"], [80, 5, 1, "", "SchemaError"], [81, 5, 1, "", "SchemaFieldNotFoundError"], [82, 5, 1, "", "ShapeError"], [83, 5, 1, "", "StructFieldNotFoundError"], [84, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[94, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[622, 1, 1, "", "agg"], [623, 1, 1, "", "all"], [624, 1, 1, "", "apply"], [625, 1, 1, "", "count"], [626, 1, 1, "", "first"], [627, 1, 1, "", "head"], [628, 1, 1, "", "last"], [629, 1, 1, "", "max"], [630, 1, 1, "", "mean"], [631, 1, 1, "", "median"], [632, 1, 1, "", "min"], [633, 1, 1, "", "n_unique"], [634, 1, 1, "", "quantile"], [635, 1, 1, "", "sum"], [636, 1, 1, "", "tail"]], "polars.testing": [[115, 4, 1, "", "assert_frame_equal"], [116, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[117, 0, 1, "", "column"], [118, 4, 1, "", "columns"], [119, 4, 1, "", "dataframes"], [120, 4, 1, "", "series"]], "polars.testing.parametric.column": [[117, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 139], "api": [1, 61, 62, 63, 64, 557], "provid": 1, "new": 1, "function": [1, 546, 556], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910], "binari": [2, 541, 912], "boolean": [3, 542, 913], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 124], "activate_decim": 5, "load": [6, 124], "restore_default": 7, "save": [8, 124], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 124], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 242], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 621], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 510], "datetim": [36, 511], "decim": 37, "durat": [38, 512], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 386, 521, 548, 919], "null": 46, "object": 47, "sqlcontext": [48, 49, 50], "execut": 48, "queri": 49, "regist": 50, "stringcach": [51, 556], "struct": [52, 477, 478, 536, 553, 885, 886, 887, 888, 923], "time": 53, "uint16": 54, "uint32": 55, "uint64": 56, "uint8": 57, "unknown": 58, "utf8": 59, "align_fram": 60, "register_dataframe_namespac": 61, "register_expr_namespac": 62, "register_lazyframe_namespac": 63, "register_series_namespac": 64, "arg_wher": 65, "build_info": 66, "collect_al": 67, "concat": [68, 269, 447, 665, 855], "cut": [69, 711], "date_rang": 70, "except": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 246], "arrowerror": 71, "columnnotfounderror": 72, "computeerror": 73, "duplicateerror": 74, "invalidoperationerror": 75, "nodataerror": 76, "norowsreturn": 77, "panicexcept": 78, "rowsexcept": 79, "schemaerror": 80, "schemafieldnotfounderror": 81, "shapeerror": 82, "structfieldnotfounderror": 83, "toomanyrowsreturn": 84, "from_arrow": 85, "from_datafram": 86, "from_dict": [87, 88], "from_numpi": 89, "from_panda": 90, "from_record": 91, "get_dummi": 92, "get_index_typ": 93, "intern": 94, "batch": 94, "batchedcsvread": [94, 558], "next_batch": 94, "ones": 95, "read_avro": 96, "read_csv": 97, "read_csv_batch": 98, "read_databas": 99, "read_delta": 100, "read_excel": 101, "read_ipc": 102, "read_ipc_schema": 103, "read_json": [104, 597], "read_ndjson": 105, "read_parquet": 106, "read_parquet_schema": 107, "scan_csv": 108, "scan_delta": 109, "scan_ipc": 110, "scan_ndjson": 111, "scan_parquet": 112, "scan_pyarrow_dataset": 113, "show_vers": 114, "test": [115, 116, 117, 118, 119, 120, 926], "assert_frame_equ": 115, "assert_series_equ": 116, "parametr": [117, 118, 119, 120], "column": [117, 118, 130, 544, 564], "seri": [120, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 918], "threadpool_s": 121, "toggle_string_cach": 122, "zero": 123, "option": 124, "current": 124, "us": 124, "context": 124, "manag": 124, "aggreg": [125, 247, 559, 643], "__dataframe__": 126, "appli": [127, 224, 254, 496, 624, 649], "clear": [128, 561, 699], "clone": [129, 562, 703], "corr": [131, 504], "describ": [132, 712], "drop": [133, 565], "drop_in_plac": 134, "drop_nul": [135, 317, 566, 716], "dtype": [136, 567, 754], "estimated_s": [137, 756], "explod": [138, 274, 356, 453, 569, 670, 761, 861], "fill_nan": [140, 358, 571, 763], "fill_nul": [141, 359, 572, 764], "filter": [142, 360, 573, 765], "find_idx_by_nam": 143, "fold": [144, 516], "frame_equ": 145, "get_column": [146, 147], "glimps": 148, "groupbi": [149, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 576, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639], "groupby_dynam": [150, 577], "groupby_rol": [151, 578], "hash_row": 152, "head": [153, 227, 277, 366, 520, 579, 627, 673, 771], "height": 154, "hstack": 155, "insert_at_idx": 156, "interpol": [157, 368, 581, 773], "is_dupl": [158, 370, 776], "is_empti": [159, 777], "is_uniqu": [160, 380, 790], "item": [161, 792], "iter_row": 162, "iter_slic": 163, "join": [164, 278, 582, 674], "join_asof": [165, 583], "lazi": [166, 556, 585], "limit": [167, 385, 586, 795], "max": [168, 229, 281, 393, 524, 588, 629, 677, 727, 800], "mean": [169, 230, 282, 394, 525, 589, 630, 678, 728, 801], "median": [170, 231, 395, 526, 590, 631, 729, 802], "melt": [171, 591], "merge_sort": [172, 592], "min": [173, 232, 283, 402, 527, 593, 632, 679, 734, 803], "n_chunk": [174, 805], "n_uniqu": [175, 233, 404, 528, 633, 806], "null_count": [176, 407, 811], "partition_bi": 177, "pipe": [178, 594], "pivot": 179, "product": [180, 412, 815], "quantil": [181, 234, 413, 530, 596, 634, 816], "rechunk": [182, 415, 818], "renam": [183, 598, 820], "replac": [184, 463, 871], "replace_at_idx": 185, "revers": [186, 284, 419, 599, 680, 822], "row": [187, 188], "sampl": [189, 431, 834], "schema": [190, 600], "select": [191, 244, 533, 551, 601, 642, 921], "shape": [192, 840], "shift": [193, 285, 434, 602, 681, 841], "shift_and_fil": [194, 435, 603, 842], "shrink_to_fit": [195, 844], "slice": [196, 286, 442, 467, 607, 682, 850, 875], "sort": [197, 287, 443, 608, 683, 851], "std": [198, 446, 535, 609, 853], "sum": [199, 235, 288, 480, 537, 610, 635, 684, 889], "tail": [200, 236, 289, 481, 538, 611, 636, 685, 890], "take_everi": [201, 483, 612, 892], "to_arrow": [202, 896], "to_dict": [203, 204], "to_dummi": [205, 897], "to_numpi": [206, 900], "to_panda": [207, 901], "to_seri": 208, "to_struct": [209, 291, 687], "transpos": 210, "uniqu": [211, 292, 488, 613, 688, 904], "unnest": [212, 614, 888], "unstack": 213, "updat": [214, 615], "upsampl": 215, "var": [216, 492, 539, 616, 908], "vstack": 217, "width": [218, 617], "with_column": [219, 618], "with_row_count": [220, 620], "__iter__": 221, "agg": [222, 622], "all": [223, 251, 494, 623, 646], "count": [225, 307, 505, 625], "first": [226, 275, 361, 515, 574, 626, 671], "last": [228, 279, 383, 584, 628, 675], "attribut": [237, 637, 911], "comput": [238, 545, 915], "descript": [239, 638, 916], "export": [240, 917], "miscellan": [243, 550, 556, 641, 920], "manipul": [244, 551, 642, 921], "data": 245, "type": 245, "numer": 245, "tempor": [245, 554, 924], "nest": 245, "other": 245, "expr": [248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], "ab": [248, 644], "agg_group": 249, "alia": [250, 645], "ani": [252, 495, 647], "append": [253, 648], "arcco": [255, 650], "arccosh": [256, 651], "arcsin": [257, 652], "arcsinh": [258, 653], "arctan": [259, 654], "arctanh": [260, 655], "arg_max": [261, 267, 656, 663], "arg_min": [262, 268, 657, 664], "arg_sort": [263, 658], "arg_tru": [264, 659], "arg_uniqu": [265, 660], "argsort": [266, 661], "arr": [267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688], "contain": [270, 294, 448, 666, 689, 856], "count_match": [271, 449, 667, 857], "diff": [272, 314, 668, 713], "eval": [273, 669], "get": [276, 672], "length": [280, 458, 676, 866], "take": [290, 482, 686, 891], "backward_fil": 293, "bin": [294, 295, 296, 297, 298, 689, 690, 691, 692, 693], "decod": [295, 450, 690, 858], "encod": [296, 451, 691, 859], "ends_with": [297, 452, 692, 860], "starts_with": [298, 471, 693, 879], "cast": [299, 694], "cat": [300, 695, 696], "set_ord": [300, 696], "ceil": [301, 697], "clip": [302, 700], "clip_max": [303, 701], "clip_min": [304, 702], "co": [305, 704], "cosh": [306, 705], "cumcount": 308, "cummax": [309, 706], "cummin": [310, 707], "cumprod": [311, 708], "cumsum": [312, 509, 709], "cumulative_ev": [313, 710], "dot": [315, 714], "drop_nan": [316, 715], "dt": [318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753], "cast_time_unit": [318, 718], "combin": [319, 719], "convert_time_zon": [320, 720], "dai": [321, 322, 721, 722], "epoch": [323, 723], "hour": [324, 325, 724, 725], "iso_year": [326, 726], "microsecond": [327, 328, 730, 731], "millisecond": [329, 330, 732, 733], "minut": [331, 332, 735, 736], "month": [333, 737], "nanosecond": [334, 335, 738, 739], "offset_bi": [336, 740], "ordinal_dai": [337, 741], "quarter": [338, 742], "replace_time_zon": [339, 743], "round": [340, 430, 744, 833], "second": [341, 342, 745, 746], "strftime": [343, 747], "timestamp": [344, 748], "truncat": [345, 749], "week": [346, 750], "weekdai": [347, 751], "with_time_unit": [348, 752], "year": [349, 753], "entropi": [350, 755], "ewm_mean": [351, 757], "ewm_std": [352, 758], "ewm_var": [353, 759], "exclud": [354, 514], "exp": [355, 760], "extend_const": [357, 762], "flatten": 362, "floor": [363, 767], "forward_fil": 364, "hash": [365, 770], "inspect": [367, 580], "is_between": [369, 774], "is_finit": [371, 778], "is_first": [372, 779], "is_in": [373, 781], "is_infinit": [374, 782], "is_nan": [375, 783], "is_not": 376, "is_not_nan": [377, 784], "is_not_nul": [378, 785], "is_nul": [379, 786], "keep_nam": 381, "kurtosi": [382, 793], "len": [384, 794], "log": [387, 796], "log10": [388, 797], "lower_bound": [389, 798], "map": [390, 523, 587], "map_alia": 391, "map_dict": [392, 799], "meta": [396, 397, 398, 399, 400, 401, 549], "has_multiple_output": 396, "is_regex_project": 397, "output_nam": 398, "pop": 399, "root_nam": 400, "undo_alias": 401, "mode": [403, 804], "nan_max": [405, 808], "nan_min": [406, 809], "over": 408, "pct_chang": [409, 812], "pow": 410, "prefix": 411, "rank": [414, 817], "reinterpret": [416, 819], "repeat_bi": 417, "reshap": [418, 821], "rolling_appli": [420, 823], "rolling_max": [421, 824], "rolling_mean": [422, 825], "rolling_median": [423, 826], "rolling_min": [424, 827], "rolling_quantil": [425, 828], "rolling_skew": [426, 829], "rolling_std": [427, 830], "rolling_sum": [428, 831], "rolling_var": [429, 832], "search_sort": [432, 835], "set_sort": [433, 839], "shrink_dtyp": [436, 843], "shuffl": [437, 845], "sign": [438, 846], "sin": [439, 847], "sinh": [440, 848], "skew": [441, 849], "sort_bi": 444, "sqrt": [445, 852], "str": [447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884], "extract": [454, 862], "extract_al": [455, 863], "json_extract": [456, 864], "json_path_match": [457, 865], "ljust": [459, 867], "lstrip": [460, 868], "n_char": [461, 869], "parse_int": [462, 870], "replace_al": [464, 872], "rjust": [465, 873], "rstrip": [466, 874], "split": [468, 876], "split_exact": [469, 877], "splitn": [470, 878], "strip": [472, 880], "strptime": [473, 881], "to_lowercas": [474, 882], "to_uppercas": [475, 883], "zfill": [476, 884], "field": [477, 885, 886], "rename_field": [478, 887], "suffix": 479, "tan": [484, 893], "tanh": [485, 894], "to_phys": [486, 902], "top_k": [487, 903], "unique_count": [489, 905], "upper_bound": [490, 906], "value_count": [491, 907], "where": 493, "arang": 497, "arg_sort_bi": 498, "avg": 499, "coalesc": 500, "col": 501, "concat_list": 502, "concat_str": 503, "cov": 506, "cumfold": 507, "cumreduc": 508, "element": 513, "format": 517, "from_epoch": 518, "group": 519, "lit": 522, "pearson_corr": 529, "reduc": 531, "repeat": 532, "spearman_rank_corr": 534, "when": 540, "categori": [543, 914], "name": [544, 807], "express": 547, "string": [552, 922], "window": 555, "convers": 556, "eager": 556, "parallel": 556, "refer": 557, "input": 558, "output": 558, "csv": 558, "feather": 558, "ipc": 558, "parquet": 558, "databas": 558, "json": 558, "avro": 558, "excel": 558, "delta": 558, "lake": 558, "dataset": 558, "lazyfram": [560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 640], "cach": 560, "collect": 563, "explain": 568, "fetch": 570, "from_json": 575, "profil": 595, "show_graph": 604, "sink_ipc": 605, "sink_parquet": 606, "with_context": 619, "lazygroupbi": [622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636], "read": 641, "write": 641, "logic": 641, "plan": 641, "chunk_length": 698, "flag": 766, "get_chunk": 768, "has_valid": 769, "inner_dtyp": 772, "is_boolean": 775, "is_float": 780, "is_numer": 787, "is_sort": 788, "is_tempor": 789, "is_utf8": 791, "new_from_index": 810, "peak_max": 813, "peak_min": 814, "series_equ": 836, "set": 837, "set_at_idx": 838, "time_unit": 895, "to_fram": 898, "to_list": 899, "view": 909, "zip_with": 910, "sql": 925, "method": 925, "assert": 926, "properti": 926, "base": 926, "strategi": 926, "helper": 926, "util": 927}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.align_frames": [[60, "polars-align-frames"]], "polars.api.register_expr_namespace": [[62, "polars-api-register-expr-namespace"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.DataType": [[34, "polars-datatype"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.api.register_lazyframe_namespace": [[63, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Int16": [[41, "polars-int16"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Int8": [[44, "polars-int8"]], "polars.UInt16": [[54, "polars-uint16"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.Float32": [[39, "polars-float32"]], "polars.build_info": [[66, "polars-build-info"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.api.register_series_namespace": [[64, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Date": [[35, "polars-date"]], "polars.UInt8": [[57, "polars-uint8"]], "polars.UInt64": [[56, "polars-uint64"]], "polars.StringCache": [[51, "polars-stringcache"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.Struct": [[52, "polars-struct"]], "polars.arg_where": [[65, "polars-arg-where"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.UInt32": [[55, "polars-uint32"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Object": [[47, "polars-object"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.api.register_dataframe_namespace": [[61, "polars-api-register-dataframe-namespace"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.Binary": [[2, "polars-binary"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.Int32": [[42, "polars-int32"]], "polars.Null": [[46, "polars-null"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.Float64": [[40, "polars-float64"]], "polars.Duration": [[38, "polars-duration"]], "polars.Utf8": [[59, "polars-utf8"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.List": [[45, "polars-list"]], "polars.Unknown": [[58, "polars-unknown"]], "polars.collect_all": [[67, "polars-collect-all"]], "polars.Time": [[53, "polars-time"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.Int64": [[43, "polars-int64"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.exceptions.NoRowsReturned": [[77, "polars-exceptions-norowsreturned"]], "polars.read_csv": [[97, "polars-read-csv"]], "polars.scan_ipc": [[110, "polars-scan-ipc"]], "polars.threadpool_size": [[121, "polars-threadpool-size"]], "polars.scan_pyarrow_dataset": [[113, "polars-scan-pyarrow-dataset"]], "polars.get_index_type": [[93, "polars-get-index-type"]], "polars.show_versions": [[114, "polars-show-versions"]], "polars.read_ndjson": [[105, "polars-read-ndjson"]], "polars.toggle_string_cache": [[122, "polars-toggle-string-cache"]], "polars.read_parquet": [[106, "polars-read-parquet"]], "polars.testing.assert_frame_equal": [[115, "polars-testing-assert-frame-equal"]], "polars.date_range": [[70, "polars-date-range"]], "polars.scan_parquet": [[112, "polars-scan-parquet"]], "polars.read_avro": [[96, "polars-read-avro"]], "polars.DataFrame.__dataframe__": [[126, "polars-dataframe-dataframe"]], "polars.from_numpy": [[89, "polars-from-numpy"]], "polars.cut": [[69, "polars-cut"]], "polars.read_delta": [[100, "polars-read-delta"]], "polars.read_excel": [[101, "polars-read-excel"]], "polars.exceptions.SchemaFieldNotFoundError": [[81, "polars-exceptions-schemafieldnotfounderror"]], "polars.DataFrame.describe": [[132, "polars-dataframe-describe"]], "polars.read_json": [[104, "polars-read-json"]], "polars.concat": [[68, "polars-concat"]], "polars.exceptions.SchemaError": [[80, "polars-exceptions-schemaerror"]], "polars.scan_delta": [[109, "polars-scan-delta"]], "polars.DataFrame.drop": [[133, "polars-dataframe-drop"]], "polars.exceptions.DuplicateError": [[74, "polars-exceptions-duplicateerror"]], "polars.exceptions.NoDataError": [[76, "polars-exceptions-nodataerror"]], "polars.get_dummies": [[92, "polars-get-dummies"]], "Config": [[124, "config"]], "Config options": [[124, "config-options"]], "Config load, save, and current state": [[124, "config-load-save-and-current-state"]], "Use as a context manager": [[124, "use-as-a-context-manager"]], "polars.ones": [[95, "polars-ones"]], "polars.scan_ndjson": [[111, "polars-scan-ndjson"]], "polars.exceptions.ShapeError": [[82, "polars-exceptions-shapeerror"]], "polars.DataFrame.clone": [[129, "polars-dataframe-clone"]], "polars.read_csv_batched": [[98, "polars-read-csv-batched"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[94, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.DataFrame.drop_nulls": [[135, "polars-dataframe-drop-nulls"]], "polars.exceptions.ColumnNotFoundError": [[72, "polars-exceptions-columnnotfounderror"]], "polars.read_database": [[99, "polars-read-database"]], "polars.exceptions.RowsException": [[79, "polars-exceptions-rowsexception"]], "polars.scan_csv": [[108, "polars-scan-csv"]], "polars.read_ipc": [[102, "polars-read-ipc"]], "polars.exceptions.TooManyRowsReturned": [[84, "polars-exceptions-toomanyrowsreturned"]], "polars.read_parquet_schema": [[107, "polars-read-parquet-schema"]], "polars.testing.parametric.dataframes": [[119, "polars-testing-parametric-dataframes"]], "polars.from_records": [[91, "polars-from-records"]], "polars.testing.parametric.series": [[120, "polars-testing-parametric-series"]], "polars.DataFrame.columns": [[130, "polars-dataframe-columns"]], "polars.DataFrame.drop_in_place": [[134, "polars-dataframe-drop-in-place"]], "polars.exceptions.PanicException": [[78, "polars-exceptions-panicexception"]], "polars.DataFrame.corr": [[131, "polars-dataframe-corr"]], "polars.from_dict": [[87, "polars-from-dict"]], "polars.exceptions.ArrowError": [[71, "polars-exceptions-arrowerror"]], "polars.zeros": [[123, "polars-zeros"]], "polars.testing.parametric.columns": [[118, "polars-testing-parametric-columns"]], "polars.exceptions.InvalidOperationError": [[75, "polars-exceptions-invalidoperationerror"]], "polars.from_dicts": [[88, "polars-from-dicts"]], "polars.from_dataframe": [[86, "polars-from-dataframe"]], "polars.testing.assert_series_equal": [[116, "polars-testing-assert-series-equal"]], "polars.from_pandas": [[90, "polars-from-pandas"]], "Aggregation": [[125, "aggregation"], [643, "aggregation"], [559, "aggregation"], [247, "aggregation"]], "polars.DataFrame.clear": [[128, "polars-dataframe-clear"]], "polars.testing.parametric.column": [[117, "polars-testing-parametric-column"]], "polars.exceptions.ComputeError": [[73, "polars-exceptions-computeerror"]], "polars.exceptions.StructFieldNotFoundError": [[83, "polars-exceptions-structfieldnotfounderror"]], "polars.from_arrow": [[85, "polars-from-arrow"]], "polars.read_ipc_schema": [[103, "polars-read-ipc-schema"]], "polars.DataFrame.apply": [[127, "polars-dataframe-apply"]], "polars.Series.str.rstrip": [[874, "polars-series-str-rstrip"]], "polars.Series.str.strip": [[880, "polars-series-str-strip"]], "polars.Series.str.lstrip": [[868, "polars-series-str-lstrip"]], "polars.Series.set_sorted": [[839, "polars-series-set-sorted"]], "polars.Series.str.extract_all": [[863, "polars-series-str-extract-all"]], "polars.Series.shift": [[841, "polars-series-shift"]], "polars.Series.str.contains": [[856, "polars-series-str-contains"]], "polars.Series.rolling_median": [[826, "polars-series-rolling-median"]], "polars.Series.sin": [[847, "polars-series-sin"]], "polars.Series.reverse": [[822, "polars-series-reverse"]], "polars.Series.set_at_idx": [[838, "polars-series-set-at-idx"]], "polars.Series.rolling_mean": [[825, "polars-series-rolling-mean"]], "polars.Series.series_equal": [[836, "polars-series-series-equal"]], "polars.Series.str.to_uppercase": [[883, "polars-series-str-to-uppercase"]], "polars.Series.rolling_apply": [[823, "polars-series-rolling-apply"]], "polars.Series.str.replace_all": [[872, "polars-series-str-replace-all"]], "polars.Series.str.count_match": [[857, "polars-series-str-count-match"]], "polars.Series.str.encode": [[859, "polars-series-str-encode"]], "polars.Series.set": [[837, "polars-series-set"]], "polars.Series.sample": [[834, "polars-series-sample"]], "polars.Series.shape": [[840, "polars-series-shape"]], "polars.Series.str.lengths": [[866, "polars-series-str-lengths"]], "polars.Series.str.explode": [[861, "polars-series-str-explode"]], "polars.Series.str.rjust": [[873, "polars-series-str-rjust"]], "polars.Series.shuffle": [[845, "polars-series-shuffle"]], "polars.Series.rechunk": [[818, "polars-series-rechunk"]], "polars.Series.reshape": [[821, "polars-series-reshape"]], "polars.Series.rename": [[820, "polars-series-rename"]], "polars.Series.str.concat": [[855, "polars-series-str-concat"]], "polars.Series.str.starts_with": [[879, "polars-series-str-starts-with"]], "polars.Series.search_sorted": [[835, "polars-series-search-sorted"]], "polars.Series.std": [[853, "polars-series-std"]], "polars.Series.str.split_exact": [[877, "polars-series-str-split-exact"]], "polars.Series.rank": [[817, "polars-series-rank"]], "polars.Series.str.split": [[876, "polars-series-str-split"]], "polars.Series.str.replace": [[871, "polars-series-str-replace"]], "polars.Series.shrink_to_fit": [[844, "polars-series-shrink-to-fit"]], "polars.Series.rolling_std": [[830, "polars-series-rolling-std"]], "polars.Series.str.decode": [[858, "polars-series-str-decode"]], "polars.Series.rolling_max": [[824, "polars-series-rolling-max"]], "polars.Series.rolling_var": [[832, "polars-series-rolling-var"]], "polars.Series.str.json_path_match": [[865, "polars-series-str-json-path-match"]], "polars.Series.str.ends_with": [[860, "polars-series-str-ends-with"]], "polars.Series.str.ljust": [[867, "polars-series-str-ljust"]], "polars.Series.slice": [[850, "polars-series-slice"]], "polars.Series.rolling_skew": [[829, "polars-series-rolling-skew"]], "polars.Series.skew": [[849, "polars-series-skew"]], "polars.Series.sqrt": [[852, "polars-series-sqrt"]], "polars.Series.str.n_chars": [[869, "polars-series-str-n-chars"]], "polars.Series.str.slice": [[875, "polars-series-str-slice"]], "polars.Series.str.parse_int": [[870, "polars-series-str-parse-int"]], "polars.Series.str.splitn": [[878, "polars-series-str-splitn"]], "polars.Series.rolling_sum": [[831, "polars-series-rolling-sum"]], "polars.Series.quantile": [[816, "polars-series-quantile"]], "polars.Series.reinterpret": [[819, "polars-series-reinterpret"]], "polars.Series.round": [[833, "polars-series-round"]], "polars.Series.shift_and_fill": [[842, "polars-series-shift-and-fill"]], "polars.Series.shrink_dtype": [[843, "polars-series-shrink-dtype"]], "polars.Series.sign": [[846, "polars-series-sign"]], "polars.Series.sort": [[851, "polars-series-sort"]], "polars.Series.str": [[854, "polars-series-str"]], "polars.Series.str.strptime": [[881, "polars-series-str-strptime"]], "polars.Series.str.to_lowercase": [[882, "polars-series-str-to-lowercase"]], "polars.Series.str.extract": [[862, "polars-series-str-extract"]], "polars.Series.rolling_quantile": [[828, "polars-series-rolling-quantile"]], "polars.Series.sinh": [[848, "polars-series-sinh"]], "polars.Series.rolling_min": [[827, "polars-series-rolling-min"]], "polars.Series.str.json_extract": [[864, "polars-series-str-json-extract"]], "polars.Series.dt.truncate": [[749, "polars-series-dt-truncate"]], "polars.Series.estimated_size": [[756, "polars-series-estimated-size"]], "polars.Series.is_finite": [[778, "polars-series-is-finite"]], "polars.Series.limit": [[795, "polars-series-limit"]], "polars.Series.nan_max": [[808, "polars-series-nan-max"]], "polars.Series.fill_nan": [[763, "polars-series-fill-nan"]], "polars.Series.exp": [[760, "polars-series-exp"]], "polars.Series.peak_max": [[813, "polars-series-peak-max"]], "polars.Series.is_boolean": [[775, "polars-series-is-boolean"]], "polars.Series.get_chunks": [[768, "polars-series-get-chunks"]], "polars.Series.fill_null": [[764, "polars-series-fill-null"]], "polars.Series.ewm_var": [[759, "polars-series-ewm-var"]], "polars.Series.dt.weekday": [[751, "polars-series-dt-weekday"]], "polars.Series.map_dict": [[799, "polars-series-map-dict"]], "polars.Series.is_utf8": [[791, "polars-series-is-utf8"]], "polars.Series.is_temporal": [[789, "polars-series-is-temporal"]], "polars.Series.product": [[815, "polars-series-product"]], "polars.Series.floor": [[767, "polars-series-floor"]], "polars.Series.dt.with_time_unit": [[752, "polars-series-dt-with-time-unit"]], "polars.Series.is_not_null": [[785, "polars-series-is-not-null"]], "polars.Series.is_unique": [[790, "polars-series-is-unique"]], "polars.Series.kurtosis": [[793, "polars-series-kurtosis"]], "polars.Series.dt.week": [[750, "polars-series-dt-week"]], "polars.Series.extend_constant": [[762, "polars-series-extend-constant"]], "polars.Series.is_nan": [[783, "polars-series-is-nan"]], "polars.Series.null_count": [[811, "polars-series-null-count"]], "polars.Series.is_sorted": [[788, "polars-series-is-sorted"]], "polars.Series.flags": [[766, "polars-series-flags"]], "polars.Series.n_unique": [[806, "polars-series-n-unique"]], "polars.Series.mode": [[804, "polars-series-mode"]], "polars.Series.n_chunks": [[805, "polars-series-n-chunks"]], "polars.Series.min": [[803, "polars-series-min"]], "polars.Series.pct_change": [[812, "polars-series-pct-change"]], "polars.Series.is_not_nan": [[784, "polars-series-is-not-nan"]], "polars.Series.has_validity": [[769, "polars-series-has-validity"]], "polars.Series.name": [[807, "polars-series-name"]], "polars.Series.mean": [[801, "polars-series-mean"]], "polars.Series.dt.timestamp": [[748, "polars-series-dt-timestamp"]], "polars.Series.entropy": [[755, "polars-series-entropy"]], "polars.Series.filter": [[765, "polars-series-filter"]], "polars.Series.hash": [[770, "polars-series-hash"]], "polars.Series.is_between": [[774, "polars-series-is-between"]], "polars.Series.is_in": [[781, "polars-series-is-in"]], "polars.Series.is_null": [[786, "polars-series-is-null"]], "polars.Series.max": [[800, "polars-series-max"]], "polars.Series.interpolate": [[773, "polars-series-interpolate"]], "polars.Series.median": [[802, "polars-series-median"]], "polars.Series.is_first": [[779, "polars-series-is-first"]], "polars.Series.is_duplicated": [[776, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[777, "polars-series-is-empty"]], "polars.Series.is_infinite": [[782, "polars-series-is-infinite"]], "polars.Series.lower_bound": [[798, "polars-series-lower-bound"]], "polars.Series.nan_min": [[809, "polars-series-nan-min"]], "polars.Series.ewm_std": [[758, "polars-series-ewm-std"]], "polars.Series.dt.year": [[753, "polars-series-dt-year"]], "polars.Series.len": [[794, "polars-series-len"]], "polars.Series.is_numeric": [[787, "polars-series-is-numeric"]], "polars.Series.explode": [[761, "polars-series-explode"]], "polars.Series.head": [[771, "polars-series-head"]], "polars.Series.inner_dtype": [[772, "polars-series-inner-dtype"]], "polars.Series.log": [[796, "polars-series-log"]], "polars.Series.is_float": [[780, "polars-series-is-float"]], "polars.Series.new_from_index": [[810, "polars-series-new-from-index"]], "polars.Series.peak_min": [[814, "polars-series-peak-min"]], "polars.Series.item": [[792, "polars-series-item"]], "polars.Series.dtype": [[754, "polars-series-dtype"]], "polars.Series.log10": [[797, "polars-series-log10"]], "polars.Series.ewm_mean": [[757, "polars-series-ewm-mean"]], "polars.Series.cos": [[704, "polars-series-cos"]], "polars.Series.bin.encode": [[691, "polars-series-bin-encode"]], "polars.Series.arr.to_struct": [[687, "polars-series-arr-to-struct"]], "polars.Series.dt.combine": [[719, "polars-series-dt-combine"]], "polars.Series.dt.max": [[727, "polars-series-dt-max"]], "polars.Series.dt.minutes": [[736, "polars-series-dt-minutes"]], "polars.Series.dt.median": [[729, "polars-series-dt-median"]], "polars.Series.dt.days": [[722, "polars-series-dt-days"]], "polars.Series.dt.nanosecond": [[738, "polars-series-dt-nanosecond"]], "polars.Series.dt.second": [[745, "polars-series-dt-second"]], "polars.Series.dt.iso_year": [[726, "polars-series-dt-iso-year"]], "polars.Series.dt.cast_time_unit": [[718, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.millisecond": [[732, "polars-series-dt-millisecond"]], "polars.Series.describe": [[712, "polars-series-describe"]], "polars.Series.bin.decode": [[690, "polars-series-bin-decode"]], "polars.Series.dt.ordinal_day": [[741, "polars-series-dt-ordinal-day"]], "polars.Series.dt.convert_time_zone": [[720, "polars-series-dt-convert-time-zone"]], "polars.Series.arr.sort": [[683, "polars-series-arr-sort"]], "polars.Series.diff": [[713, "polars-series-diff"]], "polars.Series.arr.reverse": [[680, "polars-series-arr-reverse"]], "polars.Series.dt.nanoseconds": [[739, "polars-series-dt-nanoseconds"]], "polars.Series.dt.mean": [[728, "polars-series-dt-mean"]], "polars.Series.dt.microsecond": [[730, "polars-series-dt-microsecond"]], "polars.Series.dt.day": [[721, "polars-series-dt-day"]], "polars.Series.cumulative_eval": [[710, "polars-series-cumulative-eval"]], "polars.Series.dt.round": [[744, "polars-series-dt-round"]], "polars.Series.cast": [[694, "polars-series-cast"]], "polars.Series.chunk_lengths": [[698, "polars-series-chunk-lengths"]], "polars.Series.bin.contains": [[689, "polars-series-bin-contains"]], "polars.Series.clip": [[700, "polars-series-clip"]], "polars.Series.dt.epoch": [[723, "polars-series-dt-epoch"]], "polars.Series.cummin": [[707, "polars-series-cummin"]], "polars.Series.dt.milliseconds": [[733, "polars-series-dt-milliseconds"]], "polars.Series.dt.min": [[734, "polars-series-dt-min"]], "polars.Series.dt.minute": [[735, "polars-series-dt-minute"]], "polars.Series.dt.hour": [[724, "polars-series-dt-hour"]], "polars.Series.cat.set_ordering": [[696, "polars-series-cat-set-ordering"]], "polars.Series.cosh": [[705, "polars-series-cosh"]], "polars.Series.clip_max": [[701, "polars-series-clip-max"]], "polars.Series.arr.tail": [[685, "polars-series-arr-tail"]], "polars.Series.dt.quarter": [[742, "polars-series-dt-quarter"]], "polars.Series.arr.slice": [[682, "polars-series-arr-slice"]], "polars.Series.clip_min": [[702, "polars-series-clip-min"]], "polars.Series.dt.offset_by": [[740, "polars-series-dt-offset-by"]], "polars.Series.drop_nans": [[715, "polars-series-drop-nans"]], "polars.Series.dot": [[714, "polars-series-dot"]], "polars.Series.bin.ends_with": [[692, "polars-series-bin-ends-with"]], "polars.Series.dt.replace_time_zone": [[743, "polars-series-dt-replace-time-zone"]], "polars.Series.cat": [[695, "polars-series-cat"]], "polars.Series.clone": [[703, "polars-series-clone"]], "polars.Series.cut": [[711, "polars-series-cut"]], "polars.Series.cummax": [[706, "polars-series-cummax"]], "polars.Series.ceil": [[697, "polars-series-ceil"]], "polars.Series.dt": [[717, "polars-series-dt"]], "polars.Series.dt.hours": [[725, "polars-series-dt-hours"]], "polars.Series.cumprod": [[708, "polars-series-cumprod"]], "polars.Series.drop_nulls": [[716, "polars-series-drop-nulls"]], "polars.Series.clear": [[699, "polars-series-clear"]], "polars.Series.dt.seconds": [[746, "polars-series-dt-seconds"]], "polars.Series.arr.shift": [[681, "polars-series-arr-shift"]], "polars.Series.cumsum": [[709, "polars-series-cumsum"]], "polars.Series.dt.month": [[737, "polars-series-dt-month"]], "polars.Series.dt.microseconds": [[731, "polars-series-dt-microseconds"]], "polars.Series.arr.sum": [[684, "polars-series-arr-sum"]], "polars.Series.arr.unique": [[688, "polars-series-arr-unique"]], "polars.Series.bin.starts_with": [[693, "polars-series-bin-starts-with"]], "polars.Series.arr.take": [[686, "polars-series-arr-take"]], "polars.Series.dt.strftime": [[747, "polars-series-dt-strftime"]], "polars.Series.to_frame": [[898, "polars-series-to-frame"]], "polars.Series.unique": [[904, "polars-series-unique"]], "Descriptive": [[916, "descriptive"], [638, "descriptive"], [239, "descriptive"]], "List": [[919, "list"], [548, "list"]], "Binary": [[912, "binary"], [541, "binary"]], "Miscellaneous": [[920, "miscellaneous"], [641, "miscellaneous"], [556, "miscellaneous"], [550, "miscellaneous"], [243, "miscellaneous"]], "polars.Series.to_numpy": [[900, "polars-series-to-numpy"]], "Computation": [[915, "computation"], [545, "computation"], [238, "computation"]], "polars.Series.take_every": [[892, "polars-series-take-every"]], "polars.Series.unique_counts": [[905, "polars-series-unique-counts"]], "polars.Series.upper_bound": [[906, "polars-series-upper-bound"]], "polars.Series.struct.unnest": [[888, "polars-series-struct-unnest"]], "polars.Series.time_unit": [[895, "polars-series-time-unit"]], "polars.Series.tanh": [[894, "polars-series-tanh"]], "Categories": [[914, "categories"], [543, "categories"]], "Temporal": [[924, "temporal"], [554, "temporal"], [245, "temporal"]], "Boolean": [[913, "boolean"], [542, "boolean"]], "polars.Series.to_dummies": [[897, "polars-series-to-dummies"]], "polars.Series.sum": [[889, "polars-series-sum"]], "polars.Series.top_k": [[903, "polars-series-top-k"]], "polars.Series.tan": [[893, "polars-series-tan"]], "polars.Series.zip_with": [[910, "polars-series-zip-with"]], "Attributes": [[911, "attributes"], [637, "attributes"], [237, "attributes"]], "polars.Series.view": [[909, "polars-series-view"]], "String": [[922, "string"], [552, "string"]], "polars.Series.struct.rename_fields": [[887, "polars-series-struct-rename-fields"]], "polars.Series.tail": [[890, "polars-series-tail"]], "polars.Series.to_pandas": [[901, "polars-series-to-pandas"]], "polars.Series.struct.field": [[885, "polars-series-struct-field"]], "polars.Series.to_arrow": [[896, "polars-series-to-arrow"]], "polars.Series.to_list": [[899, "polars-series-to-list"]], "Struct": [[923, "struct"], [553, "struct"]], "Export": [[917, "export"], [240, "export"]], "Series": [[918, "series"]], "SQL": [[925, "sql"]], "Methods": [[925, "methods"]], "polars.Series.var": [[908, "polars-series-var"]], "Utils": [[927, "utils"]], "polars.Series.take": [[891, "polars-series-take"]], "polars.Series.value_counts": [[907, "polars-series-value-counts"]], "Manipulation/selection": [[921, "manipulation-selection"], [642, "manipulation-selection"], [551, "manipulation-selection"], [244, "manipulation-selection"]], "polars.Series.struct.fields": [[886, "polars-series-struct-fields"]], "polars.Series.str.zfill": [[884, "polars-series-str-zfill"]], "Testing": [[926, "testing"]], "Asserts": [[926, "asserts"]], "Property-based testing": [[926, "property-based-testing"]], "Strategies": [[926, "strategies"]], "Strategy helpers": [[926, "strategy-helpers"]], "polars.Series.to_physical": [[902, "polars-series-to-physical"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[624, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[635, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.arr.head": [[673, "polars-series-arr-head"]], "polars.Series.append": [[648, "polars-series-append"]], "polars.Series.arg_sort": [[658, "polars-series-arg-sort"]], "polars.Series.arr": [[662, "polars-series-arr"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[632, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.Series.arcsin": [[652, "polars-series-arcsin"]], "polars.Series.arctanh": [[655, "polars-series-arctanh"]], "polars.LazyFrame.var": [[616, "polars-lazyframe-var"]], "polars.Series.alias": [[645, "polars-series-alias"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[625, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[626, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.Series.argsort": [[661, "polars-series-argsort"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[623, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.Series.arr.eval": [[669, "polars-series-arr-eval"]], "polars.Series.arr.first": [[671, "polars-series-arr-first"]], "polars.Series.arg_min": [[657, "polars-series-arg-min"]], "polars.LazyFrame.with_row_count": [[620, "polars-lazyframe-with-row-count"]], "polars.Series.all": [[646, "polars-series-all"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[630, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.arr.arg_max": [[663, "polars-series-arr-arg-max"]], "polars.LazyFrame.unique": [[613, "polars-lazyframe-unique"]], "polars.LazyFrame.write_json": [[621, "polars-lazyframe-write-json"]], "polars.Series.arr.concat": [[665, "polars-series-arr-concat"]], "polars.Series.arr.diff": [[668, "polars-series-arr-diff"]], "polars.Series.arr.last": [[675, "polars-series-arr-last"]], "polars.Series.arccos": [[650, "polars-series-arccos"]], "polars.Series.arr.min": [[679, "polars-series-arr-min"]], "polars.LazyFrame.unnest": [[614, "polars-lazyframe-unnest"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[631, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[622, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.with_columns": [[618, "polars-lazyframe-with-columns"]], "polars.Series.arg_true": [[659, "polars-series-arg-true"]], "polars.LazyFrame.width": [[617, "polars-lazyframe-width"]], "polars.Series.arr.contains": [[666, "polars-series-arr-contains"]], "polars.Series.arr.lengths": [[676, "polars-series-arr-lengths"]], "polars.Series.arr.explode": [[670, "polars-series-arr-explode"]], "polars.Series.arctan": [[654, "polars-series-arctan"]], "polars.Series.any": [[647, "polars-series-any"]], "polars.Series.arccosh": [[651, "polars-series-arccosh"]], "polars.Series.arr.count_match": [[667, "polars-series-arr-count-match"]], "LazyFrame": [[640, "lazyframe"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[628, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[629, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.Series.arg_unique": [[660, "polars-series-arg-unique"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[634, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.arcsinh": [[653, "polars-series-arcsinh"]], "polars.Series.arr.mean": [[678, "polars-series-arr-mean"]], "polars.Series.abs": [[644, "polars-series-abs"]], "polars.Series.arr.arg_min": [[664, "polars-series-arr-arg-min"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[633, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.arg_max": [[656, "polars-series-arg-max"]], "polars.Series.arr.max": [[677, "polars-series-arr-max"]], "polars.LazyFrame.with_context": [[619, "polars-lazyframe-with-context"]], "polars.Series.apply": [[649, "polars-series-apply"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[636, "polars-lazyframe-groupby-lazygroupby-tail"]], "Read/write logical plan": [[641, "read-write-logical-plan"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[627, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.take_every": [[612, "polars-lazyframe-take-every"]], "polars.LazyFrame.update": [[615, "polars-lazyframe-update"]], "GroupBy": [[639, "groupby"], [241, "groupby"]], "polars.Series.arr.join": [[674, "polars-series-arr-join"]], "polars.Series.arr.get": [[672, "polars-series-arr-get"]], "polars.lit": [[522, "polars-lit"]], "polars.Expr.top_k": [[487, "polars-expr-top-k"]], "polars.Expr.tail": [[481, "polars-expr-tail"]], "polars.corr": [[504, "polars-corr"]], "polars.from_epoch": [[518, "polars-from-epoch"]], "polars.max": [[524, "polars-max"]], "polars.all": [[494, "polars-all"]], "polars.groups": [[519, "polars-groups"]], "polars.Expr.tan": [[484, "polars-expr-tan"]], "polars.Expr.struct.rename_fields": [[478, "polars-expr-struct-rename-fields"]], "polars.mean": [[525, "polars-mean"]], "polars.quantile": [[530, "polars-quantile"]], "polars.coalesce": [[500, "polars-coalesce"]], "polars.format": [[517, "polars-format"]], "polars.struct": [[536, "polars-struct"]], "polars.head": [[520, "polars-head"]], "polars.spearman_rank_corr": [[534, "polars-spearman-rank-corr"]], "polars.Expr.unique": [[488, "polars-expr-unique"]], "polars.cumfold": [[507, "polars-cumfold"]], "polars.median": [[526, "polars-median"]], "polars.date": [[510, "polars-date"]], "polars.element": [[513, "polars-element"]], "polars.Expr.take": [[482, "polars-expr-take"]], "polars.pearson_corr": [[529, "polars-pearson-corr"]], "polars.Expr.tanh": [[485, "polars-expr-tanh"]], "polars.datetime": [[511, "polars-datetime"]], "polars.col": [[501, "polars-col"]], "polars.exclude": [[514, "polars-exclude"]], "polars.select": [[533, "polars-select"]], "polars.Expr.where": [[493, "polars-expr-where"]], "polars.arg_sort_by": [[498, "polars-arg-sort-by"]], "polars.duration": [[512, "polars-duration"]], "polars.cov": [[506, "polars-cov"]], "polars.Expr.unique_counts": [[489, "polars-expr-unique-counts"]], "polars.Expr.var": [[492, "polars-expr-var"]], "polars.count": [[505, "polars-count"]], "polars.Expr.value_counts": [[491, "polars-expr-value-counts"]], "polars.sum": [[537, "polars-sum"]], "polars.when": [[540, "polars-when"]], "polars.avg": [[499, "polars-avg"]], "polars.fold": [[516, "polars-fold"]], "polars.list": [[521, "polars-list"]], "polars.repeat": [[532, "polars-repeat"]], "polars.tail": [[538, "polars-tail"]], "polars.Expr.suffix": [[479, "polars-expr-suffix"]], "polars.arange": [[497, "polars-arange"]], "polars.Expr.take_every": [[483, "polars-expr-take-every"]], "polars.Expr.to_physical": [[486, "polars-expr-to-physical"]], "polars.concat_list": [[502, "polars-concat-list"]], "polars.any": [[495, "polars-any"]], "polars.cumreduce": [[508, "polars-cumreduce"]], "polars.concat_str": [[503, "polars-concat-str"]], "polars.first": [[515, "polars-first"]], "polars.Expr.upper_bound": [[490, "polars-expr-upper-bound"]], "polars.Expr.sum": [[480, "polars-expr-sum"]], "polars.Expr.str.zfill": [[476, "polars-expr-str-zfill"]], "polars.map": [[523, "polars-map"]], "polars.reduce": [[531, "polars-reduce"]], "polars.Expr.struct.field": [[477, "polars-expr-struct-field"]], "polars.std": [[535, "polars-std"]], "polars.var": [[539, "polars-var"]], "polars.min": [[527, "polars-min"]], "polars.cumsum": [[509, "polars-cumsum"]], "polars.apply": [[496, "polars-apply"]], "polars.n_unique": [[528, "polars-n-unique"]], "polars.Expr.rolling_skew": [[426, "polars-expr-rolling-skew"]], "polars.Expr.repeat_by": [[417, "polars-expr-repeat-by"]], "polars.Expr.shift": [[434, "polars-expr-shift"]], "polars.Expr.sqrt": [[445, "polars-expr-sqrt"]], "polars.Expr.rolling_median": [[423, "polars-expr-rolling-median"]], "polars.Expr.str.rstrip": [[466, "polars-expr-str-rstrip"]], "polars.Expr.str.splitn": [[470, "polars-expr-str-splitn"]], "polars.Expr.shuffle": [[437, "polars-expr-shuffle"]], "polars.Expr.sign": [[438, "polars-expr-sign"]], "polars.Expr.round": [[430, "polars-expr-round"]], "polars.Expr.rolling_sum": [[428, "polars-expr-rolling-sum"]], "polars.Expr.str.n_chars": [[461, "polars-expr-str-n-chars"]], "polars.Expr.sample": [[431, "polars-expr-sample"]], "polars.Expr.str.extract_all": [[455, "polars-expr-str-extract-all"]], "polars.Expr.sort_by": [[444, "polars-expr-sort-by"]], "polars.Expr.str.decode": [[450, "polars-expr-str-decode"]], "polars.Expr.std": [[446, "polars-expr-std"]], "polars.Expr.str.ljust": [[459, "polars-expr-str-ljust"]], "polars.Expr.search_sorted": [[432, "polars-expr-search-sorted"]], "polars.Expr.str.extract": [[454, "polars-expr-str-extract"]], "polars.Expr.product": [[412, "polars-expr-product"]], "polars.Expr.rolling_mean": [[422, "polars-expr-rolling-mean"]], "polars.Expr.skew": [[441, "polars-expr-skew"]], "polars.Expr.rolling_var": [[429, "polars-expr-rolling-var"]], "polars.Expr.sort": [[443, "polars-expr-sort"]], "polars.Expr.slice": [[442, "polars-expr-slice"]], "polars.Expr.str.ends_with": [[452, "polars-expr-str-ends-with"]], "polars.Expr.reinterpret": [[416, "polars-expr-reinterpret"]], "polars.Expr.str.strptime": [[473, "polars-expr-str-strptime"]], "polars.Expr.rank": [[414, "polars-expr-rank"]], "polars.Expr.str.count_match": [[449, "polars-expr-str-count-match"]], "polars.Expr.str.strip": [[472, "polars-expr-str-strip"]], "polars.Expr.pow": [[410, "polars-expr-pow"]], "polars.Expr.str.split_exact": [[469, "polars-expr-str-split-exact"]], "polars.Expr.str.json_extract": [[456, "polars-expr-str-json-extract"]], "polars.Expr.reverse": [[419, "polars-expr-reverse"]], "polars.Expr.rechunk": [[415, "polars-expr-rechunk"]], "polars.Expr.str.concat": [[447, "polars-expr-str-concat"]], "polars.Expr.set_sorted": [[433, "polars-expr-set-sorted"]], "polars.Expr.shift_and_fill": [[435, "polars-expr-shift-and-fill"]], "polars.Expr.reshape": [[418, "polars-expr-reshape"]], "polars.Expr.sinh": [[440, "polars-expr-sinh"]], "polars.Expr.str.slice": [[467, "polars-expr-str-slice"]], "polars.Expr.quantile": [[413, "polars-expr-quantile"]], "polars.Expr.rolling_std": [[427, "polars-expr-rolling-std"]], "polars.Expr.over": [[408, "polars-expr-over"]], "polars.Expr.rolling_max": [[421, "polars-expr-rolling-max"]], "polars.Expr.str.json_path_match": [[457, "polars-expr-str-json-path-match"]], "polars.Expr.str.split": [[468, "polars-expr-str-split"]], "polars.Expr.str.starts_with": [[471, "polars-expr-str-starts-with"]], "polars.Expr.str.explode": [[453, "polars-expr-str-explode"]], "polars.Expr.str.to_lowercase": [[474, "polars-expr-str-to-lowercase"]], "polars.Expr.rolling_min": [[424, "polars-expr-rolling-min"]], "polars.Expr.sin": [[439, "polars-expr-sin"]], "polars.Expr.rolling_apply": [[420, "polars-expr-rolling-apply"]], "polars.Expr.str.contains": [[448, "polars-expr-str-contains"]], "polars.Expr.str.parse_int": [[462, "polars-expr-str-parse-int"]], "polars.Expr.prefix": [[411, "polars-expr-prefix"]], "polars.Expr.str.lstrip": [[460, "polars-expr-str-lstrip"]], "polars.Expr.str.lengths": [[458, "polars-expr-str-lengths"]], "polars.Expr.str.encode": [[451, "polars-expr-str-encode"]], "polars.Expr.str.to_uppercase": [[475, "polars-expr-str-to-uppercase"]], "polars.Expr.pct_change": [[409, "polars-expr-pct-change"]], "polars.Expr.rolling_quantile": [[425, "polars-expr-rolling-quantile"]], "polars.Expr.shrink_dtype": [[436, "polars-expr-shrink-dtype"]], "polars.Expr.str.replace_all": [[464, "polars-expr-str-replace-all"]], "polars.Expr.str.rjust": [[465, "polars-expr-str-rjust"]], "polars.Expr.str.replace": [[463, "polars-expr-str-replace"]], "polars.Expr.interpolate": [[368, "polars-expr-interpolate"]], "polars.Expr.extend_constant": [[357, "polars-expr-extend-constant"]], "polars.Expr.nan_max": [[405, "polars-expr-nan-max"]], "polars.Expr.first": [[361, "polars-expr-first"]], "polars.Expr.n_unique": [[404, "polars-expr-n-unique"]], "polars.Expr.dt.year": [[349, "polars-expr-dt-year"]], "polars.Expr.explode": [[356, "polars-expr-explode"]], "polars.Expr.floor": [[363, "polars-expr-floor"]], "polars.Expr.log10": [[388, "polars-expr-log10"]], "polars.Expr.dt.timestamp": [[344, "polars-expr-dt-timestamp"]], "polars.Expr.last": [[383, "polars-expr-last"]], "polars.Expr.meta.pop": [[399, "polars-expr-meta-pop"]], "polars.Expr.dt.truncate": [[345, "polars-expr-dt-truncate"]], "polars.Expr.ewm_mean": [[351, "polars-expr-ewm-mean"]], "polars.Expr.dt.weekday": [[347, "polars-expr-dt-weekday"]], "polars.Expr.flatten": [[362, "polars-expr-flatten"]], "polars.Expr.len": [[384, "polars-expr-len"]], "polars.Expr.dt.with_time_unit": [[348, "polars-expr-dt-with-time-unit"]], "polars.Expr.limit": [[385, "polars-expr-limit"]], "polars.Expr.max": [[393, "polars-expr-max"]], "polars.Expr.is_nan": [[375, "polars-expr-is-nan"]], "polars.Expr.dt.week": [[346, "polars-expr-dt-week"]], "polars.Expr.fill_nan": [[358, "polars-expr-fill-nan"]], "polars.Expr.entropy": [[350, "polars-expr-entropy"]], "polars.Expr.meta.has_multiple_outputs": [[396, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.log": [[387, "polars-expr-log"]], "polars.Expr.meta.root_names": [[400, "polars-expr-meta-root-names"]], "polars.Expr.inspect": [[367, "polars-expr-inspect"]], "polars.Expr.filter": [[360, "polars-expr-filter"]], "polars.Expr.mode": [[403, "polars-expr-mode"]], "polars.Expr.ewm_var": [[353, "polars-expr-ewm-var"]], "polars.Expr.is_in": [[373, "polars-expr-is-in"]], "polars.Expr.map_alias": [[391, "polars-expr-map-alias"]], "polars.Expr.keep_name": [[381, "polars-expr-keep-name"]], "polars.Expr.is_first": [[372, "polars-expr-is-first"]], "polars.Expr.exp": [[355, "polars-expr-exp"]], "polars.Expr.is_finite": [[371, "polars-expr-is-finite"]], "polars.Expr.kurtosis": [[382, "polars-expr-kurtosis"]], "polars.Expr.mean": [[394, "polars-expr-mean"]], "polars.Expr.is_not_nan": [[377, "polars-expr-is-not-nan"]], "polars.Expr.meta.output_name": [[398, "polars-expr-meta-output-name"]], "polars.Expr.head": [[366, "polars-expr-head"]], "polars.Expr.is_null": [[379, "polars-expr-is-null"]], "polars.Expr.hash": [[365, "polars-expr-hash"]], "polars.Expr.is_unique": [[380, "polars-expr-is-unique"]], "polars.Expr.dt.second": [[341, "polars-expr-dt-second"]], "polars.Expr.list": [[386, "polars-expr-list"]], "polars.Expr.map_dict": [[392, "polars-expr-map-dict"]], "polars.Expr.dt.strftime": [[343, "polars-expr-dt-strftime"]], "polars.Expr.ewm_std": [[352, "polars-expr-ewm-std"]], "polars.Expr.min": [[402, "polars-expr-min"]], "polars.Expr.nan_min": [[406, "polars-expr-nan-min"]], "polars.Expr.null_count": [[407, "polars-expr-null-count"]], "polars.Expr.dt.round": [[340, "polars-expr-dt-round"]], "polars.Expr.median": [[395, "polars-expr-median"]], "polars.Expr.is_not_null": [[378, "polars-expr-is-not-null"]], "polars.Expr.meta.is_regex_projection": [[397, "polars-expr-meta-is-regex-projection"]], "polars.Expr.forward_fill": [[364, "polars-expr-forward-fill"]], "polars.Expr.map": [[390, "polars-expr-map"]], "polars.Expr.dt.seconds": [[342, "polars-expr-dt-seconds"]], "polars.Expr.exclude": [[354, "polars-expr-exclude"]], "polars.Expr.is_between": [[369, "polars-expr-is-between"]], "polars.Expr.meta.undo_aliases": [[401, "polars-expr-meta-undo-aliases"]], "polars.Expr.is_duplicated": [[370, "polars-expr-is-duplicated"]], "polars.Expr.lower_bound": [[389, "polars-expr-lower-bound"]], "polars.Expr.fill_null": [[359, "polars-expr-fill-null"]], "polars.Expr.is_infinite": [[374, "polars-expr-is-infinite"]], "polars.Expr.is_not": [[376, "polars-expr-is-not"]], "polars.Expr.cosh": [[306, "polars-expr-cosh"]], "polars.Expr.cumcount": [[308, "polars-expr-cumcount"]], "polars.Expr.cat.set_ordering": [[300, "polars-expr-cat-set-ordering"]], "polars.Expr.drop_nulls": [[317, "polars-expr-drop-nulls"]], "polars.Expr.dt.millisecond": [[329, "polars-expr-dt-millisecond"]], "polars.Expr.arr.sum": [[288, "polars-expr-arr-sum"]], "polars.Expr.clip_min": [[304, "polars-expr-clip-min"]], "polars.Expr.clip": [[302, "polars-expr-clip"]], "polars.Expr.dt.minutes": [[332, "polars-expr-dt-minutes"]], "polars.Expr.dt.milliseconds": [[330, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.days": [[322, "polars-expr-dt-days"]], "polars.Expr.arr.to_struct": [[291, "polars-expr-arr-to-struct"]], "polars.Expr.arr.first": [[275, "polars-expr-arr-first"]], "polars.Expr.cumprod": [[311, "polars-expr-cumprod"]], "polars.Expr.arr.mean": [[282, "polars-expr-arr-mean"]], "polars.Expr.dt.epoch": [[323, "polars-expr-dt-epoch"]], "polars.Expr.cumsum": [[312, "polars-expr-cumsum"]], "polars.Expr.arr.unique": [[292, "polars-expr-arr-unique"]], "polars.Expr.dot": [[315, "polars-expr-dot"]], "polars.Expr.bin.starts_with": [[298, "polars-expr-bin-starts-with"]], "polars.Expr.cos": [[305, "polars-expr-cos"]], "polars.Expr.cast": [[299, "polars-expr-cast"]], "polars.Expr.arr.slice": [[286, "polars-expr-arr-slice"]], "polars.Expr.dt.nanoseconds": [[335, "polars-expr-dt-nanoseconds"]], "polars.Expr.arr.eval": [[273, "polars-expr-arr-eval"]], "polars.Expr.arr.sort": [[287, "polars-expr-arr-sort"]], "polars.Expr.dt.hours": [[325, "polars-expr-dt-hours"]], "polars.Expr.cummin": [[310, "polars-expr-cummin"]], "polars.Expr.dt.microsecond": [[327, "polars-expr-dt-microsecond"]], "polars.Expr.arr.take": [[290, "polars-expr-arr-take"]], "polars.Expr.arr.diff": [[272, "polars-expr-arr-diff"]], "polars.Expr.backward_fill": [[293, "polars-expr-backward-fill"]], "polars.Expr.ceil": [[301, "polars-expr-ceil"]], "polars.Expr.arr.explode": [[274, "polars-expr-arr-explode"]], "polars.Expr.dt.day": [[321, "polars-expr-dt-day"]], "polars.Expr.dt.replace_time_zone": [[339, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.hour": [[324, "polars-expr-dt-hour"]], "polars.Expr.dt.combine": [[319, "polars-expr-dt-combine"]], "polars.Expr.dt.nanosecond": [[334, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.quarter": [[338, "polars-expr-dt-quarter"]], "polars.Expr.clip_max": [[303, "polars-expr-clip-max"]], "polars.Expr.arr.reverse": [[284, "polars-expr-arr-reverse"]], "polars.Expr.dt.cast_time_unit": [[318, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.ordinal_day": [[337, "polars-expr-dt-ordinal-day"]], "polars.Expr.arr.lengths": [[280, "polars-expr-arr-lengths"]], "polars.Expr.arr.max": [[281, "polars-expr-arr-max"]], "polars.Expr.arr.tail": [[289, "polars-expr-arr-tail"]], "polars.Expr.dt.month": [[333, "polars-expr-dt-month"]], "polars.Expr.cummax": [[309, "polars-expr-cummax"]], "polars.Expr.dt.convert_time_zone": [[320, "polars-expr-dt-convert-time-zone"]], "polars.Expr.cumulative_eval": [[313, "polars-expr-cumulative-eval"]], "polars.Expr.dt.offset_by": [[336, "polars-expr-dt-offset-by"]], "polars.Expr.bin.ends_with": [[297, "polars-expr-bin-ends-with"]], "polars.Expr.arr.shift": [[285, "polars-expr-arr-shift"]], "polars.Expr.count": [[307, "polars-expr-count"]], "polars.Expr.dt.minute": [[331, "polars-expr-dt-minute"]], "polars.Expr.arr.last": [[279, "polars-expr-arr-last"]], "polars.Expr.arr.min": [[283, "polars-expr-arr-min"]], "polars.Expr.bin.contains": [[294, "polars-expr-bin-contains"]], "polars.Expr.drop_nans": [[316, "polars-expr-drop-nans"]], "polars.Expr.arr.head": [[277, "polars-expr-arr-head"]], "polars.Expr.diff": [[314, "polars-expr-diff"]], "polars.Expr.arr.join": [[278, "polars-expr-arr-join"]], "polars.Expr.dt.iso_year": [[326, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microseconds": [[328, "polars-expr-dt-microseconds"]], "polars.Expr.arr.get": [[276, "polars-expr-arr-get"]], "polars.Expr.bin.decode": [[295, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[296, "polars-expr-bin-encode"]], "polars.LazyFrame.inspect": [[580, "polars-lazyframe-inspect"]], "polars.LazyFrame.pipe": [[594, "polars-lazyframe-pipe"]], "polars.LazyFrame.sum": [[610, "polars-lazyframe-sum"]], "polars.LazyFrame.join": [[582, "polars-lazyframe-join"]], "polars.LazyFrame.median": [[590, "polars-lazyframe-median"]], "Input/output": [[558, "input-output"]], "CSV": [[558, "csv"]], "Feather/ IPC": [[558, "feather-ipc"]], "Parquet": [[558, "parquet"]], "Database": [[558, "database"]], "JSON": [[558, "json"]], "AVRO": [[558, "avro"]], "Excel": [[558, "excel"]], "Delta Lake": [[558, "delta-lake"]], "Datasets": [[558, "datasets"]], "BatchedCsvReader": [[558, "batchedcsvreader"]], "polars.LazyFrame.max": [[588, "polars-lazyframe-max"]], "polars.LazyFrame.explain": [[568, "polars-lazyframe-explain"]], "polars.LazyFrame.read_json": [[597, "polars-lazyframe-read-json"]], "polars.LazyFrame.reverse": [[599, "polars-lazyframe-reverse"]], "Functions": [[556, "functions"], [546, "functions"]], "Conversion": [[556, "conversion"]], "Eager/Lazy functions": [[556, "eager-lazy-functions"]], "Parallelization": [[556, "parallelization"]], "StringCache": [[556, "stringcache"]], "polars.LazyFrame.shift": [[602, "polars-lazyframe-shift"]], "polars.LazyFrame.head": [[579, "polars-lazyframe-head"]], "polars.LazyFrame.profile": [[595, "polars-lazyframe-profile"]], "Columns / names": [[544, "columns-names"]], "polars.LazyFrame.clear": [[561, "polars-lazyframe-clear"]], "polars.LazyFrame.first": [[574, "polars-lazyframe-first"]], "polars.LazyFrame.map": [[587, "polars-lazyframe-map"]], "polars.LazyFrame.quantile": [[596, "polars-lazyframe-quantile"]], "polars.LazyFrame.mean": [[589, "polars-lazyframe-mean"]], "polars.LazyFrame.collect": [[563, "polars-lazyframe-collect"]], "polars.LazyFrame.sink_parquet": [[606, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.sink_ipc": [[605, "polars-lazyframe-sink-ipc"]], "Window": [[555, "window"]], "Expressions": [[547, "expressions"]], "polars.LazyFrame.drop": [[565, "polars-lazyframe-drop"]], "polars.LazyFrame.fill_nan": [[571, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.groupby_dynamic": [[577, "polars-lazyframe-groupby-dynamic"]], "API reference": [[557, "api-reference"]], "polars.LazyFrame.interpolate": [[581, "polars-lazyframe-interpolate"]], "polars.LazyFrame.last": [[584, "polars-lazyframe-last"]], "polars.LazyFrame.merge_sorted": [[592, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.shift_and_fill": [[603, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.clone": [[562, "polars-lazyframe-clone"]], "polars.LazyFrame.melt": [[591, "polars-lazyframe-melt"]], "polars.LazyFrame.from_json": [[575, "polars-lazyframe-from-json"]], "polars.LazyFrame.slice": [[607, "polars-lazyframe-slice"]], "polars.LazyFrame.rename": [[598, "polars-lazyframe-rename"]], "polars.LazyFrame.tail": [[611, "polars-lazyframe-tail"]], "polars.LazyFrame.show_graph": [[604, "polars-lazyframe-show-graph"]], "polars.LazyFrame.columns": [[564, "polars-lazyframe-columns"]], "polars.LazyFrame.groupby": [[576, "polars-lazyframe-groupby"]], "polars.LazyFrame.sort": [[608, "polars-lazyframe-sort"]], "polars.LazyFrame.std": [[609, "polars-lazyframe-std"]], "polars.LazyFrame.join_asof": [[583, "polars-lazyframe-join-asof"]], "polars.LazyFrame.dtypes": [[567, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explode": [[569, "polars-lazyframe-explode"]], "polars.LazyFrame.filter": [[573, "polars-lazyframe-filter"]], "Meta": [[549, "meta"]], "polars.LazyFrame.drop_nulls": [[566, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.fill_null": [[572, "polars-lazyframe-fill-null"]], "polars.LazyFrame.limit": [[586, "polars-lazyframe-limit"]], "polars.LazyFrame.groupby_rolling": [[578, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.select": [[601, "polars-lazyframe-select"]], "polars.LazyFrame.fetch": [[570, "polars-lazyframe-fetch"]], "polars.LazyFrame.lazy": [[585, "polars-lazyframe-lazy"]], "polars.LazyFrame.schema": [[600, "polars-lazyframe-schema"]], "polars.LazyFrame.min": [[593, "polars-lazyframe-min"]], "polars.LazyFrame.cache": [[560, "polars-lazyframe-cache"]], "polars.DataFrame.rechunk": [[182, "polars-dataframe-rechunk"]], "polars.DataFrame.fill_null": [[141, "polars-dataframe-fill-null"]], "polars.DataFrame.shape": [[192, "polars-dataframe-shape"]], "polars.DataFrame.height": [[154, "polars-dataframe-height"]], "polars.DataFrame.merge_sorted": [[172, "polars-dataframe-merge-sorted"]], "polars.DataFrame.product": [[180, "polars-dataframe-product"]], "polars.DataFrame.reverse": [[186, "polars-dataframe-reverse"]], "polars.DataFrame.median": [[170, "polars-dataframe-median"]], "polars.DataFrame.find_idx_by_name": [[143, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.mean": [[169, "polars-dataframe-mean"]], "polars.DataFrame.shift_and_fill": [[194, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.insert_at_idx": [[156, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.partition_by": [[177, "polars-dataframe-partition-by"]], "polars.DataFrame.shift": [[193, "polars-dataframe-shift"]], "polars.DataFrame.min": [[173, "polars-dataframe-min"]], "polars.DataFrame.groupby_rolling": [[151, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.dtypes": [[136, "polars-dataframe-dtypes"]], "polars.DataFrame.is_duplicated": [[158, "polars-dataframe-is-duplicated"]], "polars.DataFrame.groupby_dynamic": [[150, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.pipe": [[178, "polars-dataframe-pipe"]], "polars.DataFrame.rows": [[188, "polars-dataframe-rows"]], "polars.DataFrame.std": [[198, "polars-dataframe-std"]], "polars.DataFrame.to_dict": [[203, "polars-dataframe-to-dict"]], "polars.DataFrame.max": [[168, "polars-dataframe-max"]], "polars.DataFrame.tail": [[200, "polars-dataframe-tail"]], "polars.DataFrame.estimated_size": [[137, "polars-dataframe-estimated-size"]], "polars.DataFrame.rename": [[183, "polars-dataframe-rename"]], "polars.DataFrame.sample": [[189, "polars-dataframe-sample"]], "polars.DataFrame.slice": [[196, "polars-dataframe-slice"]], "polars.DataFrame.explode": [[138, "polars-dataframe-explode"]], "polars.DataFrame.n_chunks": [[174, "polars-dataframe-n-chunks"]], "polars.DataFrame.fill_nan": [[140, "polars-dataframe-fill-nan"]], "polars.DataFrame.join": [[164, "polars-dataframe-join"]], "polars.DataFrame.is_empty": [[159, "polars-dataframe-is-empty"]], "polars.DataFrame.n_unique": [[175, "polars-dataframe-n-unique"]], "polars.DataFrame.select": [[191, "polars-dataframe-select"]], "polars.DataFrame.extend": [[139, "polars-dataframe-extend"]], "polars.DataFrame.head": [[153, "polars-dataframe-head"]], "polars.DataFrame.null_count": [[176, "polars-dataframe-null-count"]], "polars.DataFrame.fold": [[144, "polars-dataframe-fold"]], "polars.DataFrame.melt": [[171, "polars-dataframe-melt"]], "polars.DataFrame.frame_equal": [[145, "polars-dataframe-frame-equal"]], "polars.DataFrame.quantile": [[181, "polars-dataframe-quantile"]], "polars.DataFrame.replace_at_idx": [[185, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.limit": [[167, "polars-dataframe-limit"]], "polars.DataFrame.to_arrow": [[202, "polars-dataframe-to-arrow"]], "polars.DataFrame.groupby": [[149, "polars-dataframe-groupby"]], "polars.DataFrame.take_every": [[201, "polars-dataframe-take-every"]], "polars.DataFrame.interpolate": [[157, "polars-dataframe-interpolate"]], "polars.DataFrame.filter": [[142, "polars-dataframe-filter"]], "polars.DataFrame.sort": [[197, "polars-dataframe-sort"]], "polars.DataFrame.shrink_to_fit": [[195, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.get_column": [[146, "polars-dataframe-get-column"]], "polars.DataFrame.iter_slices": [[163, "polars-dataframe-iter-slices"]], "polars.DataFrame.join_asof": [[165, "polars-dataframe-join-asof"]], "polars.DataFrame.pivot": [[179, "polars-dataframe-pivot"]], "polars.DataFrame.item": [[161, "polars-dataframe-item"]], "polars.DataFrame.replace": [[184, "polars-dataframe-replace"]], "polars.DataFrame.iter_rows": [[162, "polars-dataframe-iter-rows"]], "polars.DataFrame.row": [[187, "polars-dataframe-row"]], "polars.DataFrame.hstack": [[155, "polars-dataframe-hstack"]], "polars.DataFrame.lazy": [[166, "polars-dataframe-lazy"]], "polars.DataFrame.schema": [[190, "polars-dataframe-schema"]], "polars.DataFrame.is_unique": [[160, "polars-dataframe-is-unique"]], "polars.DataFrame.hash_rows": [[152, "polars-dataframe-hash-rows"]], "polars.DataFrame.glimpse": [[148, "polars-dataframe-glimpse"]], "polars.DataFrame.sum": [[199, "polars-dataframe-sum"]], "polars.DataFrame.get_columns": [[147, "polars-dataframe-get-columns"]], "polars.DataFrame.upsample": [[215, "polars-dataframe-upsample"]], "polars.dataframe.groupby.GroupBy.tail": [[236, "polars-dataframe-groupby-groupby-tail"]], "polars.dataframe.groupby.GroupBy.count": [[225, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.arg_sort": [[263, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[264, "polars-expr-arg-true"]], "polars.dataframe.groupby.GroupBy.sum": [[235, "polars-dataframe-groupby-groupby-sum"]], "polars.DataFrame.unique": [[211, "polars-dataframe-unique"]], "polars.DataFrame.to_struct": [[209, "polars-dataframe-to-struct"]], "polars.dataframe.groupby.GroupBy.last": [[228, "polars-dataframe-groupby-groupby-last"]], "Exceptions": [[246, "exceptions"]], "polars.dataframe.groupby.GroupBy.first": [[226, "polars-dataframe-groupby-groupby-first"]], "polars.DataFrame.transpose": [[210, "polars-dataframe-transpose"]], "polars.DataFrame.unstack": [[213, "polars-dataframe-unstack"]], "DataFrame": [[242, "dataframe"]], "polars.Expr.arctanh": [[260, "polars-expr-arctanh"]], "polars.Expr.arg_unique": [[265, "polars-expr-arg-unique"]], "polars.Expr.arr.arg_min": [[268, "polars-expr-arr-arg-min"]], "polars.dataframe.groupby.GroupBy.mean": [[230, "polars-dataframe-groupby-groupby-mean"]], "polars.DataFrame.to_series": [[208, "polars-dataframe-to-series"]], "polars.Expr.arcsin": [[257, "polars-expr-arcsin"]], "polars.Expr.arr.contains": [[270, "polars-expr-arr-contains"]], "polars.Expr.arr.concat": [[269, "polars-expr-arr-concat"]], "polars.dataframe.groupby.GroupBy.head": [[227, "polars-dataframe-groupby-groupby-head"]], "polars.DataFrame.width": [[218, "polars-dataframe-width"]], "polars.dataframe.groupby.GroupBy.min": [[232, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.agg_groups": [[249, "polars-expr-agg-groups"]], "polars.dataframe.groupby.GroupBy.median": [[231, "polars-dataframe-groupby-groupby-median"]], "Data types": [[245, "data-types"]], "Numeric": [[245, "numeric"]], "Nested": [[245, "nested"]], "Other": [[245, "other"]], "polars.DataFrame.var": [[216, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.__iter__": [[221, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.apply": [[254, "polars-expr-apply"]], "polars.DataFrame.to_pandas": [[207, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_numpy": [[206, "polars-dataframe-to-numpy"]], "polars.dataframe.groupby.GroupBy.all": [[223, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.any": [[252, "polars-expr-any"]], "polars.Expr.arr.arg_max": [[267, "polars-expr-arr-arg-max"]], "polars.DataFrame.to_dicts": [[204, "polars-dataframe-to-dicts"]], "polars.DataFrame.with_row_count": [[220, "polars-dataframe-with-row-count"]], "polars.Expr.arcsinh": [[258, "polars-expr-arcsinh"]], "polars.dataframe.groupby.GroupBy.n_unique": [[233, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.vstack": [[217, "polars-dataframe-vstack"]], "polars.dataframe.groupby.GroupBy.apply": [[224, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.all": [[251, "polars-expr-all"]], "polars.DataFrame.to_dummies": [[205, "polars-dataframe-to-dummies"]], "polars.DataFrame.update": [[214, "polars-dataframe-update"]], "polars.Expr.alias": [[250, "polars-expr-alias"]], "polars.Expr.arctan": [[259, "polars-expr-arctan"]], "polars.Expr.arr.count_match": [[271, "polars-expr-arr-count-match"]], "polars.dataframe.groupby.GroupBy.agg": [[222, "polars-dataframe-groupby-groupby-agg"]], "polars.dataframe.groupby.GroupBy.quantile": [[234, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.append": [[253, "polars-expr-append"]], "polars.Expr.arg_max": [[261, "polars-expr-arg-max"]], "polars.Expr.abs": [[248, "polars-expr-abs"]], "polars.Expr.argsort": [[266, "polars-expr-argsort"]], "polars.Expr.arg_min": [[262, "polars-expr-arg-min"]], "polars.Expr.arccosh": [[256, "polars-expr-arccosh"]], "polars.DataFrame.with_columns": [[219, "polars-dataframe-with-columns"]], "polars.dataframe.groupby.GroupBy.max": [[229, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.arccos": [[255, "polars-expr-arccos"]], "polars.DataFrame.unnest": [[212, "polars-dataframe-unnest"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "stringcache (class in polars)": [[51, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__"]], "struct (class in polars)": [[52, "polars.Struct"]], "__init__() (polars.struct method)": [[52, "polars.Struct.__init__"]], "time (class in polars)": [[53, "polars.Time"]], "__init__() (polars.time method)": [[53, "polars.Time.__init__"]], "uint16 (class in polars)": [[54, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[54, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[55, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[55, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[56, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[56, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[57, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[57, "polars.UInt8.__init__"]], "unknown (class in polars)": [[58, "polars.Unknown"]], "__init__() (polars.unknown method)": [[58, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[59, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[59, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[60, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[61, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[62, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[63, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[64, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[65, "polars.arg_where"]], "build_info() (in module polars)": [[66, "polars.build_info"]], "collect_all() (in module polars)": [[67, "polars.collect_all"]], "concat() (in module polars)": [[68, "polars.concat"]], "cut() (in module polars)": [[69, "polars.cut"]], "date_range() (in module polars)": [[70, "polars.date_range"]], "arrowerror": [[71, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[72, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[73, "polars.exceptions.ComputeError"]], "duplicateerror": [[74, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[75, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[76, "polars.exceptions.NoDataError"]], "norowsreturned": [[77, "polars.exceptions.NoRowsReturned"]], "panicexception": [[78, "polars.exceptions.PanicException"]], "rowsexception": [[79, "polars.exceptions.RowsException"]], "schemaerror": [[80, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[81, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[82, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[83, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[84, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[85, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[86, "polars.from_dataframe"]], "from_dict() (in module polars)": [[87, "polars.from_dict"]], "from_dicts() (in module polars)": [[88, "polars.from_dicts"]], "from_numpy() (in module polars)": [[89, "polars.from_numpy"]], "from_pandas() (in module polars)": [[90, "polars.from_pandas"]], "from_records() (in module polars)": [[91, "polars.from_records"]], "get_dummies() (in module polars)": [[92, "polars.get_dummies"]], "get_index_type() (in module polars)": [[93, "polars.get_index_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[94, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[95, "polars.ones"]], "read_avro() (in module polars)": [[96, "polars.read_avro"]], "read_csv() (in module polars)": [[97, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[98, "polars.read_csv_batched"]], "read_database() (in module polars)": [[99, "polars.read_database"]], "read_delta() (in module polars)": [[100, "polars.read_delta"]], "read_excel() (in module polars)": [[101, "polars.read_excel"]], "read_ipc() (in module polars)": [[102, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[103, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[104, "polars.read_json"]], "read_ndjson() (in module polars)": [[105, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[106, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[107, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[108, "polars.scan_csv"]], "scan_delta() (in module polars)": [[109, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[110, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[111, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[112, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[113, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[114, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[115, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[116, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[117, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[117, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[118, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[119, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[121, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[122, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[123, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[126, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[127, "polars.DataFrame.apply"]], "clear() (polars.dataframe method)": [[128, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[129, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[130, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[131, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[132, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[133, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[134, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[135, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[136, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[137, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[138, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[139, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[140, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[141, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[142, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[143, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[144, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[145, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[146, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[147, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[148, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[149, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[150, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[151, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[152, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[153, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[154, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[155, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[156, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[157, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[158, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[159, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[160, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[161, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[162, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[163, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[164, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[165, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[166, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[167, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[168, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[169, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[170, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[171, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[172, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[173, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[174, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[175, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[176, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[177, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[178, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[179, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[180, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[181, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[182, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[183, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[184, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[185, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[186, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[187, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[188, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[189, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[190, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[191, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[192, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[193, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[194, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[195, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[196, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[197, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[198, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[199, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[200, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[201, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[202, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[203, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[204, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[205, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[206, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[207, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[208, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[209, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[210, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[211, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[212, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[213, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[214, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[215, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[216, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[217, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[218, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[219, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[220, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[221, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[222, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[223, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[224, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[225, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[226, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[227, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[228, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[248, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[249, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[250, "polars.Expr.alias"]], "all() (polars.expr method)": [[251, "polars.Expr.all"]], "any() (polars.expr method)": [[252, "polars.Expr.any"]], "append() (polars.expr method)": [[253, "polars.Expr.append"]], "apply() (polars.expr method)": [[254, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[255, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[256, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[257, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[258, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[259, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[260, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[261, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[262, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[263, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[264, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[265, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[266, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[267, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[268, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[269, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[270, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[271, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[272, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[273, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[274, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[275, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[276, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[277, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[278, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[279, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[280, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[281, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[282, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[283, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[284, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[285, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[286, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[287, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[288, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[289, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[290, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[291, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[292, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[293, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[294, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[295, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[296, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[297, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[298, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[299, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[300, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[301, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[302, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[303, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[304, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[305, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[306, "polars.Expr.cosh"]], "count() (polars.expr method)": [[307, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[308, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[309, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[310, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[311, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[312, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[313, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[314, "polars.Expr.diff"]], "dot() (polars.expr method)": [[315, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[316, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[317, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[318, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[319, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[320, "polars.Expr.dt.convert_time_zone"]], "day() (polars.expr.dt method)": [[321, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[322, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[323, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[324, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[325, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[326, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[327, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[328, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[329, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[330, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[331, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[332, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[333, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[334, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[335, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[336, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[337, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[338, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[339, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[340, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[341, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[342, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[343, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[344, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[345, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[346, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[347, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[348, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[349, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[350, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[351, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[352, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[353, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[354, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[355, "polars.Expr.exp"]], "explode() (polars.expr method)": [[356, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[357, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[358, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[359, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[360, "polars.Expr.filter"]], "first() (polars.expr method)": [[361, "polars.Expr.first"]], "flatten() (polars.expr method)": [[362, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[363, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[364, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[365, "polars.Expr.hash"]], "head() (polars.expr method)": [[366, "polars.Expr.head"]], "inspect() (polars.expr method)": [[367, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[368, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[369, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[370, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[371, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[372, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[373, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[374, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[375, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[376, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[377, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[378, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[379, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[380, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[381, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[382, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[383, "polars.Expr.last"]], "len() (polars.expr method)": [[384, "polars.Expr.len"]], "limit() (polars.expr method)": [[385, "polars.Expr.limit"]], "list() (polars.expr method)": [[386, "polars.Expr.list"]], "log() (polars.expr method)": [[387, "polars.Expr.log"]], "log10() (polars.expr method)": [[388, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[389, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[390, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[391, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[392, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[393, "polars.Expr.max"]], "mean() (polars.expr method)": [[394, "polars.Expr.mean"]], "median() (polars.expr method)": [[395, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[396, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[397, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[398, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[399, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[400, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[401, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[402, "polars.Expr.min"]], "mode() (polars.expr method)": [[403, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[404, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[405, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[406, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[407, "polars.Expr.null_count"]], "over() (polars.expr method)": [[408, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[409, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[410, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[411, "polars.Expr.prefix"]], "product() (polars.expr method)": [[412, "polars.Expr.product"]], "quantile() (polars.expr method)": [[413, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[414, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[415, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[416, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[417, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[418, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[419, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[420, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[421, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[422, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[423, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[424, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[425, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[426, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[427, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[428, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[429, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[430, "polars.Expr.round"]], "sample() (polars.expr method)": [[431, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[432, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[433, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[434, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[435, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[436, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[437, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[438, "polars.Expr.sign"]], "sin() (polars.expr method)": [[439, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[440, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[441, "polars.Expr.skew"]], "slice() (polars.expr method)": [[442, "polars.Expr.slice"]], "sort() (polars.expr method)": [[443, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[444, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[445, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[446, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[447, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[448, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[449, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[450, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[451, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[452, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[453, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[454, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[455, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[456, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[457, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[458, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[459, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[460, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[461, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[462, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[463, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[464, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[465, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[466, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[467, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[468, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[469, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[470, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[471, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[472, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[473, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[474, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[475, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[476, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[477, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[478, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[479, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[480, "polars.Expr.sum"]], "tail() (polars.expr method)": [[481, "polars.Expr.tail"]], "take() (polars.expr method)": [[482, "polars.Expr.take"]], "take_every() (polars.expr method)": [[483, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[484, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[485, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[486, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[487, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[488, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[489, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[490, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[491, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[492, "polars.Expr.var"]], "where() (polars.expr method)": [[493, "polars.Expr.where"]], "all() (in module polars)": [[494, "polars.all"]], "any() (in module polars)": [[495, "polars.any"]], "apply() (in module polars)": [[496, "polars.apply"]], "arange() (in module polars)": [[497, "polars.arange"]], "arg_sort_by() (in module polars)": [[498, "polars.arg_sort_by"]], "avg() (in module polars)": [[499, "polars.avg"]], "coalesce() (in module polars)": [[500, "polars.coalesce"]], "col() (in module polars)": [[501, "polars.col"]], "concat_list() (in module polars)": [[502, "polars.concat_list"]], "concat_str() (in module polars)": [[503, "polars.concat_str"]], "corr() (in module polars)": [[504, "polars.corr"]], "count() (in module polars)": [[505, "polars.count"]], "cov() (in module polars)": [[506, "polars.cov"]], "cumfold() (in module polars)": [[507, "polars.cumfold"]], "cumreduce() (in module polars)": [[508, "polars.cumreduce"]], "cumsum() (in module polars)": [[509, "polars.cumsum"]], "date() (in module polars)": [[510, "polars.date"]], "datetime() (in module polars)": [[511, "polars.datetime"]], "duration() (in module polars)": [[512, "polars.duration"]], "element() (in module polars)": [[513, "polars.element"]], "exclude() (in module polars)": [[514, "polars.exclude"]], "first() (in module polars)": [[515, "polars.first"]], "fold() (in module polars)": [[516, "polars.fold"]], "format() (in module polars)": [[517, "polars.format"]], "from_epoch() (in module polars)": [[518, "polars.from_epoch"]], "groups() (in module polars)": [[519, "polars.groups"]], "head() (in module polars)": [[520, "polars.head"]], "list() (in module polars)": [[521, "polars.list"]], "lit() (in module polars)": [[522, "polars.lit"]], "map() (in module polars)": [[523, "polars.map"]], "max() (in module polars)": [[524, "polars.max"]], "mean() (in module polars)": [[525, "polars.mean"]], "median() (in module polars)": [[526, "polars.median"]], "min() (in module polars)": [[527, "polars.min"]], "n_unique() (in module polars)": [[528, "polars.n_unique"]], "pearson_corr() (in module polars)": [[529, "polars.pearson_corr"]], "quantile() (in module polars)": [[530, "polars.quantile"]], "reduce() (in module polars)": [[531, "polars.reduce"]], "repeat() (in module polars)": [[532, "polars.repeat"]], "select() (in module polars)": [[533, "polars.select"]], "spearman_rank_corr() (in module polars)": [[534, "polars.spearman_rank_corr"]], "std() (in module polars)": [[535, "polars.std"]], "struct() (in module polars)": [[536, "polars.struct"]], "sum() (in module polars)": [[537, "polars.sum"]], "tail() (in module polars)": [[538, "polars.tail"]], "var() (in module polars)": [[539, "polars.var"]], "when() (in module polars)": [[540, "polars.when"]], "cache() (polars.lazyframe method)": [[560, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[561, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[562, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[563, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[564, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[565, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[566, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[567, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[568, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[569, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[570, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[571, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[572, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[573, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[574, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[575, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[576, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[577, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[578, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[579, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[580, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[581, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[582, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[583, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[584, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[585, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[586, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[587, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[588, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[589, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[590, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[591, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[592, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[593, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[594, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[595, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[596, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[597, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[598, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[599, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[600, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[601, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[602, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[603, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[604, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[605, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[606, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[607, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[608, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[609, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[610, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[611, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[612, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[613, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[614, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[615, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[616, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[617, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[618, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[619, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[620, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[621, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[622, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[623, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[624, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[625, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[626, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[627, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[628, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[629, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[630, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[631, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[632, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[633, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[634, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[635, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[636, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[644, "polars.Series.abs"]], "alias() (polars.series method)": [[645, "polars.Series.alias"]], "all() (polars.series method)": [[646, "polars.Series.all"]], "any() (polars.series method)": [[647, "polars.Series.any"]], "append() (polars.series method)": [[648, "polars.Series.append"]], "apply() (polars.series method)": [[649, "polars.Series.apply"]], "arccos() (polars.series method)": [[650, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[651, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[652, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[653, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[654, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[655, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[656, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[657, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[658, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[659, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[660, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[661, "polars.Series.argsort"]], "arr (polars.series attribute)": [[662, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[663, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[664, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[665, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[666, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[667, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[668, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[669, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[670, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[671, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[672, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[673, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[674, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[675, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[676, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[677, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[678, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[679, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[680, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[681, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[682, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[683, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[684, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[685, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[686, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[687, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[688, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[689, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[690, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[691, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[692, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[693, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[694, "polars.Series.cast"]], "cat (polars.series attribute)": [[695, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[696, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[697, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[698, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[699, "polars.Series.clear"]], "clip() (polars.series method)": [[700, "polars.Series.clip"]], "clip_max() (polars.series method)": [[701, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[702, "polars.Series.clip_min"]], "clone() (polars.series method)": [[703, "polars.Series.clone"]], "cos() (polars.series method)": [[704, "polars.Series.cos"]], "cosh() (polars.series method)": [[705, "polars.Series.cosh"]], "cummax() (polars.series method)": [[706, "polars.Series.cummax"]], "cummin() (polars.series method)": [[707, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[708, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[709, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[710, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[711, "polars.Series.cut"]], "describe() (polars.series method)": [[712, "polars.Series.describe"]], "diff() (polars.series method)": [[713, "polars.Series.diff"]], "dot() (polars.series method)": [[714, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[715, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[716, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[717, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[718, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[719, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[720, "polars.Series.dt.convert_time_zone"]], "day() (polars.series.dt method)": [[721, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[722, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[723, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[724, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[725, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[726, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[727, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[728, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[729, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[730, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[731, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[732, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[733, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[734, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[735, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[736, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[737, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[738, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[739, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[740, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[741, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[742, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[743, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[744, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[745, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[746, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[747, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[748, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[749, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[750, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[751, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[752, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[753, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[754, "polars.Series.dtype"]], "entropy() (polars.series method)": [[755, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[756, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[757, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[758, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[759, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[760, "polars.Series.exp"]], "explode() (polars.series method)": [[761, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[762, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[763, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[764, "polars.Series.fill_null"]], "filter() (polars.series method)": [[765, "polars.Series.filter"]], "flags (polars.series attribute)": [[766, "polars.Series.flags"]], "floor() (polars.series method)": [[767, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[768, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[769, "polars.Series.has_validity"]], "hash() (polars.series method)": [[770, "polars.Series.hash"]], "head() (polars.series method)": [[771, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[772, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[773, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[774, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[775, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[776, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[777, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[778, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[779, "polars.Series.is_first"]], "is_float() (polars.series method)": [[780, "polars.Series.is_float"]], "is_in() (polars.series method)": [[781, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[782, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[783, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[784, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[785, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[786, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[787, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[788, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[789, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[790, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[791, "polars.Series.is_utf8"]], "item() (polars.series method)": [[792, "polars.Series.item"]], "kurtosis() (polars.series method)": [[793, "polars.Series.kurtosis"]], "len() (polars.series method)": [[794, "polars.Series.len"]], "limit() (polars.series method)": [[795, "polars.Series.limit"]], "log() (polars.series method)": [[796, "polars.Series.log"]], "log10() (polars.series method)": [[797, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[798, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[799, "polars.Series.map_dict"]], "max() (polars.series method)": [[800, "polars.Series.max"]], "mean() (polars.series method)": [[801, "polars.Series.mean"]], "median() (polars.series method)": [[802, "polars.Series.median"]], "min() (polars.series method)": [[803, "polars.Series.min"]], "mode() (polars.series method)": [[804, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[805, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[806, "polars.Series.n_unique"]], "name (polars.series attribute)": [[807, "polars.Series.name"]], "nan_max() (polars.series method)": [[808, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[809, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[810, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[811, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[812, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[813, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[814, "polars.Series.peak_min"]], "product() (polars.series method)": [[815, "polars.Series.product"]], "quantile() (polars.series method)": [[816, "polars.Series.quantile"]], "rank() (polars.series method)": [[817, "polars.Series.rank"]], "rechunk() (polars.series method)": [[818, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[819, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[820, "polars.Series.rename"]], "reshape() (polars.series method)": [[821, "polars.Series.reshape"]], "reverse() (polars.series method)": [[822, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[823, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[824, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[825, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[826, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[827, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[828, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[829, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[830, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[831, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[832, "polars.Series.rolling_var"]], "round() (polars.series method)": [[833, "polars.Series.round"]], "sample() (polars.series method)": [[834, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[835, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[836, "polars.Series.series_equal"]], "set() (polars.series method)": [[837, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[838, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[839, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[840, "polars.Series.shape"]], "shift() (polars.series method)": [[841, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[842, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[843, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[844, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[845, "polars.Series.shuffle"]], "sign() (polars.series method)": [[846, "polars.Series.sign"]], "sin() (polars.series method)": [[847, "polars.Series.sin"]], "sinh() (polars.series method)": [[848, "polars.Series.sinh"]], "skew() (polars.series method)": [[849, "polars.Series.skew"]], "slice() (polars.series method)": [[850, "polars.Series.slice"]], "sort() (polars.series method)": [[851, "polars.Series.sort"]], "sqrt() (polars.series method)": [[852, "polars.Series.sqrt"]], "std() (polars.series method)": [[853, "polars.Series.std"]], "str (polars.series attribute)": [[854, "polars.Series.str"]], "concat() (polars.series.str method)": [[855, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[856, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[857, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[858, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[859, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[860, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[861, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[862, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[863, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[864, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[865, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[866, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[867, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[868, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[869, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[870, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[871, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[872, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[873, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[874, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[875, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[876, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[877, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[878, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[879, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[880, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[881, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[882, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[883, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[884, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[885, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[886, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[887, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[888, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[889, "polars.Series.sum"]], "tail() (polars.series method)": [[890, "polars.Series.tail"]], "take() (polars.series method)": [[891, "polars.Series.take"]], "take_every() (polars.series method)": [[892, "polars.Series.take_every"]], "tan() (polars.series method)": [[893, "polars.Series.tan"]], "tanh() (polars.series method)": [[894, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[895, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[896, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[897, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[898, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[899, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[900, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[901, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[902, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[903, "polars.Series.top_k"]], "unique() (polars.series method)": [[904, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[905, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[906, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[907, "polars.Series.value_counts"]], "var() (polars.series method)": [[908, "polars.Series.var"]], "view() (polars.series method)": [[909, "polars.Series.view"]], "zip_with() (polars.series method)": [[910, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[925, "polars.SQLContext"]]}})
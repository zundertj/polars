Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 96, 114, 124, 127, 128, 227, 245, 257, 555, 633, 658, 934], "refer": [0, 29, 98, 99, 102, 132, 245, 399, 422, 481, 555, 832, 896, 934], "input": [0, 60, 88, 98, 99, 102, 128, 139, 150, 178, 192, 198, 212, 222, 225, 245, 257, 361, 376, 395, 406, 415, 418, 452, 504, 506, 508, 509, 510, 511, 522, 523, 531, 532, 535, 544, 555, 565, 577, 584, 609, 616, 621, 627, 631, 649, 658, 788, 811, 813, 934], "output": [0, 25, 27, 29, 31, 32, 70, 102, 118, 128, 151, 152, 163, 173, 180, 189, 192, 218, 222, 245, 253, 257, 397, 398, 399, 405, 499, 504, 512, 531, 542, 555, 565, 585, 586, 595, 599, 600, 609, 627, 630, 633, 649, 658, 813, 923, 934], "seri": [0, 1, 22, 51, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 90, 92, 96, 117, 118, 120, 124, 128, 135, 143, 145, 147, 148, 153, 156, 157, 159, 161, 169, 170, 174, 185, 186, 200, 204, 207, 210, 211, 226, 245, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 269, 270, 271, 272, 277, 280, 281, 288, 289, 292, 293, 294, 297, 303, 304, 308, 309, 321, 323, 327, 330, 334, 336, 338, 341, 345, 346, 348, 352, 355, 363, 364, 370, 374, 376, 378, 379, 380, 381, 382, 384, 385, 386, 396, 397, 418, 422, 423, 424, 425, 426, 428, 440, 441, 444, 447, 448, 455, 470, 475, 481, 485, 490, 491, 492, 493, 498, 504, 505, 507, 513, 515, 516, 517, 523, 524, 526, 528, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 543, 544, 545, 546, 547, 555, 565, 581, 627, 632, 649, 928, 930, 933, 935, 938, 939, 940], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 51, 60, 61, 62, 63, 64, 65, 67, 68, 69, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 111, 112, 113, 116, 118, 119, 243, 244, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 290, 291, 294, 295, 296, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 347, 348, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 528, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 555, 565, 571, 573, 577, 578, 581, 582, 585, 586, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 609, 613, 614, 615, 616, 617, 618, 622, 623, 624, 625, 627, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 657, 658, 678, 696, 705, 720, 721, 785, 830, 877, 880, 892, 893, 903, 912, 913, 923, 934], "lazyfram": [0, 1, 48, 50, 60, 61, 62, 63, 64, 67, 68, 109, 110, 111, 112, 113, 114, 116, 120, 167, 179, 245, 294, 367, 555, 565, 648, 941], "express": [0, 65, 67, 70, 118, 120, 121, 128, 139, 141, 143, 150, 176, 180, 188, 192, 198, 212, 222, 225, 227, 245, 253, 254, 256, 257, 267, 274, 276, 294, 305, 306, 307, 310, 316, 318, 322, 342, 361, 364, 367, 374, 376, 380, 383, 388, 391, 396, 397, 398, 399, 403, 404, 405, 406, 415, 417, 418, 419, 420, 425, 439, 440, 441, 443, 445, 450, 452, 456, 464, 465, 481, 487, 490, 496, 498, 501, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 530, 531, 532, 535, 537, 539, 540, 541, 542, 544, 545, 548, 554, 565, 571, 576, 577, 578, 581, 584, 603, 609, 611, 612, 613, 614, 616, 621, 627, 628, 631, 633, 649, 658, 676, 678, 709, 710, 711, 719, 728, 752, 775, 788, 850, 857, 871, 879, 880, 934], "extend": [0, 88, 245, 364, 555, 565, 657, 775, 934], "function": [0, 29, 61, 62, 63, 64, 69, 86, 92, 98, 99, 102, 109, 119, 128, 132, 138, 145, 172, 179, 180, 209, 213, 216, 217, 227, 245, 254, 257, 294, 316, 346, 358, 359, 360, 397, 398, 415, 417, 428, 429, 430, 431, 432, 433, 435, 436, 437, 449, 494, 502, 504, 515, 516, 523, 524, 526, 531, 539, 555, 565, 595, 599, 602, 624, 633, 649, 658, 696, 719, 756, 769, 770, 771, 772, 785, 830, 838, 852, 853, 859, 864, 917, 934], "data": [0, 1, 5, 15, 18, 28, 29, 34, 51, 60, 61, 63, 68, 75, 76, 80, 82, 85, 86, 87, 88, 89, 90, 91, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 116, 117, 119, 120, 121, 127, 128, 129, 130, 140, 149, 150, 151, 163, 164, 165, 167, 178, 179, 183, 188, 189, 196, 203, 208, 209, 222, 224, 243, 245, 257, 295, 302, 321, 347, 355, 375, 382, 384, 422, 438, 439, 449, 481, 494, 496, 509, 542, 555, 565, 569, 570, 578, 584, 585, 602, 613, 614, 627, 649, 657, 658, 697, 703, 708, 712, 725, 727, 765, 785, 832, 848, 849, 859, 864, 896, 915, 916, 917, 918, 920, 925, 933, 934], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 70, 75, 85, 87, 88, 89, 90, 91, 92, 96, 98, 99, 101, 102, 109, 110, 115, 116, 117, 120, 123, 124, 128, 145, 149, 151, 152, 153, 164, 203, 208, 209, 211, 214, 245, 257, 281, 294, 302, 303, 305, 306, 307, 323, 327, 330, 334, 336, 338, 341, 345, 348, 361, 372, 378, 380, 381, 399, 425, 476, 477, 478, 481, 494, 504, 509, 518, 519, 520, 522, 523, 530, 555, 565, 571, 576, 578, 585, 586, 603, 612, 613, 614, 622, 649, 683, 696, 703, 705, 709, 710, 711, 729, 733, 736, 743, 745, 748, 751, 755, 758, 783, 859, 891, 892, 893, 915, 916, 918, 926, 934], "config": [0, 60, 192, 222, 245, 565, 609, 627, 649], "except": [0, 154, 166, 168, 201, 245, 522, 565, 591, 649, 784, 809, 905, 916, 925, 934], "test": [0, 102, 565, 587, 594, 649], "util": [0, 526, 565, 578, 649], "sql": [0, 28, 48, 100, 165, 245, 565], "These": [1, 29, 125, 245, 352, 554, 762], "allow": [1, 29, 51, 75, 86, 109, 111, 112, 113, 114, 120, 121, 127, 163, 166, 167, 188, 189, 190, 209, 214, 224, 245, 342, 424, 439, 481, 555, 590, 591, 595, 599, 613, 614, 622, 628, 649, 752, 834, 849, 851, 896, 917, 934], "you": [1, 12, 29, 33, 60, 85, 87, 88, 89, 91, 96, 98, 99, 102, 103, 107, 109, 116, 124, 128, 136, 140, 163, 166, 176, 188, 189, 205, 208, 213, 227, 245, 257, 276, 305, 306, 307, 367, 376, 397, 399, 424, 429, 430, 431, 432, 433, 435, 436, 437, 466, 469, 481, 505, 515, 524, 555, 571, 574, 587, 591, 594, 612, 614, 633, 649, 657, 658, 678, 709, 710, 711, 788, 834, 881, 884, 896, 916, 925, 934], "regist": [1, 61, 62, 63, 64], "custom": [1, 29, 61, 62, 63, 64, 128, 227, 245, 257, 294, 397, 428, 504, 531, 555, 595, 633, 649, 658, 696, 838, 934], "dedic": [1, 86, 163, 189, 245], "namespac": [1, 244, 554, 565, 648], "underli": [1, 71, 78, 85, 87, 88, 89, 91, 107, 120, 121, 140, 163, 164, 189, 203, 245, 298, 321, 322, 326, 329, 331, 332, 333, 335, 337, 339, 340, 343, 344, 345, 347, 353, 354, 355, 356, 424, 438, 456, 458, 555, 649, 657, 699, 727, 728, 732, 735, 737, 738, 742, 744, 747, 749, 750, 753, 754, 755, 757, 763, 764, 765, 766, 834, 848, 859, 871, 873, 911, 916, 934], "polar": [1, 245, 554, 555, 565, 649, 934, 941, 942], "class": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 90, 118, 119, 208, 209, 245, 555, 565, 649, 915, 916, 934, 941], "without": [1, 5, 69, 92, 101, 104, 108, 110, 114, 216, 217, 245, 257, 316, 346, 429, 430, 431, 432, 433, 435, 436, 437, 541, 555, 624, 649, 719, 725, 756, 785, 830, 934], "requir": [1, 29, 33, 90, 116, 117, 132, 188, 209, 245, 295, 358, 359, 360, 444, 481, 496, 555, 614, 649, 697, 770, 771, 772, 858, 896, 916, 917, 920, 934], "subclass": [1, 245], "mixin": 1, "expr": [1, 60, 61, 62, 63, 64, 65, 68, 70, 139, 141, 143, 165, 166, 176, 180, 188, 192, 222, 245, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 555, 556, 557, 560, 561, 562, 577, 579, 581, 590, 591, 604, 609, 611, 627, 649, 676, 678, 719, 728, 776, 857, 871, 875, 894, 906, 934], "ar": [1, 5, 10, 14, 17, 25, 29, 33, 51, 70, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 114, 116, 117, 119, 120, 123, 125, 127, 128, 132, 136, 138, 141, 145, 150, 151, 152, 163, 166, 167, 172, 173, 178, 188, 189, 192, 198, 204, 209, 212, 217, 218, 222, 225, 245, 254, 294, 312, 314, 315, 319, 320, 346, 352, 357, 358, 359, 360, 376, 378, 380, 381, 382, 384, 385, 386, 389, 399, 415, 422, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 446, 449, 451, 452, 466, 469, 470, 488, 505, 506, 508, 510, 511, 512, 532, 535, 542, 544, 548, 549, 551, 554, 555, 556, 557, 560, 561, 562, 565, 574, 579, 584, 585, 586, 587, 591, 594, 595, 599, 600, 603, 606, 609, 613, 614, 616, 621, 624, 627, 628, 631, 649, 655, 657, 696, 717, 718, 756, 762, 768, 769, 770, 771, 772, 782, 788, 792, 795, 796, 797, 798, 799, 800, 807, 832, 836, 838, 844, 861, 864, 881, 884, 885, 904, 916, 917, 925, 928, 930, 934, 935, 938, 939, 940], "all": [1, 7, 14, 17, 22, 25, 29, 34, 67, 68, 70, 85, 88, 90, 91, 93, 98, 99, 101, 102, 103, 107, 109, 111, 112, 118, 119, 121, 136, 142, 154, 159, 161, 163, 164, 167, 168, 172, 175, 176, 183, 188, 189, 197, 201, 206, 214, 216, 218, 245, 255, 256, 276, 281, 291, 294, 296, 310, 316, 320, 361, 371, 372, 375, 378, 381, 385, 386, 388, 391, 393, 397, 398, 410, 414, 419, 422, 427, 444, 450, 452, 457, 463, 465, 468, 471, 472, 474, 480, 487, 499, 509, 522, 524, 539, 544, 548, 555, 565, 571, 574, 576, 578, 580, 595, 599, 603, 612, 615, 622, 628, 649, 678, 683, 693, 696, 719, 725, 784, 790, 804, 809, 832, 865, 872, 878, 880, 883, 886, 887, 889, 895, 905, 934], "support": [1, 29, 33, 68, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 110, 118, 121, 125, 127, 163, 164, 189, 197, 198, 205, 209, 245, 289, 415, 450, 452, 475, 509, 555, 615, 616, 649, 691, 865, 890, 917, 934], "target": [1, 29, 66, 245, 462, 481, 877, 896], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 60, 67, 68, 69, 85, 87, 88, 89, 90, 91, 92, 95, 96, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 127, 128, 132, 136, 137, 138, 140, 145, 150, 151, 152, 153, 157, 159, 161, 163, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 188, 189, 190, 192, 195, 197, 199, 200, 203, 205, 208, 209, 213, 214, 216, 217, 218, 219, 220, 222, 223, 227, 244, 245, 254, 256, 257, 266, 269, 276, 277, 281, 290, 294, 295, 303, 310, 316, 321, 332, 342, 345, 346, 355, 363, 374, 375, 376, 380, 391, 396, 397, 403, 404, 405, 406, 412, 413, 415, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 441, 443, 444, 445, 450, 451, 452, 467, 468, 473, 474, 480, 481, 484, 495, 496, 497, 498, 499, 502, 505, 510, 513, 515, 517, 523, 524, 526, 541, 545, 555, 565, 566, 568, 571, 574, 576, 578, 584, 585, 586, 588, 591, 595, 599, 600, 603, 606, 609, 611, 612, 613, 614, 615, 622, 624, 627, 628, 629, 630, 633, 648, 649, 657, 658, 667, 670, 678, 679, 683, 692, 697, 705, 719, 725, 727, 728, 738, 752, 755, 756, 765, 769, 774, 781, 782, 785, 789, 794, 795, 801, 803, 805, 808, 812, 814, 815, 816, 817, 819, 820, 822, 823, 825, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 845, 846, 847, 849, 852, 853, 854, 857, 858, 859, 860, 865, 866, 868, 882, 883, 888, 889, 895, 896, 899, 900, 903, 904, 911, 913, 915, 916, 917, 919, 920, 922, 924, 925, 934], "featur": [1, 33, 37, 51, 66, 245], "i": [1, 5, 12, 14, 27, 29, 31, 32, 37, 51, 60, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 95, 98, 99, 100, 101, 103, 107, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 127, 128, 136, 138, 146, 149, 150, 151, 152, 153, 154, 157, 158, 160, 162, 163, 164, 166, 167, 168, 170, 172, 173, 176, 178, 179, 180, 188, 189, 190, 197, 198, 199, 200, 201, 203, 209, 213, 214, 216, 217, 218, 219, 227, 244, 245, 254, 255, 256, 257, 267, 276, 279, 289, 293, 294, 316, 322, 331, 342, 346, 352, 358, 359, 360, 363, 372, 374, 376, 389, 397, 399, 406, 415, 422, 424, 426, 429, 430, 431, 432, 433, 435, 436, 437, 439, 440, 441, 445, 446, 449, 450, 451, 452, 454, 456, 457, 462, 463, 465, 467, 468, 470, 473, 474, 475, 478, 480, 481, 484, 499, 500, 503, 505, 509, 510, 512, 513, 515, 516, 517, 524, 530, 532, 535, 537, 541, 542, 543, 545, 547, 548, 555, 571, 574, 576, 578, 584, 585, 586, 589, 591, 593, 595, 599, 600, 603, 612, 613, 614, 615, 616, 617, 622, 624, 625, 630, 633, 649, 656, 657, 658, 678, 681, 691, 695, 719, 728, 737, 752, 756, 762, 769, 770, 771, 772, 774, 782, 783, 784, 785, 787, 789, 791, 801, 802, 803, 805, 806, 807, 809, 830, 832, 834, 836, 849, 850, 851, 852, 853, 854, 860, 861, 864, 865, 868, 871, 872, 877, 878, 880, 882, 883, 885, 888, 889, 890, 893, 895, 899, 905, 911, 916, 917, 923, 924, 925, 934], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 51, 60, 69, 70, 86, 88, 89, 91, 93, 94, 96, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 124, 128, 134, 136, 141, 142, 145, 150, 151, 152, 159, 161, 163, 164, 166, 170, 172, 175, 176, 179, 180, 188, 190, 192, 198, 199, 200, 206, 207, 209, 213, 214, 216, 217, 218, 219, 222, 225, 227, 245, 252, 257, 267, 276, 294, 298, 299, 303, 316, 319, 320, 355, 357, 358, 359, 360, 366, 367, 375, 376, 389, 397, 399, 402, 415, 422, 424, 426, 429, 430, 431, 432, 433, 435, 436, 437, 439, 441, 444, 445, 449, 451, 452, 454, 458, 459, 460, 466, 467, 473, 475, 477, 479, 481, 500, 504, 505, 509, 511, 512, 515, 517, 524, 526, 530, 532, 535, 537, 540, 541, 542, 543, 544, 545, 547, 554, 555, 565, 571, 573, 574, 579, 580, 584, 585, 586, 587, 591, 593, 594, 599, 609, 614, 616, 617, 622, 624, 625, 627, 631, 633, 649, 658, 678, 696, 699, 700, 705, 719, 765, 768, 770, 771, 772, 776, 777, 782, 785, 788, 807, 813, 832, 834, 836, 849, 852, 853, 854, 858, 860, 864, 868, 873, 874, 881, 882, 888, 890, 892, 896, 906, 912, 914, 915, 916, 917, 924, 925, 934], "librari": [1, 71, 78, 397, 555, 942], "author": 1, "domain": 1, "specif": [1, 25, 29, 85, 87, 89, 91, 98, 100, 101, 110, 120, 163, 245, 428, 481, 555, 649, 838, 896, 934], "capabl": [1, 29, 245], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 88, 98, 99, 100, 101, 102, 109, 110, 116, 136, 140, 151, 152, 214, 245, 254, 294, 364, 376, 378, 381, 382, 384, 385, 386, 406, 429, 430, 431, 432, 433, 435, 436, 437, 470, 548, 555, 574, 576, 585, 586, 613, 614, 622, 630, 649, 657, 775, 788, 792, 796, 797, 798, 799, 800, 852, 885, 934], "mai": [1, 33, 37, 68, 69, 85, 87, 88, 89, 91, 98, 101, 103, 110, 111, 114, 128, 138, 140, 166, 194, 195, 209, 216, 217, 245, 257, 288, 293, 294, 316, 321, 332, 346, 429, 430, 431, 432, 433, 435, 436, 437, 442, 443, 481, 515, 516, 524, 539, 555, 591, 595, 610, 611, 614, 624, 629, 633, 649, 657, 658, 690, 695, 719, 727, 738, 756, 769, 785, 830, 856, 857, 896, 934], "exist": [1, 28, 29, 101, 110, 120, 222, 245, 322, 627, 649, 728], "belong": [1, 151, 245, 585, 649], "core": [1, 209, 245], "cannot": [1, 86, 98, 99, 103, 116, 128, 190, 227, 245, 298, 399, 439, 458, 477, 486, 555, 612, 633, 649, 658, 699, 849, 873, 892, 934], "overrid": [1, 29, 85, 87, 88, 89, 90, 91, 98, 118, 119, 121, 245, 399, 555, 649, 813, 934], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 60, 61, 62, 63, 64, 66, 69, 70, 85, 87, 88, 89, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 131, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 147, 149, 150, 151, 152, 154, 156, 159, 161, 163, 165, 166, 169, 170, 171, 172, 173, 174, 176, 178, 180, 182, 184, 185, 186, 187, 188, 189, 190, 194, 195, 197, 198, 199, 200, 201, 204, 205, 206, 207, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 253, 257, 272, 273, 274, 279, 280, 281, 289, 292, 294, 318, 323, 342, 345, 346, 349, 352, 361, 363, 365, 367, 369, 374, 376, 383, 398, 399, 405, 407, 415, 417, 419, 425, 427, 429, 430, 431, 432, 433, 435, 436, 437, 443, 444, 451, 452, 485, 486, 487, 490, 501, 502, 503, 504, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 555, 560, 571, 572, 573, 574, 576, 577, 578, 581, 583, 584, 585, 586, 588, 590, 591, 599, 600, 603, 605, 606, 607, 611, 612, 613, 614, 615, 616, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 654, 675, 676, 683, 696, 703, 720, 721, 729, 752, 755, 756, 759, 762, 774, 777, 813, 822, 823, 830, 835, 852, 853, 900, 902, 912, 913, 914, 934, 938], "dt": [1, 60, 152, 245, 562, 586, 649, 940], "attempt": [1, 208, 245], "do": [1, 29, 60, 67, 109, 140, 166, 203, 213, 216, 245, 276, 316, 468, 474, 480, 502, 555, 571, 576, 591, 595, 603, 612, 613, 614, 649, 657, 678, 719, 883, 889, 895, 916, 925, 934], "so": [1, 51, 100, 109, 149, 151, 152, 180, 245, 267, 279, 376, 468, 474, 480, 555, 585, 586, 649, 681, 883, 889, 895], "rais": [1, 13, 17, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 116, 117, 188, 245, 293, 298, 405, 418, 456, 458, 470, 481, 530, 555, 695, 699, 871, 873, 885, 896, 916, 925, 934], "an": [1, 25, 28, 29, 37, 61, 63, 64, 65, 67, 70, 71, 75, 76, 78, 85, 98, 99, 100, 101, 102, 104, 107, 109, 111, 119, 120, 121, 128, 129, 130, 138, 141, 143, 145, 151, 152, 163, 164, 166, 176, 180, 186, 188, 203, 208, 216, 222, 227, 245, 253, 254, 257, 274, 276, 279, 293, 294, 298, 302, 305, 306, 307, 311, 312, 313, 314, 315, 316, 322, 355, 364, 367, 388, 397, 398, 406, 420, 428, 429, 430, 431, 432, 433, 435, 436, 437, 456, 458, 463, 481, 490, 505, 509, 521, 526, 530, 539, 540, 541, 544, 548, 555, 565, 569, 570, 571, 576, 578, 581, 585, 586, 591, 595, 603, 612, 627, 628, 633, 649, 658, 676, 678, 681, 695, 699, 703, 708, 709, 710, 711, 712, 715, 716, 717, 718, 719, 728, 765, 769, 775, 838, 839, 840, 841, 842, 843, 845, 846, 847, 852, 853, 871, 873, 878, 896, 916, 925, 934], "attributeerror": 1, "howev": [1, 88, 138, 245, 769, 934], "can": [1, 12, 29, 60, 70, 76, 88, 98, 99, 102, 103, 107, 109, 111, 113, 114, 119, 120, 121, 128, 137, 145, 151, 159, 161, 176, 180, 192, 198, 212, 213, 216, 222, 227, 245, 257, 276, 294, 312, 315, 316, 342, 352, 364, 375, 376, 410, 424, 429, 430, 431, 432, 433, 435, 436, 437, 441, 444, 446, 449, 452, 465, 468, 474, 480, 481, 499, 502, 505, 506, 509, 517, 524, 526, 545, 548, 554, 555, 571, 576, 585, 609, 616, 621, 627, 629, 633, 649, 658, 678, 696, 719, 752, 762, 775, 788, 818, 834, 852, 853, 854, 858, 861, 864, 880, 883, 889, 895, 934], "other": [1, 17, 29, 70, 98, 99, 102, 109, 116, 117, 136, 140, 146, 165, 166, 172, 173, 188, 192, 217, 222, 243, 245, 256, 267, 272, 305, 306, 307, 318, 376, 380, 399, 452, 494, 508, 510, 511, 532, 535, 544, 555, 565, 574, 590, 591, 599, 600, 609, 624, 627, 628, 649, 657, 674, 709, 710, 711, 723, 795, 851, 918, 926, 933, 934], "onli": [1, 17, 25, 29, 51, 60, 66, 68, 98, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 120, 121, 125, 128, 136, 163, 166, 170, 189, 200, 205, 207, 245, 252, 257, 267, 304, 305, 306, 307, 342, 361, 370, 424, 497, 540, 555, 571, 574, 587, 591, 594, 649, 706, 709, 710, 711, 752, 780, 834, 911, 914, 934], "gener": [1, 93, 100, 118, 119, 120, 121, 132, 180, 190, 206, 213, 245, 294, 439, 445, 555, 649, 696, 849, 860, 912, 934], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 555, 566, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 682, 683, 685, 690, 691, 692, 694, 696, 703, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 775, 776, 777, 778, 780, 783, 784, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 934], "register_expr_namespac": [1, 61, 63, 64], "greet": 1, "def": [1, 61, 62, 63, 64, 119, 120, 121, 179, 213, 245, 417, 531, 555, 602, 649], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 118], "self": [1, 61, 62, 63, 64, 67, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 143, 150, 151, 152, 154, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 296, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 555, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 649, 657, 658, 703, 712, 778, 812, 813, 824, 827, 828, 833, 852, 853, 854, 866, 922, 926, 934], "_expr": [1, 62], "hello": [1, 468, 474, 480, 502, 683, 883, 889, 895], "return": [1, 25, 27, 29, 31, 32, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 77, 79, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 124, 128, 129, 132, 135, 136, 137, 138, 139, 141, 142, 145, 149, 150, 154, 156, 162, 163, 164, 165, 167, 168, 175, 176, 178, 179, 180, 188, 189, 190, 201, 202, 209, 212, 213, 214, 222, 224, 227, 230, 234, 239, 245, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 269, 270, 271, 273, 277, 279, 280, 281, 292, 293, 297, 299, 308, 309, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 351, 352, 353, 354, 356, 363, 373, 376, 378, 379, 380, 381, 382, 384, 385, 386, 392, 396, 406, 410, 417, 425, 426, 439, 440, 446, 447, 448, 455, 457, 459, 461, 462, 463, 465, 466, 467, 469, 470, 473, 475, 476, 477, 478, 484, 489, 490, 491, 492, 493, 495, 497, 498, 499, 503, 504, 505, 506, 509, 518, 519, 520, 526, 528, 530, 531, 540, 541, 544, 546, 548, 555, 569, 571, 574, 575, 576, 578, 587, 593, 594, 595, 602, 603, 612, 613, 614, 619, 620, 621, 622, 627, 630, 636, 640, 645, 649, 654, 655, 656, 658, 665, 666, 668, 669, 672, 673, 675, 679, 681, 682, 683, 694, 695, 698, 700, 708, 720, 721, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 769, 774, 782, 784, 785, 790, 792, 793, 795, 796, 797, 798, 799, 800, 804, 806, 809, 812, 818, 830, 836, 837, 849, 850, 851, 853, 861, 870, 871, 872, 874, 876, 877, 878, 880, 881, 882, 884, 885, 888, 890, 891, 892, 893, 896, 899, 905, 907, 919, 921, 922, 926, 934], "lit": [1, 96, 124, 297, 376, 388, 515, 517, 524, 545, 548, 555, 698, 777, 934], "alia": [1, 60, 62, 64, 151, 152, 168, 215, 222, 245, 257, 269, 274, 276, 305, 306, 307, 311, 312, 313, 314, 315, 317, 321, 322, 323, 326, 327, 328, 330, 332, 333, 334, 336, 338, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 354, 355, 367, 369, 374, 376, 379, 380, 388, 391, 392, 399, 408, 416, 424, 440, 456, 457, 460, 463, 466, 469, 475, 477, 478, 479, 485, 486, 494, 495, 501, 504, 507, 508, 510, 511, 515, 516, 517, 520, 521, 524, 525, 531, 539, 540, 544, 545, 548, 555, 585, 586, 588, 594, 623, 627, 649, 670, 678, 727, 729, 734, 752, 755, 761, 765, 809, 892, 893, 934], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 468, 474, 480, 683, 883, 889, 895], "select": [1, 28, 60, 61, 62, 63, 65, 97, 98, 99, 100, 101, 103, 107, 109, 114, 128, 162, 166, 176, 179, 188, 197, 210, 215, 218, 245, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 290, 291, 294, 295, 296, 304, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 368, 370, 371, 372, 374, 375, 377, 378, 380, 381, 383, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 400, 401, 402, 409, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 467, 468, 470, 473, 474, 476, 477, 478, 480, 482, 483, 485, 486, 487, 488, 491, 492, 493, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 509, 510, 512, 513, 514, 515, 516, 517, 520, 522, 523, 524, 525, 526, 528, 532, 533, 534, 535, 536, 537, 539, 542, 543, 544, 545, 546, 547, 555, 572, 588, 591, 602, 615, 623, 628, 630, 649, 678, 696, 852, 853, 865, 877, 880, 906, 934], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 82, 85, 87, 88, 89, 90, 91, 92, 93, 96, 109, 114, 120, 121, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 165, 166, 169, 170, 171, 172, 174, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 190, 192, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 528, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 555, 569, 571, 573, 574, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 609, 610, 611, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 677, 678, 679, 682, 683, 685, 690, 691, 692, 694, 696, 703, 705, 706, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 772, 775, 776, 777, 778, 780, 783, 784, 785, 787, 788, 790, 792, 795, 796, 797, 798, 799, 800, 804, 806, 812, 813, 818, 826, 827, 828, 830, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 853, 856, 860, 861, 862, 863, 865, 866, 867, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 903, 905, 906, 907, 908, 909, 912, 913, 914, 918, 920, 921, 922, 923, 926, 934], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 100, 102, 109, 114, 115, 116, 117, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 253, 254, 257, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 302, 303, 304, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 331, 337, 339, 343, 344, 345, 346, 347, 349, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 393, 394, 395, 396, 398, 399, 410, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 451, 452, 453, 456, 459, 460, 462, 464, 466, 469, 475, 476, 477, 478, 479, 485, 486, 487, 489, 490, 491, 495, 497, 498, 499, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 521, 522, 523, 524, 525, 528, 530, 531, 532, 533, 534, 535, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 555, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 654, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 669, 677, 678, 679, 682, 685, 690, 691, 692, 694, 696, 703, 705, 706, 707, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 729, 732, 733, 734, 735, 737, 739, 740, 741, 743, 745, 746, 747, 749, 751, 753, 755, 756, 757, 761, 762, 764, 765, 769, 771, 772, 775, 776, 777, 778, 780, 783, 784, 785, 787, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 826, 827, 828, 830, 831, 832, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 860, 862, 863, 864, 865, 866, 868, 874, 875, 877, 879, 881, 884, 890, 894, 903, 904, 905, 906, 907, 908, 909, 911, 912, 915, 916, 917, 920, 921, 922, 923, 924, 926, 934], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 103, 109, 110, 114, 115, 116, 117, 118, 120, 121, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 555, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 681, 682, 685, 690, 691, 692, 694, 696, 703, 705, 706, 707, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 770, 771, 772, 775, 776, 777, 778, 780, 783, 784, 785, 787, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 808, 812, 814, 815, 816, 817, 818, 819, 820, 826, 827, 828, 830, 831, 832, 835, 836, 837, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 877, 879, 880, 886, 892, 893, 896, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 934], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 85, 87, 88, 89, 90, 91, 92, 93, 100, 109, 114, 115, 116, 117, 120, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 167, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 255, 256, 257, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323, 327, 329, 330, 332, 333, 334, 336, 337, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 352, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 452, 453, 455, 457, 460, 463, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 501, 502, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 555, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 654, 657, 658, 660, 664, 665, 666, 667, 668, 669, 677, 678, 679, 682, 683, 685, 690, 691, 692, 694, 696, 705, 706, 707, 708, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 728, 730, 731, 735, 740, 741, 747, 749, 754, 756, 757, 760, 762, 764, 766, 768, 769, 770, 771, 772, 775, 776, 777, 778, 780, 783, 784, 785, 787, 788, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 826, 827, 828, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 860, 862, 864, 865, 866, 867, 868, 870, 872, 878, 879, 880, 883, 884, 885, 886, 887, 889, 892, 893, 895, 896, 903, 904, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 926, 934], "column_0": [1, 128, 213, 245], "register_dataframe_namespac": [1, 62, 63, 64], "split": [1, 61, 164, 245, 477, 478, 892, 893], "splitfram": [1, 61], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 61, 62, 65, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 109, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 290, 291, 294, 295, 296, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 528, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 555, 586, 623, 624, 630, 633, 636, 645, 649, 678, 696, 705, 877, 880, 887, 892, 893, 913, 934], "_df": [1, 61], "by_alternate_row": 1, "list": [1, 29, 36, 60, 61, 63, 67, 69, 85, 87, 88, 89, 91, 92, 95, 97, 98, 99, 100, 101, 103, 107, 109, 110, 119, 120, 121, 131, 134, 137, 138, 139, 143, 148, 150, 151, 156, 163, 175, 178, 188, 189, 192, 198, 204, 205, 213, 214, 215, 216, 222, 225, 226, 245, 252, 272, 275, 276, 277, 280, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 363, 369, 397, 406, 407, 415, 425, 426, 428, 429, 430, 431, 432, 433, 435, 436, 437, 443, 451, 452, 463, 476, 485, 486, 490, 506, 509, 510, 517, 521, 532, 535, 544, 545, 555, 572, 573, 575, 577, 581, 584, 585, 599, 609, 616, 622, 623, 627, 628, 631, 632, 649, 671, 674, 677, 678, 679, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 707, 720, 769, 774, 778, 781, 785, 795, 830, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 850, 878, 891, 906, 915, 934], "with_row_count": [1, 245, 399, 555, 649, 853, 934], "name": [1, 15, 19, 21, 28, 29, 31, 50, 61, 62, 63, 64, 69, 70, 74, 85, 87, 88, 89, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 117, 118, 119, 120, 121, 128, 131, 134, 135, 136, 139, 144, 147, 149, 150, 163, 165, 166, 172, 178, 180, 184, 188, 189, 191, 192, 198, 204, 206, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 225, 245, 253, 257, 294, 346, 352, 361, 376, 388, 398, 405, 407, 415, 419, 452, 485, 486, 487, 502, 503, 506, 508, 509, 510, 511, 512, 514, 517, 522, 528, 529, 532, 535, 537, 538, 540, 542, 544, 545, 546, 555, 572, 573, 574, 577, 584, 590, 591, 599, 606, 608, 609, 616, 621, 622, 623, 624, 627, 629, 630, 631, 649, 654, 696, 708, 720, 756, 762, 830, 835, 900, 902, 912, 913, 917, 934], "n": [1, 11, 14, 22, 32, 36, 38, 61, 62, 63, 64, 70, 95, 96, 98, 99, 109, 124, 128, 129, 140, 151, 154, 163, 164, 168, 189, 190, 199, 201, 202, 205, 207, 219, 230, 239, 245, 275, 280, 292, 316, 317, 321, 322, 328, 351, 355, 364, 373, 392, 416, 425, 439, 449, 454, 471, 477, 478, 489, 491, 495, 500, 512, 526, 528, 537, 540, 542, 543, 546, 547, 555, 569, 571, 585, 587, 594, 617, 619, 620, 625, 636, 645, 649, 657, 677, 682, 694, 708, 719, 722, 727, 728, 734, 761, 765, 775, 784, 809, 826, 849, 864, 868, 886, 892, 893, 905, 907, 914, 919, 924, 934], "filter": [1, 61, 101, 109, 110, 114, 136, 159, 160, 161, 227, 245, 460, 479, 501, 505, 524, 555, 574, 578, 588, 633, 649, 852, 934], "col": [1, 27, 29, 60, 61, 62, 63, 65, 89, 91, 109, 119, 120, 128, 139, 143, 150, 151, 152, 160, 162, 176, 179, 188, 192, 198, 215, 222, 225, 245, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 290, 291, 294, 295, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 367, 368, 369, 370, 374, 375, 376, 377, 379, 380, 382, 383, 384, 387, 388, 389, 390, 394, 395, 396, 399, 400, 401, 402, 409, 411, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 504, 505, 508, 510, 511, 515, 516, 517, 520, 523, 524, 525, 526, 527, 532, 535, 538, 539, 545, 548, 555, 577, 581, 584, 585, 586, 588, 602, 609, 616, 623, 627, 628, 631, 649, 678, 696, 705, 752, 836, 852, 853, 877, 880, 896, 934], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 60, 61, 62, 64, 65, 69, 93, 98, 99, 100, 102, 103, 107, 109, 111, 112, 113, 114, 115, 118, 119, 120, 121, 124, 128, 129, 130, 132, 133, 134, 137, 141, 142, 145, 146, 148, 149, 150, 151, 153, 157, 162, 163, 164, 165, 167, 169, 170, 171, 174, 175, 176, 177, 181, 182, 186, 190, 191, 192, 195, 197, 198, 199, 200, 206, 207, 209, 210, 213, 216, 218, 219, 222, 223, 225, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 251, 252, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 274, 276, 279, 285, 294, 302, 304, 306, 307, 308, 309, 311, 316, 319, 320, 329, 333, 334, 336, 337, 341, 347, 348, 358, 359, 360, 362, 363, 364, 365, 366, 370, 372, 375, 378, 381, 382, 384, 385, 386, 388, 389, 394, 395, 397, 399, 400, 401, 402, 409, 412, 413, 414, 416, 417, 418, 421, 422, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 444, 446, 447, 448, 449, 453, 454, 462, 481, 484, 488, 492, 493, 494, 500, 505, 506, 507, 508, 510, 512, 514, 515, 517, 521, 524, 533, 534, 537, 538, 539, 542, 545, 547, 548, 555, 569, 570, 573, 575, 579, 580, 584, 585, 590, 593, 598, 603, 604, 608, 609, 611, 612, 614, 616, 617, 625, 627, 628, 629, 631, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 649, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 678, 681, 703, 706, 708, 713, 714, 719, 720, 721, 723, 735, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 757, 758, 768, 770, 771, 772, 774, 776, 780, 783, 785, 792, 794, 796, 797, 798, 799, 800, 806, 807, 812, 815, 816, 826, 830, 831, 832, 838, 840, 841, 843, 844, 845, 847, 849, 861, 862, 863, 867, 868, 870, 877, 880, 899, 908, 909, 912, 917, 918, 922, 924, 925, 934], "drop": [1, 88, 128, 135, 136, 214, 222, 245, 275, 317, 319, 320, 481, 555, 574, 622, 627, 649, 677, 722, 724, 725, 934], "aaa": [1, 29, 245, 485, 486], "bbb": [1, 29, 245, 485, 486], "ccc": [1, 29, 245, 485, 486], "ddd": [1, 29, 245, 485, 486], "eee": [1, 29, 245], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 51, 60, 61, 68, 69, 70, 72, 74, 85, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 111, 112, 113, 116, 120, 127, 128, 134, 135, 136, 137, 139, 144, 147, 149, 150, 151, 152, 156, 157, 163, 165, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 191, 192, 198, 199, 200, 204, 206, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 225, 245, 254, 255, 257, 266, 269, 272, 277, 290, 293, 294, 322, 326, 329, 331, 332, 333, 335, 337, 339, 340, 343, 344, 347, 353, 354, 356, 361, 363, 367, 369, 376, 388, 399, 404, 405, 407, 415, 419, 423, 425, 426, 429, 430, 431, 432, 433, 435, 436, 437, 444, 451, 452, 461, 477, 478, 481, 487, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 555, 573, 574, 575, 577, 584, 585, 586, 590, 591, 595, 596, 597, 598, 599, 601, 602, 604, 606, 608, 609, 616, 617, 618, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 649, 655, 656, 674, 679, 692, 695, 720, 730, 731, 732, 735, 737, 738, 742, 744, 747, 749, 750, 753, 754, 757, 760, 763, 764, 766, 774, 830, 836, 858, 876, 892, 893, 903, 912, 913, 934], "txt": [1, 109], "utf8": [1, 9, 17, 51, 88, 92, 98, 99, 109, 118, 137, 138, 139, 145, 191, 208, 245, 281, 363, 399, 455, 459, 462, 463, 465, 466, 475, 476, 477, 478, 481, 509, 511, 555, 575, 577, 608, 649, 683, 759, 774, 805, 870, 874, 877, 878, 880, 881, 890, 891, 892, 893, 896, 934], "register_lazyframe_namespac": [1, 61, 62, 64], "dtypeoper": [1, 63], "ldf": [1, 63, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645], "_ldf": [1, 63], "upcast_integer_typ": [1, 63], "with_column": [1, 63, 152, 179, 245, 257, 267, 276, 302, 303, 305, 306, 307, 312, 315, 317, 372, 375, 376, 379, 382, 384, 385, 386, 388, 399, 415, 416, 417, 460, 466, 469, 471, 472, 475, 477, 478, 479, 481, 484, 494, 504, 505, 508, 511, 517, 521, 531, 545, 548, 555, 586, 602, 649, 678, 705, 896], "tp": [1, 63], "cast": [1, 62, 63, 85, 123, 145, 151, 152, 179, 209, 222, 245, 256, 303, 314, 315, 321, 399, 417, 424, 464, 465, 484, 488, 494, 511, 555, 585, 586, 602, 627, 649, 705, 717, 718, 727, 834, 879, 880, 904, 913, 918, 934], "int64": [1, 29, 31, 62, 63, 92, 96, 98, 124, 137, 145, 151, 152, 179, 191, 203, 209, 245, 314, 315, 327, 330, 334, 336, 338, 341, 348, 361, 417, 424, 464, 488, 494, 505, 509, 522, 544, 555, 575, 585, 586, 602, 608, 630, 649, 717, 718, 733, 736, 743, 745, 748, 751, 758, 834, 851, 904, 916, 917, 918, 934], "int8": [1, 63, 145, 245, 314, 315, 488, 555, 717, 718, 722, 813, 837, 904, 922, 934], "int16": [1, 63, 314, 315, 488, 555, 717, 718, 813, 904, 914, 934], "int32": [1, 63, 88, 92, 120, 121, 151, 152, 164, 245, 302, 332, 356, 494, 555, 585, 586, 649, 738, 766, 812, 918, 934], "b": [1, 26, 27, 30, 33, 51, 63, 68, 85, 87, 88, 89, 90, 91, 92, 93, 102, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 156, 157, 159, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 253, 256, 257, 268, 272, 276, 281, 283, 296, 302, 303, 310, 318, 319, 320, 361, 365, 366, 367, 369, 371, 372, 375, 376, 378, 381, 382, 383, 384, 385, 386, 388, 391, 393, 398, 410, 414, 415, 417, 419, 427, 444, 450, 452, 461, 464, 471, 487, 497, 499, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 521, 522, 523, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 539, 542, 543, 544, 545, 546, 547, 555, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 587, 590, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 657, 678, 705, 721, 723, 768, 769, 777, 788, 795, 805, 835, 851, 876, 879, 886, 903, 917, 921, 934], "4": [1, 14, 22, 26, 27, 29, 30, 33, 51, 60, 61, 62, 63, 64, 65, 68, 70, 85, 87, 88, 89, 90, 91, 92, 93, 109, 116, 117, 121, 128, 129, 130, 133, 136, 139, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 170, 172, 175, 176, 178, 179, 180, 181, 185, 189, 193, 198, 201, 202, 203, 204, 205, 206, 211, 213, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 256, 257, 268, 274, 275, 276, 277, 280, 288, 289, 292, 296, 302, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 326, 330, 337, 338, 339, 343, 344, 346, 347, 348, 352, 353, 354, 356, 362, 365, 366, 369, 370, 371, 373, 374, 375, 376, 385, 386, 388, 391, 393, 395, 398, 399, 415, 418, 419, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 440, 442, 443, 446, 450, 451, 452, 453, 456, 466, 467, 469, 470, 473, 475, 477, 478, 481, 485, 486, 487, 489, 490, 491, 494, 495, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 521, 523, 524, 528, 531, 532, 533, 534, 535, 536, 537, 542, 543, 544, 545, 546, 547, 548, 555, 569, 570, 571, 574, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 610, 611, 612, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 657, 660, 667, 677, 678, 679, 682, 690, 691, 694, 706, 707, 709, 719, 721, 723, 735, 736, 742, 744, 747, 748, 749, 750, 754, 756, 757, 758, 759, 762, 763, 764, 776, 777, 784, 785, 787, 788, 790, 795, 797, 798, 799, 800, 804, 813, 819, 826, 827, 828, 830, 832, 836, 841, 843, 844, 845, 846, 847, 849, 851, 861, 865, 866, 871, 881, 882, 884, 885, 888, 890, 892, 893, 896, 903, 905, 906, 907, 914, 917, 918, 926, 934], "c": [1, 26, 27, 30, 33, 51, 61, 63, 88, 90, 92, 102, 109, 119, 129, 130, 131, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 148, 149, 150, 151, 154, 156, 157, 164, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 184, 186, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 207, 208, 209, 210, 213, 216, 217, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 235, 238, 239, 245, 257, 272, 281, 283, 376, 388, 415, 417, 444, 477, 481, 497, 499, 502, 503, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 523, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 542, 543, 545, 546, 547, 555, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 584, 585, 590, 593, 599, 603, 606, 607, 608, 609, 612, 615, 616, 624, 627, 628, 631, 634, 635, 636, 637, 638, 639, 641, 644, 645, 649, 721, 788, 805, 892, 896, 921, 934], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 60, 61, 63, 64, 65, 68, 69, 85, 88, 89, 90, 91, 92, 95, 96, 99, 115, 120, 121, 124, 128, 129, 130, 133, 139, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 162, 163, 166, 167, 168, 170, 172, 175, 176, 178, 180, 181, 182, 185, 189, 193, 198, 201, 202, 203, 204, 205, 211, 216, 218, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 269, 274, 276, 277, 280, 285, 291, 292, 302, 303, 304, 305, 306, 307, 316, 317, 318, 322, 323, 327, 345, 347, 348, 349, 353, 360, 361, 364, 370, 373, 376, 379, 382, 384, 385, 386, 388, 393, 415, 416, 419, 421, 422, 426, 427, 428, 429, 430, 432, 436, 438, 440, 446, 452, 457, 465, 466, 469, 470, 484, 487, 489, 491, 495, 504, 507, 508, 510, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 528, 531, 532, 533, 534, 535, 536, 537, 539, 542, 543, 545, 546, 547, 555, 569, 570, 571, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 589, 591, 592, 593, 594, 597, 598, 599, 603, 610, 611, 612, 615, 616, 617, 618, 619, 620, 626, 627, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 657, 660, 664, 667, 670, 678, 679, 682, 685, 694, 705, 707, 709, 715, 719, 720, 721, 722, 723, 728, 729, 730, 731, 732, 733, 755, 757, 758, 760, 763, 764, 772, 775, 784, 785, 787, 788, 812, 813, 819, 826, 827, 828, 830, 831, 832, 836, 838, 839, 840, 842, 843, 846, 849, 851, 861, 867, 872, 880, 881, 885, 905, 919, 922, 926, 934], "6": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 85, 88, 89, 90, 91, 93, 128, 131, 134, 135, 136, 137, 139, 140, 143, 144, 146, 147, 148, 149, 151, 152, 154, 156, 157, 158, 160, 162, 163, 165, 169, 170, 171, 172, 174, 177, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218, 219, 220, 222, 223, 230, 238, 239, 245, 257, 277, 296, 302, 314, 315, 318, 322, 342, 344, 347, 357, 365, 366, 371, 373, 375, 393, 420, 422, 423, 426, 429, 430, 431, 432, 433, 435, 436, 437, 440, 452, 457, 461, 466, 469, 470, 489, 491, 502, 504, 515, 516, 517, 521, 524, 531, 545, 555, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 585, 586, 587, 589, 590, 592, 594, 595, 599, 603, 606, 608, 609, 610, 611, 612, 615, 616, 619, 620, 623, 624, 626, 627, 629, 630, 636, 644, 645, 649, 657, 679, 707, 713, 717, 718, 721, 723, 752, 764, 785, 819, 832, 836, 841, 843, 844, 845, 847, 851, 872, 876, 881, 885, 904, 934], "7": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 70, 131, 132, 133, 134, 135, 137, 139, 143, 144, 146, 151, 152, 154, 156, 158, 165, 169, 170, 171, 174, 177, 182, 184, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 207, 208, 209, 210, 216, 217, 218, 219, 220, 245, 315, 322, 326, 343, 345, 346, 352, 354, 356, 362, 373, 375, 399, 426, 430, 436, 452, 489, 491, 504, 515, 516, 524, 531, 545, 555, 572, 573, 575, 577, 581, 585, 586, 587, 589, 590, 594, 604, 606, 608, 609, 619, 620, 624, 630, 649, 664, 728, 732, 738, 756, 762, 764, 813, 836, 846, 934], "float32": [1, 27, 63, 145, 207, 245, 649, 791, 812, 934], "lazi": [1, 63, 68, 70, 96, 109, 120, 124, 166, 179, 245, 257, 294, 505, 526, 555, 565, 590, 591, 628, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 649], "i16": [1, 63, 444, 555, 813, 914, 934], "i32": [1, 63, 88, 92, 120, 192, 245, 302, 332, 356, 444, 470, 548, 555, 609, 649, 738, 766, 812, 885, 934], "f32": [1, 63, 207, 245, 276, 422, 444, 521, 555, 649, 678, 812, 832, 934], "i64": [1, 14, 18, 61, 62, 63, 64, 68, 85, 87, 88, 89, 90, 91, 92, 96, 109, 121, 124, 128, 129, 130, 131, 134, 136, 137, 139, 140, 142, 143, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 162, 165, 166, 169, 172, 174, 178, 179, 180, 181, 184, 185, 186, 187, 190, 192, 194, 195, 197, 198, 200, 201, 202, 204, 210, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 238, 239, 245, 253, 256, 257, 275, 276, 277, 278, 279, 280, 282, 284, 286, 287, 288, 289, 290, 291, 292, 295, 296, 303, 305, 306, 307, 312, 313, 314, 315, 317, 318, 327, 328, 330, 334, 336, 338, 341, 348, 351, 361, 364, 366, 367, 368, 369, 371, 373, 374, 375, 376, 379, 382, 384, 385, 386, 388, 390, 393, 396, 397, 398, 410, 415, 416, 417, 419, 420, 423, 424, 426, 427, 439, 441, 442, 444, 445, 446, 450, 451, 452, 471, 472, 485, 486, 487, 488, 489, 490, 491, 495, 496, 498, 501, 502, 504, 508, 509, 511, 515, 516, 517, 521, 522, 523, 524, 528, 531, 532, 535, 539, 541, 545, 546, 548, 555, 569, 571, 573, 574, 577, 578, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 596, 599, 601, 602, 603, 606, 607, 609, 610, 611, 615, 616, 618, 619, 620, 622, 623, 624, 627, 629, 631, 632, 633, 635, 636, 637, 638, 641, 644, 645, 649, 657, 658, 677, 678, 679, 682, 690, 691, 692, 694, 705, 709, 712, 715, 716, 717, 718, 721, 733, 734, 736, 743, 745, 748, 751, 755, 758, 761, 775, 777, 778, 784, 787, 795, 818, 835, 836, 839, 842, 846, 849, 852, 853, 856, 860, 861, 865, 866, 903, 905, 906, 907, 913, 920, 923, 926, 934], "register_series_namespac": [1, 61, 62, 63], "math": [1, 64, 713, 862, 908, 934], "mathshortcut": [1, 64], "": [1, 27, 29, 64, 69, 93, 98, 99, 110, 121, 134, 136, 138, 139, 150, 151, 157, 165, 166, 178, 180, 185, 186, 192, 198, 202, 206, 212, 214, 215, 216, 245, 280, 281, 288, 289, 292, 328, 349, 361, 389, 406, 410, 412, 413, 415, 416, 424, 428, 452, 466, 467, 469, 473, 475, 476, 478, 481, 484, 485, 486, 506, 509, 512, 517, 520, 522, 525, 526, 532, 535, 537, 544, 545, 555, 573, 574, 577, 584, 585, 591, 609, 616, 621, 622, 623, 633, 649, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 679, 682, 683, 685, 690, 691, 692, 694, 703, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 728, 734, 755, 756, 762, 769, 771, 772, 775, 776, 777, 778, 780, 783, 784, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 826, 827, 828, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 860, 861, 862, 863, 865, 866, 868, 871, 872, 874, 875, 876, 878, 879, 881, 882, 883, 884, 885, 886, 888, 889, 890, 893, 894, 895, 896, 899, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 918, 920, 921, 922, 923, 924, 925, 934], "_": [1, 60, 64, 93, 180, 206, 245, 477, 892, 912, 934], "squar": [1, 64, 227, 389, 453, 555, 633, 807, 867, 934], "cube": [1, 64], "s2": [1, 117, 145, 245, 657, 707, 723, 795, 819, 851, 917, 926, 934], "renam": [1, 88, 98, 99, 192, 222, 225, 245, 253, 398, 408, 486, 541, 544, 555, 609, 627, 631, 649, 813, 902, 913, 934], "n2": 1, "in_plac": [1, 156, 196, 220, 245, 833, 835, 859, 866, 934], "true": [1, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 65, 67, 68, 70, 85, 86, 90, 95, 98, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 125, 127, 129, 130, 133, 142, 145, 146, 148, 149, 150, 151, 157, 159, 160, 161, 163, 166, 167, 170, 175, 176, 178, 180, 181, 188, 189, 190, 192, 198, 204, 209, 212, 213, 214, 215, 216, 218, 222, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 252, 254, 255, 256, 257, 267, 273, 290, 293, 298, 302, 311, 312, 313, 314, 315, 331, 346, 347, 352, 357, 358, 359, 360, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 424, 434, 439, 444, 449, 451, 452, 456, 458, 460, 464, 465, 470, 476, 477, 479, 481, 485, 486, 490, 495, 496, 499, 503, 504, 505, 506, 512, 513, 524, 540, 542, 544, 548, 555, 569, 570, 571, 576, 578, 580, 584, 585, 590, 591, 593, 595, 599, 603, 609, 612, 613, 614, 616, 621, 622, 623, 627, 632, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 649, 655, 656, 657, 658, 668, 692, 695, 699, 703, 707, 708, 737, 756, 757, 762, 768, 770, 771, 772, 778, 782, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 807, 819, 827, 828, 834, 844, 851, 864, 866, 871, 873, 875, 879, 880, 885, 891, 892, 894, 896, 916, 917, 919, 925, 926, 934], "s3": [1, 101, 110, 114, 934], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 57, 59, 60, 61, 63, 64, 68, 69, 93, 115, 119, 120, 128, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 146, 149, 154, 156, 165, 169, 170, 171, 174, 182, 184, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 207, 208, 209, 210, 216, 217, 219, 220, 222, 245, 256, 268, 275, 276, 310, 312, 315, 316, 319, 320, 322, 375, 391, 418, 419, 426, 427, 430, 431, 433, 435, 437, 444, 450, 452, 467, 473, 481, 487, 491, 507, 512, 513, 514, 516, 517, 521, 523, 528, 531, 532, 533, 534, 535, 536, 537, 542, 543, 545, 546, 547, 555, 572, 573, 574, 575, 577, 581, 587, 590, 594, 595, 603, 606, 608, 609, 619, 620, 624, 627, 630, 649, 677, 678, 719, 738, 785, 826, 830, 836, 838, 841, 843, 844, 845, 847, 882, 888, 896, 934], "9": [1, 26, 27, 30, 33, 60, 68, 128, 132, 145, 152, 154, 158, 192, 201, 216, 217, 220, 222, 238, 245, 256, 268, 275, 287, 290, 310, 312, 315, 319, 320, 322, 326, 343, 353, 354, 375, 380, 388, 391, 426, 428, 430, 436, 446, 450, 491, 504, 510, 515, 516, 555, 586, 587, 589, 594, 609, 619, 624, 627, 644, 649, 677, 692, 732, 742, 744, 750, 756, 757, 762, 763, 795, 836, 838, 846, 848, 861, 934], "27": [1, 64, 238, 315, 332, 344, 356, 418, 555, 644, 934], "16": [1, 29, 41, 54, 62, 69, 93, 115, 151, 152, 222, 245, 269, 312, 315, 363, 375, 430, 470, 481, 504, 515, 520, 521, 524, 537, 542, 555, 585, 586, 612, 627, 649, 670, 756, 762, 774, 826, 862, 885, 908, 934], "64": [1, 33, 40, 43, 56, 62, 64, 245, 418, 555, 614, 649, 826, 934], "25": [1, 29, 64, 70, 92, 151, 152, 166, 218, 222, 245, 317, 332, 346, 352, 356, 526, 555, 585, 586, 591, 597, 625, 627, 649, 722, 756, 762, 768, 785, 826, 830, 934], "125": [1, 29, 64, 245, 826, 934], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 179, 209, 245, 417, 506, 525, 555, 602, 649, 658, 916, 917, 934], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 66, 85, 86, 87, 88, 89, 90, 91, 98, 99, 101, 102, 103, 107, 109, 110, 111, 113, 118, 120, 121, 125, 128, 132, 136, 140, 142, 143, 145, 162, 163, 164, 178, 179, 188, 189, 204, 205, 208, 209, 214, 216, 245, 257, 272, 276, 302, 347, 366, 380, 397, 399, 408, 417, 426, 428, 440, 443, 470, 481, 490, 504, 512, 523, 530, 542, 548, 555, 574, 580, 602, 622, 649, 657, 658, 674, 678, 723, 757, 777, 795, 806, 813, 836, 838, 850, 853, 885, 896, 906, 915, 916, 917, 934], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 132, 179, 209, 245, 417, 555, 602, 649, 917, 934], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 555, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 934, 941], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 86, 98, 99, 102, 118, 136, 150, 158, 163, 176, 182, 188, 189, 214, 222, 237, 245, 254, 364, 375, 421, 422, 429, 430, 431, 432, 433, 435, 436, 437, 497, 512, 537, 538, 542, 549, 551, 555, 556, 557, 560, 561, 562, 565, 574, 589, 604, 622, 627, 643, 649, 658, 775, 787, 831, 832, 843, 918, 928, 930, 934, 935, 938, 939, 940], "A": [4, 27, 29, 48, 67, 70, 92, 98, 99, 100, 107, 109, 145, 151, 166, 180, 189, 204, 216, 217, 218, 222, 245, 251, 294, 322, 327, 330, 334, 336, 338, 341, 348, 364, 378, 381, 382, 384, 397, 398, 406, 419, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 456, 457, 462, 463, 465, 471, 472, 484, 487, 510, 521, 525, 555, 585, 591, 606, 624, 627, 649, 696, 728, 733, 736, 743, 745, 748, 751, 758, 775, 838, 839, 840, 842, 845, 846, 847, 871, 872, 877, 878, 880, 886, 887, 896, 899, 934], "encod": [4, 59, 98, 99, 109, 298, 458, 699, 873], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 31, 32, 61, 65, 70, 86, 88, 91, 93, 98, 99, 102, 103, 107, 109, 111, 112, 113, 116, 117, 119, 120, 121, 125, 127, 131, 136, 150, 153, 163, 166, 172, 190, 192, 197, 206, 213, 214, 216, 222, 245, 257, 289, 293, 294, 355, 372, 380, 399, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 445, 449, 450, 468, 474, 475, 480, 505, 540, 544, 548, 555, 572, 574, 576, 584, 590, 591, 595, 599, 609, 613, 614, 615, 622, 627, 630, 633, 649, 657, 658, 691, 695, 696, 765, 783, 795, 813, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 853, 860, 864, 865, 883, 889, 890, 895, 916, 934], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 51, 59, 70, 92, 98, 99, 109, 118, 119, 121, 123, 145, 149, 150, 151, 152, 166, 192, 198, 207, 212, 216, 218, 222, 225, 245, 281, 300, 303, 342, 346, 352, 363, 369, 376, 399, 415, 429, 430, 431, 432, 433, 435, 436, 437, 452, 455, 456, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 506, 508, 510, 511, 525, 532, 535, 544, 555, 576, 583, 584, 585, 586, 591, 609, 616, 621, 627, 630, 631, 649, 683, 701, 705, 752, 756, 762, 774, 788, 869, 870, 871, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 914, 934], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 583, 605, 649], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 276, 678], "decim": [5, 27, 29, 245, 438, 555, 848, 934], "temporari": 5, "remov": [5, 7, 134, 217, 245, 257, 269, 361, 363, 468, 474, 480, 481, 522, 537, 542, 555, 573, 624, 649, 670, 774, 883, 889, 895, 934], "later": 5, "onc": [5, 98, 99, 102, 127, 128, 190, 225, 245, 257, 439, 555, 568, 631, 649, 658, 849, 934], "stabil": 5, "happen": 5, "being": [5, 69, 98, 99, 109, 114, 216, 217, 245, 257, 316, 346, 429, 430, 431, 432, 433, 435, 436, 437, 521, 555, 624, 649, 719, 756, 785, 830, 934], "consid": [5, 69, 98, 99, 109, 114, 128, 136, 146, 172, 214, 216, 217, 245, 257, 305, 306, 307, 316, 346, 429, 430, 431, 432, 433, 435, 436, 437, 515, 524, 555, 574, 587, 594, 599, 622, 624, 649, 658, 709, 710, 711, 719, 756, 785, 830, 851, 852, 853, 934], "break": [5, 69, 114, 216, 217, 245, 257, 316, 346, 429, 430, 431, 432, 433, 435, 436, 437, 555, 624, 649, 719, 756, 785, 830, 934], "chang": [5, 25, 60, 69, 98, 99, 114, 216, 217, 218, 245, 257, 316, 317, 346, 416, 429, 430, 431, 432, 433, 435, 436, 437, 555, 624, 649, 719, 755, 756, 785, 826, 830, 859, 934], "current": [5, 8, 25, 86, 92, 100, 127, 129, 130, 245, 294, 346, 416, 555, 565, 569, 570, 649, 708, 712, 756, 826, 934], "alpha": [5, 67, 257, 358, 359, 360, 555, 571, 576, 578, 603, 612, 649, 770, 771, 772, 934], "stage": [5, 257, 555], "cfg": [6, 7, 8, 14, 125, 192, 222, 245, 609, 627, 649], "previous": 6, "save": [6, 565], "share": [6, 51, 138, 245, 769, 934], "option": [6, 7, 8, 25, 29, 37, 60, 70, 98, 101, 102, 103, 107, 110, 111, 113, 115, 118, 119, 120, 121, 166, 172, 204, 213, 245, 389, 428, 429, 430, 431, 432, 433, 435, 436, 437, 449, 475, 530, 544, 548, 555, 565, 590, 591, 599, 649, 803, 807, 838, 839, 840, 841, 842, 843, 845, 846, 847, 853, 864, 890, 913, 934], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 50, 52, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 124, 127, 128, 129, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 163, 164, 165, 166, 168, 170, 172, 173, 175, 176, 178, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 194, 195, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 227, 230, 237, 239, 245, 253, 256, 257, 266, 269, 272, 273, 274, 275, 276, 279, 280, 281, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 328, 342, 345, 346, 351, 352, 355, 357, 358, 359, 360, 361, 364, 366, 367, 371, 372, 373, 375, 376, 380, 389, 392, 394, 397, 398, 399, 415, 416, 417, 418, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 489, 490, 495, 496, 499, 500, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 528, 529, 530, 531, 532, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 555, 569, 571, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 590, 591, 594, 595, 599, 600, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 636, 643, 645, 649, 654, 657, 658, 667, 670, 674, 675, 676, 677, 678, 681, 682, 683, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 722, 723, 727, 728, 729, 734, 752, 755, 756, 761, 762, 765, 768, 769, 770, 771, 772, 775, 776, 777, 778, 783, 784, 785, 787, 788, 802, 803, 807, 809, 813, 826, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 860, 864, 865, 866, 868, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 902, 905, 906, 912, 913, 914, 915, 916, 917, 919, 920, 923, 924, 925, 926, 934], "json": [6, 8, 31, 32, 105, 106, 112, 245, 464, 465, 565, 583, 605, 630, 649, 879, 880], "produc": [6, 120, 121, 274, 405, 531, 595, 649, 676], "reset": [7, 125], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 65, 85, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 107, 109, 118, 119, 120, 121, 124, 136, 138, 150, 152, 153, 163, 166, 172, 178, 180, 188, 189, 190, 199, 206, 214, 216, 219, 223, 245, 289, 293, 294, 303, 357, 358, 359, 360, 372, 394, 399, 412, 413, 416, 422, 439, 445, 454, 462, 468, 470, 474, 475, 480, 481, 500, 505, 512, 526, 530, 537, 540, 542, 543, 544, 547, 555, 574, 576, 584, 586, 591, 599, 614, 617, 622, 625, 630, 649, 691, 695, 696, 705, 768, 769, 770, 771, 772, 783, 813, 822, 823, 826, 832, 849, 860, 868, 877, 883, 885, 889, 890, 895, 924, 934], "state": [7, 67, 78, 515, 565, 571, 576, 578, 603, 612, 649], "note": [7, 17, 29, 37, 60, 70, 85, 86, 87, 89, 91, 92, 96, 98, 100, 101, 107, 109, 110, 119, 120, 121, 124, 125, 127, 128, 132, 141, 151, 152, 163, 165, 166, 176, 179, 188, 189, 205, 208, 213, 217, 218, 222, 245, 257, 276, 293, 314, 315, 319, 320, 342, 346, 352, 376, 382, 384, 429, 430, 431, 432, 433, 435, 436, 437, 449, 466, 468, 469, 474, 480, 481, 488, 515, 524, 539, 548, 555, 571, 578, 579, 585, 586, 587, 591, 594, 606, 612, 624, 627, 649, 658, 678, 695, 717, 718, 752, 762, 852, 853, 859, 864, 881, 883, 884, 889, 895, 904, 934], "oper": [7, 29, 51, 68, 75, 76, 85, 87, 88, 89, 90, 91, 98, 107, 128, 140, 145, 150, 157, 167, 173, 176, 178, 179, 183, 203, 208, 209, 213, 216, 224, 225, 245, 252, 294, 311, 312, 313, 314, 315, 316, 388, 408, 424, 502, 503, 510, 511, 521, 555, 578, 584, 587, 590, 594, 599, 600, 631, 649, 657, 715, 716, 717, 718, 719, 834, 911, 915, 916, 917, 925, 934], "from": [7, 27, 29, 60, 68, 70, 85, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 133, 134, 138, 140, 149, 151, 152, 163, 164, 166, 167, 172, 184, 188, 190, 192, 213, 214, 216, 218, 245, 311, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 361, 375, 389, 412, 413, 416, 439, 452, 462, 464, 470, 481, 497, 499, 508, 518, 519, 520, 530, 542, 543, 554, 555, 573, 578, 583, 585, 586, 591, 599, 605, 606, 609, 622, 628, 649, 657, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 769, 803, 807, 822, 823, 824, 826, 849, 877, 879, 885, 923, 926, 934], "environ": [7, 25], "local": [7, 101, 110, 730, 731, 760, 827, 828, 934], "non": [7, 29, 37, 60, 90, 164, 172, 192, 217, 222, 245, 376, 416, 428, 429, 430, 431, 432, 433, 435, 436, 437, 457, 463, 508, 510, 511, 532, 535, 544, 555, 599, 609, 624, 627, 649, 696, 788, 826, 838, 839, 840, 841, 842, 843, 845, 846, 847, 872, 878, 916, 934], "env": 7, "back": [7, 60, 140, 209, 245, 415, 555, 657, 917, 934], "valu": [7, 10, 11, 25, 27, 29, 31, 45, 46, 58, 60, 68, 69, 88, 90, 98, 99, 100, 109, 114, 116, 117, 118, 119, 120, 121, 123, 125, 127, 128, 136, 140, 141, 142, 146, 149, 151, 152, 153, 154, 158, 163, 168, 169, 170, 171, 172, 174, 176, 178, 180, 181, 182, 184, 188, 189, 190, 194, 195, 198, 199, 200, 201, 204, 205, 209, 212, 216, 217, 218, 219, 228, 229, 231, 232, 233, 235, 236, 245, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 275, 278, 279, 280, 282, 284, 285, 286, 288, 291, 292, 294, 295, 296, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 319, 320, 322, 326, 339, 343, 353, 358, 359, 360, 362, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 390, 391, 395, 396, 397, 399, 400, 401, 402, 409, 410, 411, 412, 413, 414, 416, 421, 422, 425, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 440, 441, 442, 443, 446, 447, 448, 449, 451, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 471, 472, 475, 477, 478, 479, 484, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 503, 508, 511, 513, 515, 516, 517, 523, 524, 530, 532, 533, 534, 535, 536, 539, 540, 545, 548, 555, 574, 579, 580, 585, 586, 588, 589, 596, 597, 598, 599, 601, 604, 606, 610, 611, 616, 617, 618, 621, 624, 625, 630, 634, 635, 637, 638, 639, 641, 642, 649, 653, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 676, 677, 680, 681, 682, 684, 686, 687, 688, 690, 694, 697, 699, 700, 701, 702, 705, 706, 709, 710, 711, 713, 714, 719, 720, 721, 722, 724, 725, 728, 732, 749, 753, 763, 769, 770, 771, 772, 775, 776, 777, 780, 782, 783, 784, 785, 787, 788, 790, 792, 793, 795, 796, 797, 798, 799, 800, 804, 809, 813, 814, 815, 817, 818, 820, 822, 823, 824, 825, 826, 829, 830, 831, 832, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 856, 857, 861, 862, 863, 864, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 884, 886, 887, 890, 892, 893, 894, 899, 904, 905, 906, 907, 908, 909, 917, 918, 921, 923, 925, 926, 934], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 102, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 555, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 682, 683, 685, 690, 691, 692, 694, 696, 703, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 775, 776, 777, 778, 780, 783, 784, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 808, 812, 813, 814, 815, 816, 817, 818, 819, 820, 826, 827, 828, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 934], "bool": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 60, 65, 67, 68, 85, 86, 90, 98, 99, 103, 107, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 127, 129, 130, 142, 143, 145, 146, 148, 149, 150, 151, 156, 157, 159, 160, 161, 166, 178, 180, 190, 196, 198, 204, 209, 212, 213, 214, 215, 218, 220, 222, 229, 231, 232, 235, 245, 254, 255, 256, 257, 266, 269, 273, 274, 276, 290, 293, 295, 298, 302, 311, 312, 313, 314, 315, 316, 331, 347, 357, 358, 359, 360, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 397, 403, 404, 422, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 441, 443, 444, 449, 451, 452, 456, 458, 460, 470, 471, 472, 476, 477, 479, 481, 486, 495, 496, 499, 503, 504, 505, 506, 512, 515, 530, 540, 542, 544, 555, 569, 571, 576, 578, 580, 581, 584, 585, 590, 591, 595, 599, 603, 612, 613, 614, 616, 621, 622, 623, 627, 635, 637, 638, 641, 649, 655, 656, 657, 658, 667, 670, 675, 676, 678, 692, 695, 697, 699, 703, 708, 715, 716, 717, 718, 719, 720, 737, 757, 768, 770, 771, 772, 778, 782, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 827, 828, 830, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 853, 854, 859, 864, 866, 871, 873, 875, 885, 886, 887, 891, 892, 894, 896, 915, 916, 917, 919, 920, 923, 925, 934], "ascii": [9, 17, 467, 469, 473, 484, 882, 884, 888, 899], "charact": [9, 11, 17, 23, 27, 98, 99, 109, 245, 342, 461, 466, 467, 468, 473, 474, 476, 477, 480, 484, 603, 649, 752, 876, 881, 882, 883, 888, 889, 891, 892, 895, 899], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 245], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 85, 92, 98, 99, 101, 109, 110, 180, 203, 209, 216, 217, 245, 624, 649, 917, 934], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 60, 65, 67, 70, 86, 90, 98, 99, 102, 103, 107, 109, 112, 113, 116, 117, 118, 119, 120, 121, 127, 129, 130, 133, 145, 146, 148, 149, 150, 151, 156, 157, 159, 160, 161, 163, 166, 167, 170, 175, 176, 178, 180, 181, 188, 189, 190, 196, 198, 204, 209, 212, 213, 218, 220, 222, 228, 229, 231, 232, 233, 235, 238, 245, 254, 255, 257, 266, 269, 273, 276, 290, 293, 295, 311, 312, 313, 314, 315, 316, 331, 347, 357, 358, 359, 360, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 397, 422, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 441, 444, 449, 451, 452, 456, 460, 464, 470, 471, 472, 476, 477, 479, 481, 495, 496, 499, 503, 505, 506, 512, 515, 530, 540, 542, 544, 548, 555, 569, 570, 571, 576, 578, 584, 585, 590, 591, 593, 595, 603, 612, 613, 614, 616, 621, 627, 634, 635, 637, 638, 639, 641, 644, 649, 657, 667, 670, 678, 692, 695, 697, 703, 707, 708, 715, 716, 717, 718, 719, 720, 737, 757, 768, 770, 771, 772, 778, 788, 789, 790, 792, 795, 796, 797, 798, 799, 800, 802, 803, 804, 807, 819, 827, 828, 830, 832, 833, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 854, 859, 864, 866, 871, 875, 879, 885, 886, 887, 891, 892, 894, 896, 915, 916, 917, 919, 920, 923, 925, 926, 934], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 471, 886], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 457, 463, 872, 878, 913, 934], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 60, 62, 64, 69, 88, 114, 120, 129, 130, 132, 133, 134, 136, 137, 141, 142, 145, 148, 149, 150, 157, 165, 166, 170, 171, 181, 182, 197, 198, 199, 219, 222, 225, 229, 231, 232, 233, 234, 235, 237, 238, 245, 251, 258, 259, 260, 261, 262, 263, 285, 302, 304, 308, 309, 316, 319, 320, 347, 357, 358, 359, 360, 361, 362, 370, 375, 382, 384, 385, 386, 388, 389, 394, 395, 400, 401, 402, 409, 412, 413, 416, 418, 421, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 447, 448, 449, 453, 454, 492, 493, 500, 507, 508, 510, 512, 514, 522, 533, 534, 537, 542, 543, 547, 555, 569, 573, 574, 579, 580, 584, 590, 591, 597, 598, 604, 616, 617, 625, 627, 628, 631, 635, 637, 638, 639, 640, 641, 643, 644, 649, 659, 660, 661, 662, 663, 664, 706, 713, 714, 719, 720, 721, 757, 771, 772, 776, 780, 785, 826, 830, 838, 840, 841, 843, 844, 845, 847, 848, 862, 863, 867, 908, 909, 922, 934], "fmt": [10, 349, 374, 481, 525, 555, 588, 649, 759, 896], "floatfmt": 10, "mix": [10, 481, 721, 896, 934], "control": [10, 29, 119, 245, 576, 649], "how": [10, 29, 51, 68, 88, 91, 100, 136, 165, 216, 217, 245, 274, 275, 303, 317, 375, 415, 425, 548, 555, 574, 590, 624, 649, 676, 677, 705, 722, 934], "float": [10, 29, 39, 40, 69, 114, 116, 117, 118, 120, 121, 138, 141, 166, 182, 190, 195, 237, 245, 273, 274, 304, 305, 306, 307, 319, 320, 347, 357, 358, 359, 360, 365, 370, 375, 378, 381, 382, 384, 385, 386, 394, 400, 409, 412, 413, 418, 421, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 443, 507, 517, 533, 534, 538, 540, 543, 545, 547, 555, 579, 591, 604, 611, 612, 643, 649, 675, 676, 703, 706, 709, 710, 711, 720, 723, 757, 768, 769, 770, 771, 772, 776, 780, 785, 794, 807, 810, 815, 816, 822, 823, 829, 830, 831, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 852, 853, 864, 868, 904, 924, 934], "point": [10, 29, 39, 40, 120, 121, 141, 151, 167, 245, 304, 319, 320, 347, 365, 370, 382, 384, 438, 439, 555, 579, 585, 595, 606, 649, 706, 757, 776, 780, 794, 848, 849, 934], "full": [10, 36, 66, 98, 99, 101, 109, 110, 595, 649], "format": [10, 13, 17, 27, 29, 92, 97, 98, 99, 109, 114, 139, 149, 163, 172, 189, 205, 243, 245, 346, 349, 470, 481, 503, 577, 583, 599, 630, 649, 759, 885, 896, 933], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 60, 79, 85, 87, 89, 91, 95, 96, 98, 99, 102, 109, 112, 119, 120, 122, 124, 129, 138, 139, 141, 142, 154, 163, 164, 167, 168, 175, 176, 190, 194, 195, 199, 201, 212, 216, 219, 228, 230, 239, 245, 267, 275, 280, 288, 292, 294, 296, 310, 316, 317, 329, 332, 337, 339, 347, 353, 354, 356, 358, 359, 360, 364, 366, 371, 373, 382, 384, 391, 392, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 442, 443, 445, 454, 466, 469, 471, 477, 478, 489, 495, 500, 512, 513, 528, 537, 542, 543, 546, 547, 555, 569, 577, 578, 579, 580, 587, 594, 603, 610, 611, 614, 617, 619, 621, 625, 634, 636, 645, 649, 677, 682, 690, 694, 696, 708, 719, 722, 735, 738, 747, 749, 757, 763, 764, 766, 769, 770, 771, 772, 775, 777, 784, 794, 809, 819, 820, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 856, 857, 860, 868, 881, 884, 886, 892, 893, 905, 919, 924, 934], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 62, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 124, 128, 129, 138, 141, 142, 144, 153, 154, 155, 157, 163, 164, 166, 168, 169, 170, 174, 175, 176, 186, 188, 190, 193, 194, 195, 197, 199, 200, 201, 202, 207, 210, 212, 216, 219, 221, 223, 230, 239, 245, 273, 274, 275, 279, 280, 288, 289, 292, 293, 294, 296, 305, 306, 307, 316, 317, 358, 359, 360, 364, 365, 366, 371, 372, 373, 392, 416, 418, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 450, 454, 462, 467, 470, 471, 473, 475, 477, 478, 484, 489, 490, 491, 495, 500, 505, 512, 513, 517, 518, 519, 520, 526, 528, 534, 536, 537, 540, 542, 543, 544, 545, 546, 547, 555, 569, 578, 579, 580, 587, 591, 594, 603, 610, 611, 614, 615, 617, 619, 620, 621, 625, 626, 629, 636, 645, 649, 665, 666, 675, 676, 677, 681, 682, 690, 691, 694, 695, 696, 703, 707, 708, 709, 710, 711, 719, 722, 769, 770, 771, 772, 775, 776, 777, 783, 784, 785, 808, 809, 815, 819, 820, 822, 823, 824, 825, 826, 829, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 856, 857, 860, 865, 868, 877, 882, 885, 886, 888, 890, 892, 893, 899, 904, 905, 906, 907, 914, 919, 924, 934], "size": [12, 33, 98, 99, 119, 120, 121, 138, 151, 216, 245, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 505, 555, 585, 614, 649, 769, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 934], "overwrit": [12, 28, 85, 87, 88, 89, 91, 98, 99, 109, 127, 245, 578, 649], "chunk": [12, 33, 95, 98, 99, 107, 109, 111, 112, 113, 120, 121, 140, 164, 175, 245, 256, 423, 555, 614, 649, 657, 707, 781, 819, 833, 911, 934], "stream": [12, 30, 67, 150, 214, 245, 571, 576, 578, 584, 595, 599, 603, 612, 613, 614, 622, 649], "engin": [12, 28, 100, 128, 150, 214, 227, 245, 584, 595, 599, 622, 633, 649, 658, 934], "By": [12, 98, 99, 102, 109, 166, 199, 219, 245, 454, 470, 500, 512, 530, 537, 542, 543, 547, 555, 591, 617, 625, 649, 868, 885, 916, 924, 934], "determin": [12, 29, 58, 60, 68, 88, 91, 98, 99, 102, 107, 109, 113, 128, 145, 151, 152, 163, 164, 213, 218, 245, 294, 303, 331, 405, 425, 429, 430, 431, 432, 433, 435, 436, 437, 449, 555, 585, 586, 649, 696, 705, 737, 785, 864, 934], "schema": [12, 61, 62, 63, 68, 80, 81, 83, 85, 87, 88, 89, 91, 92, 98, 99, 104, 108, 109, 112, 119, 120, 128, 129, 130, 137, 138, 173, 176, 245, 294, 405, 544, 569, 570, 575, 595, 600, 630, 633, 649, 712, 934], "thread": [12, 27, 95, 98, 99, 100, 122, 245, 257, 276, 555, 678], "pool": [12, 122], "For": [12, 29, 100, 101, 102, 110, 140, 152, 165, 166, 227, 245, 294, 302, 358, 359, 360, 406, 424, 449, 515, 524, 525, 555, 586, 591, 633, 649, 657, 770, 771, 772, 834, 864, 916, 934], "some": [12, 25, 29, 88, 98, 99, 109, 136, 245, 574, 649, 795, 934], "dataset": [12, 98, 99, 109, 114, 389, 555, 565, 595, 649, 807, 934], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 103, 107, 109, 110, 111, 112, 120, 121, 123, 128, 137, 138, 140, 142, 145, 151, 179, 188, 192, 198, 206, 214, 245, 305, 306, 307, 358, 359, 360, 366, 397, 399, 406, 451, 452, 468, 474, 480, 481, 506, 515, 524, 555, 580, 585, 595, 609, 614, 616, 622, 649, 657, 709, 710, 711, 769, 770, 771, 772, 777, 813, 852, 853, 883, 889, 895, 912, 934], "have": [12, 25, 29, 60, 86, 98, 99, 102, 120, 121, 123, 140, 163, 183, 189, 205, 245, 316, 358, 359, 360, 406, 422, 481, 555, 599, 612, 629, 649, 657, 719, 755, 770, 771, 772, 782, 832, 896, 934], "larg": 12, "element": [12, 22, 96, 121, 124, 199, 212, 219, 245, 257, 258, 259, 260, 261, 262, 263, 274, 276, 277, 308, 309, 311, 312, 313, 314, 315, 316, 362, 372, 380, 395, 416, 422, 425, 440, 446, 447, 448, 453, 454, 477, 478, 492, 493, 495, 500, 512, 537, 542, 543, 547, 555, 617, 621, 625, 649, 658, 659, 660, 661, 662, 663, 664, 676, 678, 679, 708, 713, 714, 715, 716, 717, 718, 719, 773, 778, 784, 795, 809, 811, 826, 832, 850, 861, 862, 863, 867, 868, 892, 893, 905, 908, 909, 914, 919, 920, 924, 934], "too": 12, "optimist": 12, "lead": [12, 92, 114, 245, 441, 468, 480, 484, 490, 499, 512, 542, 555, 595, 633, 649, 854, 883, 895, 899, 934], "out": [12, 92, 115, 152, 245, 279, 293, 298, 378, 381, 456, 458, 548, 555, 586, 613, 614, 649, 681, 695, 699, 871, 873], "memori": [12, 33, 68, 85, 86, 89, 90, 91, 98, 99, 103, 107, 109, 111, 112, 113, 127, 128, 140, 196, 227, 245, 423, 444, 555, 614, 633, 649, 657, 658, 833, 858, 859, 934], "error": [12, 71, 98, 99, 109, 188, 245, 281, 293, 298, 302, 388, 456, 458, 464, 465, 481, 555, 633, 683, 695, 699, 703, 871, 873, 879, 880, 896, 934], "row": [12, 17, 22, 27, 29, 31, 33, 60, 61, 63, 77, 79, 84, 88, 89, 91, 92, 98, 99, 102, 103, 107, 109, 111, 112, 113, 116, 119, 120, 128, 129, 136, 140, 143, 145, 149, 151, 153, 154, 159, 161, 163, 164, 166, 167, 168, 172, 176, 190, 197, 201, 202, 205, 207, 212, 214, 216, 217, 223, 227, 230, 239, 245, 257, 267, 277, 363, 373, 392, 416, 426, 450, 452, 461, 489, 506, 515, 516, 524, 528, 532, 535, 539, 546, 548, 555, 569, 571, 574, 578, 581, 582, 585, 587, 591, 592, 594, 595, 599, 614, 615, 619, 620, 621, 622, 624, 629, 633, 636, 645, 649, 657, 679, 774, 784, 826, 836, 865, 876, 905, 934], "per": [12, 27, 29, 119, 120, 149, 176, 177, 198, 212, 234, 236, 237, 245, 257, 276, 279, 293, 452, 506, 555, 616, 621, 640, 642, 643, 649, 678, 681, 695], "everi": [12, 98, 99, 109, 151, 202, 205, 218, 245, 270, 271, 275, 277, 279, 280, 289, 292, 311, 312, 313, 314, 315, 316, 346, 352, 363, 461, 491, 515, 516, 555, 578, 585, 620, 649, 672, 673, 677, 679, 681, 682, 691, 694, 715, 716, 717, 718, 719, 756, 762, 774, 876, 907, 934], "process": [12, 27, 245, 613, 614, 649], "liter": [13, 17, 65, 70, 102, 121, 149, 163, 169, 170, 174, 175, 178, 188, 189, 192, 200, 204, 222, 245, 254, 255, 322, 364, 376, 388, 423, 456, 471, 472, 505, 508, 510, 511, 518, 519, 530, 532, 535, 540, 544, 555, 580, 609, 627, 649, 655, 656, 728, 775, 788, 852, 853, 871, 886, 887, 934], "left": [13, 70, 116, 117, 151, 152, 165, 166, 217, 245, 358, 359, 360, 375, 376, 429, 430, 431, 432, 433, 435, 436, 437, 440, 467, 484, 494, 508, 515, 516, 524, 539, 548, 555, 585, 586, 590, 591, 624, 649, 770, 771, 772, 788, 850, 882, 899, 918, 934], "center": [13, 29, 245, 358, 359, 360, 428, 429, 430, 431, 432, 433, 435, 436, 437, 555, 770, 771, 772, 838, 839, 840, 841, 842, 843, 845, 846, 847, 934], "right": [13, 15, 29, 70, 98, 99, 116, 117, 151, 152, 165, 166, 245, 358, 359, 360, 376, 429, 430, 431, 432, 433, 435, 436, 437, 440, 449, 473, 508, 555, 585, 586, 590, 591, 649, 770, 771, 772, 788, 850, 864, 888, 934], "cell": 13, "align": [13, 29, 60, 245, 484, 899], "keyerror": [13, 17], "recognis": [13, 17, 118], "column_abc": 13, "column_xyz": 13, "visibl": [14, 138, 245, 769, 934], "eg": [14, 22, 29, 245, 346, 481], "rang": [14, 29, 69, 70, 100, 138, 151, 164, 245, 326, 339, 343, 344, 346, 352, 353, 375, 505, 510, 518, 519, 555, 585, 649, 720, 732, 749, 753, 754, 756, 762, 763, 769, 826, 830, 934], "100": [14, 29, 88, 91, 98, 99, 109, 112, 245, 484, 505, 649, 839, 840, 842, 934], "98": [14, 157, 245, 451, 490, 495, 555], "99": [14, 29, 141, 142, 157, 160, 245, 252, 364, 366, 451, 490, 495, 555, 579, 580, 649, 768, 775, 934], "10": [14, 26, 27, 29, 30, 33, 60, 68, 69, 70, 92, 100, 109, 120, 121, 130, 140, 148, 151, 152, 154, 156, 157, 158, 175, 179, 181, 185, 186, 192, 201, 222, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 256, 264, 265, 266, 268, 269, 275, 280, 288, 289, 292, 305, 310, 312, 315, 317, 319, 320, 322, 346, 352, 355, 372, 373, 375, 380, 388, 391, 392, 395, 416, 430, 450, 484, 489, 508, 515, 521, 524, 526, 528, 531, 537, 542, 546, 555, 571, 585, 586, 587, 589, 594, 602, 603, 609, 614, 618, 619, 627, 631, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 649, 658, 677, 682, 690, 691, 694, 709, 720, 722, 728, 762, 765, 768, 784, 795, 809, 811, 826, 852, 853, 905, 934], "95": [14, 252, 555], "96": [14, 252, 555], "97": [14, 157, 245, 252, 555], "move": [15, 358, 359, 360, 429, 430, 432, 436, 555, 770, 771, 772, 839, 840, 842, 846, 934], "inlin": 15, "parenthes": 15, "print": [16, 99, 115, 137, 149, 150, 164, 167, 207, 224, 245, 374, 555, 588, 649, 795, 838, 914, 934], "below": [16, 29, 101, 110, 136, 245, 375, 548, 555, 574, 649], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 60, 92], "utf8_full_condens": [17, 92], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 457, 462, 463, 465, 872, 877, 878, 880], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 60, 69, 70, 85, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 128, 129, 133, 136, 141, 142, 149, 151, 152, 153, 158, 165, 166, 167, 170, 172, 176, 177, 180, 188, 190, 192, 195, 197, 198, 204, 206, 209, 213, 214, 215, 216, 217, 218, 222, 225, 245, 253, 256, 257, 268, 279, 289, 294, 296, 305, 306, 307, 310, 312, 315, 319, 320, 345, 346, 352, 358, 359, 360, 361, 364, 365, 366, 371, 372, 375, 376, 382, 383, 384, 385, 386, 391, 397, 399, 414, 416, 423, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 443, 444, 445, 446, 450, 451, 455, 456, 459, 460, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 477, 478, 479, 480, 481, 484, 485, 486, 494, 502, 504, 505, 508, 511, 513, 519, 520, 522, 523, 530, 531, 532, 535, 540, 541, 543, 544, 547, 548, 555, 569, 570, 574, 579, 580, 585, 586, 589, 590, 591, 593, 595, 599, 609, 611, 612, 613, 614, 615, 616, 622, 623, 624, 627, 628, 630, 631, 633, 649, 658, 665, 666, 681, 691, 696, 708, 709, 720, 721, 723, 739, 740, 741, 746, 755, 756, 762, 767, 768, 770, 771, 772, 775, 776, 777, 779, 782, 783, 785, 786, 787, 788, 799, 800, 803, 807, 813, 814, 815, 816, 817, 821, 830, 831, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 855, 857, 860, 861, 864, 865, 868, 870, 871, 874, 875, 879, 880, 881, 882, 883, 884, 885, 888, 889, 890, 892, 893, 894, 895, 896, 910, 913, 914, 917, 918, 924, 925, 934], "rounded_corn": 17, "style": [17, 29, 180, 245], "border": 17, "line": [17, 29, 98, 99, 102, 109, 149, 159, 161, 245], "includ": [17, 25, 27, 29, 66, 101, 110, 120, 138, 151, 212, 213, 216, 245, 347, 376, 476, 477, 515, 555, 585, 621, 649, 757, 769, 788, 891, 892, 925, 934], "divid": [17, 346, 352, 358, 359, 360, 389, 555, 756, 762, 770, 771, 772, 807, 934], "same": [17, 29, 51, 60, 67, 103, 109, 119, 128, 134, 150, 198, 214, 222, 225, 227, 245, 251, 256, 363, 415, 428, 429, 430, 431, 432, 433, 435, 436, 437, 452, 486, 509, 555, 573, 584, 595, 616, 622, 627, 631, 633, 649, 653, 657, 658, 728, 774, 838, 839, 840, 841, 842, 843, 845, 846, 847, 926, 934], "dens": [17, 149, 245, 422, 555, 832, 934], "space": 17, "horizont": [17, 68, 145, 156, 216, 245, 510, 511, 515, 516, 517, 521, 524, 532, 535, 539, 545], "markdown": 17, "compat": [17, 29, 33, 100, 245, 456, 457, 462, 463, 471, 472, 614, 649], "No": 17, "appli": [17, 27, 29, 68, 109, 118, 120, 121, 145, 179, 245, 326, 329, 331, 332, 333, 335, 337, 339, 340, 343, 344, 347, 353, 354, 356, 359, 360, 397, 417, 428, 429, 430, 432, 436, 481, 502, 505, 515, 516, 524, 531, 539, 555, 587, 594, 595, 602, 649, 730, 731, 732, 735, 737, 738, 742, 744, 747, 749, 750, 753, 754, 757, 760, 763, 764, 766, 771, 772, 838, 839, 840, 842, 846, 896, 934], "round": [17, 29, 62, 92, 245, 304, 370, 492, 555, 706, 780, 934], "corner": [17, 92], "op": [17, 121, 245, 425, 555, 649, 934], "The": [17, 28, 29, 33, 45, 52, 60, 66, 85, 87, 88, 89, 91, 95, 98, 100, 107, 109, 128, 135, 137, 149, 150, 151, 152, 153, 158, 163, 166, 173, 178, 188, 189, 192, 215, 218, 222, 225, 227, 245, 293, 294, 296, 297, 298, 299, 326, 339, 342, 343, 346, 352, 353, 361, 364, 371, 372, 397, 415, 418, 422, 425, 428, 429, 430, 431, 432, 433, 435, 436, 437, 446, 449, 455, 458, 459, 464, 466, 467, 468, 473, 474, 480, 484, 509, 522, 526, 541, 544, 548, 549, 551, 555, 556, 557, 560, 561, 562, 585, 586, 587, 589, 591, 594, 595, 600, 603, 609, 614, 623, 627, 631, 633, 649, 658, 695, 698, 699, 700, 708, 732, 749, 752, 753, 756, 762, 763, 775, 783, 787, 832, 838, 839, 840, 841, 842, 843, 845, 846, 847, 861, 864, 870, 873, 874, 879, 881, 882, 883, 888, 889, 895, 899, 928, 930, 934, 935, 938, 939, 940], "one": [17, 28, 29, 60, 77, 85, 87, 88, 89, 90, 91, 121, 142, 143, 149, 150, 151, 152, 163, 172, 180, 188, 189, 211, 226, 245, 252, 366, 388, 428, 451, 490, 502, 532, 535, 545, 548, 555, 580, 581, 584, 585, 586, 599, 628, 632, 649, 657, 777, 803, 838, 900, 934], "more": [17, 29, 31, 33, 60, 84, 85, 86, 87, 88, 89, 90, 91, 101, 107, 110, 120, 121, 128, 132, 163, 167, 172, 176, 188, 189, 190, 214, 227, 245, 257, 295, 305, 306, 307, 388, 389, 397, 439, 449, 496, 532, 535, 545, 548, 555, 599, 614, 622, 633, 649, 658, 697, 709, 710, 711, 803, 807, 849, 864, 920, 934, 942], "semigraph": 17, "box": [17, 128, 245], "draw": [17, 22, 23], "found": [17, 27, 72, 81, 83, 88, 92, 137, 217, 245, 440, 465, 481, 555, 624, 649, 850, 880, 934], "unicod": 17, "block": [17, 150, 214, 245, 584, 606, 622, 629, 649, 852, 853, 934], "http": [17, 29, 86, 100, 127, 132, 245, 462, 877, 942], "en": [17, 29, 245], "wikipedia": 17, "org": [17, 86, 100, 127, 132, 245], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 245], "etc": [18, 29, 98, 101, 103, 107, 110, 111, 113, 245, 505, 852, 853, 934], "inform": [20, 66, 101, 110, 132, 245, 305, 306, 307, 389, 449, 555, 603, 649, 709, 710, 711, 807, 864, 934], "separ": [21, 27, 93, 95, 98, 99, 109, 178, 180, 206, 213, 215, 245, 257, 277, 281, 461, 511, 515, 516, 555, 623, 649, 679, 683, 876, 903, 912, 934], "between": [21, 68, 118, 119, 120, 121, 182, 237, 245, 281, 302, 318, 376, 416, 421, 433, 455, 512, 514, 537, 538, 542, 555, 604, 643, 649, 683, 703, 723, 788, 826, 831, 843, 870, 934], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 120, 121, 133, 142, 150, 151, 152, 180, 245, 305, 306, 312, 366, 415, 422, 429, 441, 478, 555, 580, 584, 585, 586, 614, 649, 696, 709, 710, 715, 721, 777, 832, 839, 854, 893, 934], "both": [22, 27, 51, 70, 100, 151, 152, 165, 166, 173, 188, 245, 256, 376, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 590, 591, 600, 649, 788, 934], "width": [23, 29, 98, 99, 245, 467, 473, 484, 649, 882, 888, 899], "char": [23, 51, 469, 884], "enabl": [24, 192, 222, 245, 441, 555, 609, 627, 649, 854, 934], "addit": [24, 29, 88, 101, 110, 118, 119, 134, 139, 150, 178, 192, 198, 215, 222, 225, 245, 361, 364, 415, 452, 508, 509, 510, 522, 532, 535, 541, 544, 555, 573, 577, 584, 609, 616, 623, 627, 631, 649, 775, 934], "verbos": 24, "debug": [24, 92, 571, 578, 595, 649], "log": [24, 62, 357, 495, 555, 768, 919, 934], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 61, 63, 66, 85, 87, 88, 89, 90, 91, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 113, 120, 163, 178, 184, 188, 189, 191, 204, 205, 245, 399, 555, 606, 608, 649, 813, 934], "show": [25, 29, 136, 149, 167, 177, 245, 574, 603, 612, 649], "variabl": [25, 93, 172, 206, 245, 599, 649, 912, 934], "restrict": [25, 478, 893], "dictionari": [25, 29, 85, 87, 88, 89, 91, 98, 99, 104, 108, 109, 163, 178, 188, 189, 204, 205, 245, 399, 555, 649, 721, 813, 934], "those": [25, 29, 98, 245, 422, 555, 832, 934], "been": [25, 29, 69, 93, 245, 422, 555, 832, 934], "set_fmt_float": 25, "directli": [25, 120, 121, 358, 359, 360, 555, 649, 770, 771, 772, 934], "via": [25, 98, 99, 102, 109, 111, 112, 113, 163, 189, 245, 257, 555], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 140, 245, 578, 605, 613, 614, 630, 649, 657, 934], "binaryio": [26, 30, 97, 98, 102, 103, 104, 107, 108, 245], "bytesio": [26, 27, 29, 30, 33, 97, 98, 99, 102, 103, 107, 245], "path": [26, 27, 29, 30, 31, 32, 33, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 245, 441, 465, 555, 605, 613, 614, 630, 649, 854, 880, 934], "compress": [26, 30, 33, 245, 613, 614, 649], "avrocompress": [26, 245], "uncompress": [26, 30, 33, 103, 111, 245, 614, 649], "write": [26, 27, 28, 29, 30, 31, 33, 99, 103, 245, 305, 306, 307, 555, 593, 612, 614, 630, 649, 709, 710, 711, 934], "apach": [26, 33, 97, 100, 245], "avro": [26, 97, 245, 565], "should": [26, 27, 29, 30, 31, 32, 33, 85, 87, 89, 91, 93, 96, 101, 109, 118, 119, 121, 124, 127, 128, 134, 151, 163, 166, 188, 189, 205, 206, 215, 227, 245, 252, 257, 276, 303, 316, 355, 361, 382, 384, 428, 429, 430, 431, 432, 433, 435, 436, 437, 440, 449, 509, 522, 529, 530, 548, 555, 573, 585, 590, 591, 595, 612, 613, 614, 623, 630, 633, 649, 658, 678, 705, 719, 765, 838, 839, 840, 841, 842, 843, 845, 846, 847, 850, 864, 934], "written": [26, 27, 29, 30, 31, 32, 33, 245, 613, 614, 630, 649], "snappi": [26, 33, 245, 614, 649], "deflat": [26, 245], "import": [26, 27, 29, 30, 33, 36, 60, 70, 85, 89, 90, 109, 114, 116, 117, 118, 119, 120, 121, 133, 149, 151, 164, 166, 209, 216, 218, 245, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 520, 530, 585, 591, 595, 649, 713, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 792, 796, 797, 798, 803, 838, 862, 908, 934], "pathlib": [26, 27, 30, 33, 109, 245], "foo": [26, 27, 30, 31, 32, 33, 93, 128, 131, 132, 134, 135, 136, 137, 140, 143, 144, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 160, 165, 169, 170, 171, 174, 177, 180, 182, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 213, 214, 215, 219, 220, 221, 224, 245, 253, 273, 278, 279, 282, 283, 305, 306, 307, 342, 373, 374, 418, 426, 442, 443, 455, 457, 459, 461, 463, 468, 474, 476, 478, 480, 482, 483, 489, 491, 502, 505, 507, 509, 512, 513, 514, 523, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 546, 547, 548, 555, 572, 573, 574, 575, 581, 588, 589, 590, 606, 608, 609, 622, 623, 626, 628, 630, 649, 683, 709, 752, 836, 872, 874, 876, 878, 893, 934], "bar": [26, 27, 30, 31, 32, 33, 93, 128, 131, 132, 134, 135, 136, 137, 140, 143, 144, 145, 146, 147, 148, 154, 156, 157, 158, 160, 165, 169, 170, 171, 174, 177, 180, 182, 184, 185, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 214, 215, 219, 220, 224, 245, 253, 283, 374, 449, 459, 461, 476, 478, 502, 507, 509, 512, 513, 514, 523, 528, 532, 533, 534, 535, 536, 537, 541, 542, 543, 546, 547, 548, 555, 572, 573, 574, 575, 581, 588, 589, 590, 606, 608, 609, 622, 623, 626, 630, 649, 683, 864, 874, 876, 893, 934], "ham": [26, 27, 30, 33, 93, 131, 132, 134, 135, 136, 137, 143, 144, 146, 153, 154, 156, 165, 169, 170, 171, 174, 177, 182, 184, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 206, 207, 208, 209, 210, 214, 219, 220, 245, 509, 572, 573, 574, 575, 581, 590, 606, 608, 609, 622, 628, 649], "d": [26, 27, 30, 33, 51, 68, 88, 114, 133, 149, 153, 154, 157, 165, 201, 203, 216, 220, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 328, 349, 376, 417, 444, 457, 463, 477, 481, 508, 526, 555, 590, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 649, 734, 759, 788, 872, 878, 892, 896, 934], "e": [26, 27, 30, 33, 51, 86, 98, 99, 102, 103, 107, 111, 113, 133, 149, 154, 201, 203, 216, 245, 257, 357, 361, 376, 394, 399, 444, 449, 522, 548, 555, 593, 606, 649, 768, 788, 851, 864, 916, 934], "dirpath": [26, 27, 30, 33, 109, 245], "new_fil": [26, 27, 30, 33, 245], "has_head": [27, 29, 98, 99, 102, 109, 245], "quot": [27, 98, 99, 109, 245], "batch_siz": [27, 98, 99, 112, 245], "1024": [27, 33, 98, 99, 112, 245, 614, 649], "datetime_format": [27, 245], "date_format": [27, 245, 349], "time_format": [27, 245], "float_precis": [27, 29, 245], "null_valu": [27, 98, 99, 109, 245], "comma": [27, 245], "csv": [27, 98, 99, 102, 109, 245, 565, 613, 614, 649], "result": [27, 31, 32, 60, 89, 91, 100, 101, 109, 111, 113, 114, 121, 140, 151, 162, 176, 195, 209, 225, 245, 358, 359, 360, 364, 389, 415, 426, 428, 429, 430, 431, 432, 433, 435, 436, 437, 441, 443, 476, 477, 505, 515, 516, 517, 531, 545, 555, 568, 585, 595, 603, 611, 613, 614, 630, 631, 649, 657, 770, 771, 772, 807, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 854, 857, 891, 892, 916, 934], "If": [27, 29, 31, 32, 33, 51, 65, 66, 69, 70, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 127, 128, 136, 140, 149, 151, 152, 154, 163, 166, 168, 172, 176, 189, 190, 197, 201, 205, 206, 208, 212, 213, 214, 216, 217, 245, 257, 289, 294, 305, 306, 307, 322, 367, 389, 397, 399, 424, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 445, 449, 450, 464, 466, 468, 469, 474, 475, 476, 477, 478, 480, 481, 495, 502, 504, 505, 512, 513, 515, 524, 530, 532, 535, 540, 542, 544, 548, 555, 574, 576, 585, 586, 590, 591, 595, 599, 606, 614, 615, 621, 622, 624, 630, 633, 649, 657, 658, 691, 709, 710, 711, 720, 728, 782, 784, 785, 807, 809, 830, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 854, 860, 864, 865, 879, 881, 883, 884, 889, 890, 891, 892, 893, 895, 896, 905, 911, 916, 919, 925, 934], "instead": [27, 31, 32, 65, 96, 98, 107, 120, 124, 128, 151, 163, 176, 178, 188, 189, 192, 209, 222, 245, 266, 269, 466, 468, 474, 480, 505, 540, 544, 555, 579, 585, 609, 627, 630, 649, 667, 670, 852, 853, 881, 883, 889, 895, 917, 934], "whether": [27, 70, 89, 91, 121, 245, 331, 403, 404, 441, 555, 595, 649, 737], "header": [27, 29, 33, 92, 98, 99, 102, 109, 137, 180, 213, 245, 614, 649], "field": [27, 52, 81, 83, 88, 215, 245, 294, 399, 464, 477, 478, 486, 515, 516, 531, 544, 555, 623, 649, 696, 892, 893, 902, 903], "symbol": [27, 245], "byte": [27, 98, 99, 102, 103, 104, 107, 108, 109, 138, 245, 297, 300, 301, 466, 469, 614, 649, 698, 701, 702, 769, 881, 884, 934], "specifi": [27, 29, 60, 70, 72, 81, 83, 120, 134, 138, 139, 142, 150, 178, 188, 192, 198, 212, 215, 222, 225, 245, 358, 359, 360, 361, 366, 399, 415, 425, 452, 467, 473, 506, 508, 509, 510, 522, 532, 535, 541, 544, 555, 573, 577, 580, 584, 609, 616, 621, 623, 627, 631, 649, 769, 770, 771, 772, 777, 882, 888, 934], "defin": [27, 29, 36, 70, 118, 119, 120, 128, 151, 152, 176, 179, 227, 245, 257, 293, 376, 417, 429, 430, 431, 432, 433, 435, 436, 437, 504, 530, 544, 555, 585, 586, 602, 633, 649, 658, 695, 788, 934], "chrono": [27, 245, 349, 481, 759, 896], "rust": [27, 33, 78, 103, 107, 128, 227, 245, 633, 658, 934], "crate": [27, 245, 456, 457, 462, 463, 471, 472], "fraction": [27, 116, 117, 190, 245, 347, 416, 439, 481, 555, 757, 826, 849, 934], "second": [27, 70, 151, 152, 166, 218, 245, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 481, 519, 520, 548, 555, 585, 586, 591, 649, 752, 756, 762], "precis": [27, 29, 37, 163, 189, 205, 245, 321, 481, 727], "infer": [27, 85, 87, 88, 89, 90, 91, 98, 99, 102, 109, 112, 118, 128, 245, 426, 464, 481, 555, 649, 836, 879, 934], "maximum": [27, 98, 99, 109, 119, 120, 121, 169, 245, 270, 305, 306, 400, 412, 422, 532, 555, 596, 649, 672, 709, 710, 739, 814, 822, 827, 832, 934], "timeunit": [27, 36, 38, 70, 245, 321, 322, 351, 355, 727, 728, 761, 765], "frame": [27, 28, 29, 60, 88, 116, 120, 128, 129, 163, 164, 173, 176, 179, 188, 189, 209, 216, 245, 569, 600, 602, 649, 708, 934], "datetim": [27, 29, 60, 70, 92, 133, 149, 151, 152, 164, 166, 218, 245, 273, 274, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 429, 430, 431, 432, 433, 435, 436, 437, 481, 494, 520, 526, 530, 555, 585, 586, 591, 649, 675, 676, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 803, 822, 823, 853, 896, 918, 934], "place": [27, 135, 156, 157, 185, 194, 195, 198, 212, 220, 245, 266, 269, 281, 288, 442, 443, 451, 555, 610, 611, 616, 621, 649, 667, 670, 683, 690, 833, 835, 856, 857, 866, 934], "float64": [27, 29, 88, 96, 98, 120, 124, 137, 138, 145, 191, 209, 222, 245, 258, 259, 260, 261, 262, 263, 302, 308, 309, 347, 361, 382, 384, 447, 448, 492, 493, 509, 522, 555, 575, 608, 627, 649, 757, 917, 922, 934], "datatyp": [27, 31, 45, 58, 85, 87, 88, 89, 91, 94, 96, 102, 104, 108, 121, 124, 137, 139, 145, 191, 245, 277, 302, 361, 444, 461, 481, 494, 509, 522, 555, 565, 577, 608, 630, 649, 658, 679, 703, 721, 801, 803, 805, 858, 876, 896, 918, 934], "repres": [27, 46, 58, 70, 85, 87, 89, 90, 91, 199, 219, 245, 382, 384, 454, 500, 509, 512, 522, 530, 537, 542, 543, 547, 555, 617, 625, 649, 853, 868, 924, 934], "null": [27, 60, 68, 88, 98, 99, 109, 114, 127, 129, 133, 136, 142, 145, 146, 158, 165, 170, 171, 177, 182, 194, 195, 198, 199, 200, 204, 209, 212, 215, 217, 219, 222, 245, 253, 256, 257, 266, 269, 275, 278, 279, 282, 288, 293, 294, 296, 298, 305, 306, 307, 310, 312, 315, 317, 319, 320, 327, 330, 334, 336, 338, 341, 348, 358, 359, 360, 361, 364, 365, 366, 367, 371, 375, 382, 383, 384, 385, 386, 391, 399, 414, 416, 423, 428, 429, 430, 431, 432, 433, 435, 436, 437, 442, 443, 444, 446, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 473, 475, 477, 478, 479, 484, 485, 486, 494, 501, 502, 508, 510, 511, 522, 530, 544, 548, 555, 569, 574, 580, 589, 590, 610, 611, 616, 621, 623, 624, 627, 628, 630, 649, 658, 667, 670, 677, 690, 695, 696, 699, 708, 709, 722, 725, 733, 736, 743, 745, 748, 751, 758, 770, 771, 772, 775, 777, 782, 799, 800, 825, 826, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 851, 856, 857, 861, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 884, 885, 888, 890, 892, 893, 894, 914, 916, 917, 918, 925, 934], "empti": [27, 76, 88, 98, 99, 102, 109, 129, 130, 160, 172, 245, 541, 569, 570, 599, 649, 708, 712, 791, 934], "table_nam": [28, 29, 245], "connection_uri": [28, 100, 245], "if_exist": [28, 245], "dbwritemod": [28, 245], "fail": [28, 86, 101, 103, 110, 127, 214, 245, 267, 294, 481, 555, 622, 649, 658, 896, 934], "dbwriteengin": [28, 245], "sqlalchemi": [28, 245], "databas": [28, 100, 245, 565], "append": [28, 120, 140, 165, 166, 245, 423, 548, 555, 590, 591, 649, 934], "creat": [28, 29, 69, 70, 85, 89, 91, 110, 119, 120, 121, 129, 130, 151, 152, 177, 180, 218, 222, 245, 322, 346, 352, 423, 475, 499, 505, 510, 518, 519, 520, 555, 569, 570, 576, 585, 586, 627, 649, 708, 712, 720, 725, 728, 756, 762, 824, 830, 833, 890, 916, 934], "connect": [28, 98, 100, 103, 107, 111, 113, 114, 245, 566], "uri": [28, 100, 101, 110, 245], "postgresql": [28, 100, 245, 415, 555], "usernam": [28, 98, 100, 103, 107, 111, 113, 245], "password": [28, 98, 100, 103, 107, 111, 113, 245], "server": [28, 100, 245], "port": [28, 98, 100, 103, 107, 111, 113, 245], "replac": [28, 98, 99, 109, 141, 142, 186, 213, 222, 245, 322, 345, 399, 472, 555, 579, 627, 649, 728, 755, 813, 852, 853, 887, 934], "insert": [28, 98, 99, 103, 107, 109, 111, 112, 113, 157, 185, 213, 215, 245, 440, 455, 484, 555, 623, 649, 850, 870, 899, 934], "mode": [28, 245, 540, 555, 649, 934], "new": [28, 29, 96, 109, 124, 125, 128, 136, 156, 157, 176, 177, 184, 185, 202, 215, 216, 222, 245, 253, 322, 363, 375, 398, 471, 472, 477, 478, 485, 486, 491, 555, 565, 574, 606, 620, 623, 627, 633, 649, 654, 725, 728, 774, 824, 835, 886, 887, 892, 893, 900, 902, 907, 913, 926, 934], "alreadi": [28, 245, 276, 316, 555, 678, 719, 934], "adbc": [28, 100, 245], "workbook": [29, 245], "worksheet": [29, 245], "posit": [29, 134, 139, 150, 178, 192, 198, 215, 222, 225, 245, 358, 359, 360, 361, 415, 452, 470, 508, 509, 510, 522, 532, 535, 541, 555, 573, 577, 584, 609, 616, 623, 627, 631, 649, 770, 771, 772, 885, 934], "tupl": [29, 100, 128, 163, 188, 189, 193, 224, 245, 426, 555, 603, 612, 649, 836, 934], "a1": [29, 61, 63, 245], "table_styl": [29, 245], "column_format": [29, 245], "dtype_format": [29, 245], "oneormoredatatyp": [29, 119, 245, 803, 934], "conditional_format": [29, 245], "conditionalformatdict": [29, 245], "column_tot": [29, 245], "columntotalsdefinit": [29, 245], "column_width": [29, 245], "row_tot": [29, 245], "rowtotalsdefinit": [29, 245], "row_height": [29, 245], "sparklin": [29, 245], "sequenc": [29, 52, 60, 67, 85, 87, 88, 89, 91, 93, 95, 98, 99, 109, 119, 120, 121, 134, 136, 139, 140, 165, 166, 172, 176, 179, 180, 198, 206, 212, 213, 214, 215, 216, 217, 218, 245, 380, 397, 417, 452, 486, 502, 503, 504, 506, 515, 516, 517, 524, 526, 531, 539, 545, 555, 573, 574, 577, 590, 591, 602, 616, 621, 622, 623, 624, 649, 657, 723, 853, 902, 934], "formula": [29, 245, 357, 555, 768, 934], "autofilt": [29, 245], "autofit": [29, 245], "hidden_column": [29, 245], "hide_gridlin": [29, 245], "sheet_zoom": [29, 245], "excel": [29, 102, 245, 565], "object": [29, 33, 70, 86, 87, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 119, 120, 121, 127, 150, 167, 209, 245, 530, 565, 570, 588, 593, 605, 649, 671, 704, 726, 869, 911, 934], "open": [29, 98, 99, 102, 103, 107, 111, 113, 245], "xlsxwriter": [29, 115, 245], "ha": [29, 60, 69, 93, 109, 127, 218, 245, 257, 316, 388, 406, 495, 504, 555, 633, 708, 719, 782, 794, 919, 934], "close": [29, 70, 151, 152, 245, 376, 429, 430, 431, 432, 433, 435, 436, 437, 449, 555, 585, 586, 649, 788, 864, 934], "xlsx": [29, 102, 245], "work": [29, 37, 99, 102, 152, 185, 245, 257, 276, 295, 304, 305, 306, 307, 361, 370, 415, 469, 496, 555, 586, 649, 678, 697, 706, 709, 710, 711, 780, 884, 920, 934], "directori": [29, 107, 245], "sheet1": [29, 245], "valid": [29, 103, 107, 121, 125, 138, 245, 316, 456, 465, 555, 719, 769, 782, 871, 872, 877, 878, 880, 886, 887, 934], "notat": [29, 245], "integ": [29, 41, 42, 43, 44, 54, 55, 56, 57, 119, 120, 151, 152, 245, 304, 347, 370, 424, 429, 430, 431, 432, 433, 434, 435, 436, 437, 470, 505, 526, 530, 555, 585, 586, 649, 665, 666, 706, 757, 780, 834, 844, 853, 885, 934], "medium": [29, 245], "kei": [29, 60, 66, 151, 166, 173, 178, 180, 184, 187, 245, 585, 591, 600, 606, 607, 649], "contain": [29, 60, 66, 87, 90, 92, 101, 110, 116, 136, 164, 176, 180, 245, 257, 380, 399, 457, 460, 462, 463, 465, 478, 479, 555, 574, 603, 649, 813, 819, 872, 875, 877, 878, 880, 893, 894, 911, 934], "follow": [29, 66, 98, 99, 101, 109, 110, 128, 151, 152, 166, 179, 218, 245, 257, 342, 346, 352, 417, 422, 429, 430, 431, 432, 433, 435, 436, 437, 486, 504, 548, 549, 551, 555, 556, 557, 560, 561, 562, 585, 586, 591, 602, 649, 752, 756, 762, 832, 852, 853, 928, 930, 934, 935, 938, 939, 940, 942], "first_column": [29, 245], "last_column": [29, 245], "banded_column": [29, 245], "banded_row": [29, 245], "sheet": [29, 102, 245], "chart": [29, 245, 603, 649], "subsequ": [29, 183, 209, 245, 576, 649], "colnam": [29, 109, 120, 137, 245, 398, 555, 575, 649], "given": [29, 48, 50, 60, 69, 70, 85, 87, 88, 89, 91, 96, 98, 99, 109, 118, 119, 120, 121, 124, 128, 138, 139, 178, 179, 188, 194, 195, 198, 212, 217, 245, 257, 273, 288, 323, 351, 357, 376, 394, 415, 417, 418, 422, 425, 426, 429, 430, 432, 435, 436, 437, 440, 442, 443, 463, 481, 486, 495, 502, 522, 555, 577, 595, 602, 610, 611, 616, 621, 624, 633, 649, 658, 675, 690, 720, 729, 761, 768, 769, 785, 788, 810, 812, 824, 830, 832, 836, 839, 840, 842, 845, 846, 847, 850, 856, 857, 878, 896, 919, 922, 926, 934], "here": [29, 85, 87, 88, 89, 91, 100, 101, 110, 119, 120, 121, 245, 465, 649, 880], "dd": [29, 245], "mm": [29, 245], "yyyi": [29, 245], "00": [29, 70, 151, 166, 218, 245, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 481, 520, 585, 591, 649, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 896], "dtype": [29, 63, 85, 87, 89, 91, 92, 96, 98, 99, 109, 118, 119, 120, 121, 124, 127, 151, 152, 166, 207, 209, 245, 257, 258, 259, 260, 261, 262, 263, 266, 269, 270, 271, 272, 281, 293, 302, 305, 306, 307, 308, 309, 314, 315, 327, 330, 334, 336, 338, 341, 348, 355, 361, 363, 396, 397, 399, 424, 425, 429, 430, 431, 432, 433, 435, 436, 437, 444, 447, 448, 455, 464, 475, 488, 490, 492, 493, 494, 498, 499, 504, 505, 513, 522, 526, 530, 531, 544, 555, 585, 586, 591, 649, 672, 673, 674, 683, 695, 703, 708, 709, 710, 711, 717, 718, 722, 733, 736, 743, 745, 748, 751, 758, 765, 769, 774, 791, 803, 812, 813, 837, 851, 858, 870, 879, 890, 896, 904, 914, 916, 917, 918, 922, 934], "overridden": [29, 85, 87, 89, 91, 245, 649], "basi": [29, 120, 245], "param": [29, 85, 87, 88, 89, 91, 98, 99, 109, 120, 121, 188, 245, 649], "It": [29, 70, 128, 173, 179, 227, 245, 257, 294, 405, 555, 595, 600, 633, 649, 852, 853, 934], "also": [29, 70, 88, 109, 120, 121, 137, 150, 151, 152, 173, 176, 192, 198, 222, 245, 312, 315, 345, 375, 376, 422, 429, 430, 431, 432, 433, 435, 436, 437, 452, 515, 516, 524, 526, 539, 548, 554, 555, 584, 585, 586, 600, 609, 616, 627, 628, 649, 755, 788, 832, 934], "group": [29, 33, 99, 150, 151, 152, 164, 176, 178, 180, 216, 218, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 257, 276, 369, 415, 451, 452, 462, 490, 504, 555, 584, 585, 586, 614, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649, 678, 877], "float_dtyp": [29, 245], "simplifi": [29, 67, 245, 571, 576, 578, 603, 612, 613, 614, 649], "uniform": [29, 245], "condit": [29, 65, 136, 143, 188, 245, 460, 479, 524, 548, 574, 581, 649], "suppli": [29, 85, 87, 88, 89, 91, 188, 245, 649], "typenam": [29, 245], "3_color_scal": [29, 245], "data_bar": [29, 245], "make": [29, 52, 68, 85, 90, 98, 99, 100, 103, 107, 111, 113, 151, 152, 173, 176, 183, 218, 245, 359, 360, 399, 425, 477, 484, 555, 585, 586, 600, 649, 771, 772, 785, 813, 892, 899, 934], "icon": [29, 245], "multipl": [29, 67, 68, 98, 99, 109, 111, 112, 113, 119, 121, 134, 138, 140, 143, 150, 151, 156, 164, 178, 180, 192, 198, 212, 222, 225, 245, 293, 403, 406, 410, 415, 426, 429, 430, 431, 432, 433, 435, 436, 437, 452, 506, 509, 515, 516, 524, 531, 532, 535, 539, 548, 555, 573, 581, 584, 585, 609, 616, 621, 627, 631, 649, 657, 695, 769, 818, 836, 934], "singl": [29, 60, 68, 98, 99, 100, 107, 109, 119, 134, 135, 136, 140, 147, 178, 188, 198, 245, 257, 274, 293, 342, 367, 397, 423, 426, 452, 455, 501, 504, 506, 509, 510, 511, 531, 532, 535, 540, 555, 573, 574, 616, 649, 657, 676, 695, 752, 833, 836, 870, 911, 934], "across": [29, 245, 517, 545], "effect": [29, 127, 145, 245, 257, 555, 629, 649], "heatmap": [29, 245], "min": [29, 33, 120, 121, 133, 142, 151, 152, 180, 245, 305, 307, 313, 366, 415, 422, 432, 541, 555, 580, 585, 586, 614, 649, 709, 711, 716, 721, 777, 832, 842, 934], "entir": [29, 245], "final": [29, 60, 113, 245, 358, 359, 360, 555, 578, 649, 770, 771, 772, 934], "made": [29, 245, 916, 934], "up": [29, 52, 100, 163, 166, 189, 205, 245, 257, 304, 484, 555, 590, 591, 595, 649, 706, 899, 934], "abov": [29, 245, 548], "order": [29, 60, 88, 116, 128, 150, 151, 152, 178, 179, 180, 190, 198, 212, 214, 218, 245, 257, 266, 269, 290, 295, 303, 422, 439, 440, 441, 451, 452, 486, 496, 497, 506, 555, 584, 585, 586, 599, 613, 614, 616, 621, 622, 649, 658, 667, 670, 692, 697, 705, 720, 802, 830, 832, 837, 849, 850, 854, 866, 902, 920, 921, 934], "than": [29, 70, 84, 89, 91, 98, 99, 109, 114, 120, 121, 128, 149, 150, 163, 166, 178, 188, 189, 190, 216, 227, 245, 257, 388, 439, 449, 467, 473, 478, 484, 512, 532, 535, 542, 545, 555, 584, 591, 613, 614, 633, 649, 658, 849, 864, 882, 888, 893, 899, 934], "add": [29, 50, 99, 128, 140, 151, 222, 223, 245, 419, 487, 520, 524, 548, 555, 585, 590, 627, 628, 629, 649, 657, 934], "total": [29, 138, 245, 769, 934], "export": [29, 163, 164, 189, 205, 245], "numer": [29, 166, 245, 305, 306, 307, 376, 425, 444, 555, 565, 591, 649, 709, 710, 711, 788, 801, 851, 858, 934], "associ": [29, 60, 245], "sum": [29, 60, 138, 145, 150, 152, 162, 180, 225, 245, 257, 294, 314, 315, 357, 367, 429, 430, 432, 435, 436, 437, 501, 502, 515, 517, 524, 532, 535, 539, 555, 571, 576, 578, 584, 586, 603, 612, 631, 649, 717, 718, 768, 769, 839, 840, 842, 845, 846, 847, 934], "pass": [29, 33, 60, 70, 87, 102, 109, 119, 120, 121, 132, 134, 150, 154, 168, 178, 179, 192, 198, 201, 212, 222, 225, 245, 257, 328, 345, 364, 374, 415, 417, 452, 468, 474, 480, 506, 509, 526, 532, 535, 544, 555, 573, 584, 588, 595, 602, 609, 612, 616, 621, 627, 631, 649, 658, 734, 755, 775, 784, 809, 883, 889, 895, 905, 934], "must": [29, 69, 86, 87, 101, 110, 139, 151, 152, 166, 173, 188, 245, 294, 397, 429, 430, 431, 432, 433, 435, 436, 437, 555, 577, 585, 586, 591, 595, 600, 649, 720, 830, 934], "funcnam": [29, 245], "averag": [29, 245, 358, 359, 360, 422, 555, 770, 771, 772, 832, 934], "count_num": [29, 245], "count": [29, 98, 99, 103, 107, 109, 111, 112, 113, 133, 151, 152, 166, 176, 177, 180, 213, 217, 218, 223, 227, 236, 245, 274, 311, 342, 391, 411, 414, 429, 430, 431, 432, 433, 435, 436, 437, 457, 497, 499, 536, 555, 585, 586, 591, 624, 629, 633, 642, 649, 676, 721, 752, 785, 820, 825, 872, 921, 923, 934], "std_dev": [29, 245], "var": [29, 245, 555, 649, 934], "pixel": [29, 245], "unit": [29, 36, 38, 70, 120, 121, 138, 245, 321, 322, 328, 351, 355, 396, 406, 498, 526, 555, 603, 649, 727, 728, 734, 761, 765, 769, 812, 922, 934], "hand": [29, 98, 99, 109, 245], "side": [29, 151, 152, 245, 376, 429, 430, 431, 432, 433, 435, 436, 437, 440, 555, 585, 586, 649, 788, 850, 934], "call": [29, 99, 120, 121, 128, 150, 167, 244, 245, 257, 312, 315, 555, 566, 584, 648, 649, 658, 934], "ad": [29, 88, 127, 151, 213, 222, 245, 256, 364, 515, 516, 555, 585, 627, 649, 775, 934], "end": [29, 98, 99, 107, 109, 151, 245, 289, 300, 346, 361, 376, 456, 460, 475, 479, 509, 522, 548, 555, 585, 587, 594, 603, 649, 691, 701, 756, 788, 875, 890, 894, 934], "wise": [29, 60, 145, 245, 258, 259, 260, 261, 262, 263, 308, 309, 362, 395, 446, 447, 448, 492, 493, 515, 516, 524, 539, 555, 659, 660, 661, 662, 663, 664, 713, 714, 773, 811, 861, 862, 863, 908, 909, 934], "match": [29, 68, 79, 85, 87, 88, 89, 91, 116, 117, 142, 166, 188, 245, 404, 456, 457, 460, 463, 464, 465, 468, 471, 472, 474, 479, 480, 481, 509, 580, 591, 649, 803, 871, 872, 875, 878, 879, 880, 883, 886, 887, 889, 894, 895, 896, 934], "particip": [29, 245], "distinct": [29, 121, 178, 245, 295, 422, 520, 555, 697, 832, 934], "referenc": [29, 245, 486], "differ": [29, 98, 114, 116, 140, 151, 152, 163, 189, 205, 213, 245, 275, 317, 326, 342, 343, 345, 353, 399, 412, 413, 481, 497, 523, 526, 555, 576, 585, 586, 649, 657, 658, 677, 722, 732, 752, 753, 755, 763, 822, 823, 851, 896, 934], "row_index": [29, 245], "height": [29, 136, 245], "provid": [29, 98, 99, 100, 101, 109, 110, 120, 121, 245, 294, 298, 299, 458, 459, 462, 464, 465, 526, 565, 613, 614, 649, 699, 700, 785, 873, 874, 877, 879, 880, 934, 942], "intersect": [29, 245], "bodi": [29, 245], "start": [29, 97, 98, 99, 103, 107, 109, 111, 112, 113, 150, 151, 167, 197, 218, 223, 245, 289, 301, 326, 328, 329, 331, 332, 337, 339, 343, 344, 346, 347, 351, 352, 353, 354, 356, 361, 376, 450, 456, 460, 475, 479, 509, 515, 522, 524, 548, 555, 584, 585, 603, 615, 629, 649, 691, 702, 727, 729, 732, 734, 735, 737, 742, 744, 747, 749, 750, 753, 754, 755, 756, 757, 759, 761, 762, 763, 764, 765, 766, 788, 865, 875, 890, 894, 934], "zero": [29, 85, 86, 97, 98, 99, 103, 107, 127, 129, 142, 163, 188, 203, 209, 245, 365, 366, 440, 449, 484, 555, 569, 580, 649, 696, 708, 777, 864, 899, 911, 916, 917, 934], "unless": [29, 60, 87, 209, 245, 649, 917, 925, 934], "marker": [29, 245], "compliant": [29, 245], "case": [29, 60, 85, 87, 88, 89, 91, 113, 128, 140, 151, 152, 163, 245, 397, 405, 406, 555, 585, 586, 649, 657, 934], "three": [29, 211, 245, 440, 555], "avail": [29, 95, 101, 110, 119, 244, 245, 422, 549, 551, 554, 555, 556, 557, 560, 561, 562, 565, 566, 578, 648, 649, 832, 928, 930, 934, 935, 938, 939, 940], "insert_befor": [29, 245], "insert_aft": [29, 245], "respect": [29, 245], "direct": [29, 100, 107, 113, 216, 245], "far": [29, 245], "thei": [29, 88, 109, 116, 125, 167, 245, 428, 555, 838, 934], "strongli": [29, 128, 188, 227, 245, 257, 555, 633, 658, 934], "advis": [29, 167, 245, 294], "structur": [29, 76, 80, 82, 140, 179, 245, 417, 555, 602, 649, 657, 934], "your": [29, 98, 99, 116, 117, 128, 163, 192, 222, 225, 245, 257, 555, 571, 587, 594, 595, 609, 627, 631, 649, 658, 934], "wherev": [29, 128, 227, 245, 257, 555, 633, 658, 934], "possibl": [29, 98, 128, 150, 163, 189, 214, 227, 245, 257, 396, 405, 478, 498, 555, 584, 622, 633, 649, 658, 893, 934], "simpl": [29, 176, 245], "colx": [29, 245], "coli": [29, 245], "after": [29, 88, 97, 98, 99, 103, 107, 109, 111, 112, 113, 140, 215, 244, 245, 361, 399, 422, 484, 555, 623, 649, 657, 755, 813, 832, 899, 934], "befor": [29, 98, 109, 125, 140, 151, 166, 215, 245, 314, 315, 316, 399, 416, 428, 429, 430, 431, 432, 433, 435, 436, 437, 484, 488, 555, 585, 588, 591, 623, 649, 657, 717, 718, 719, 813, 826, 838, 839, 840, 841, 842, 843, 845, 846, 847, 899, 904, 934], "most": [29, 85, 98, 99, 109, 245, 406, 410, 416, 478, 499, 555, 818, 826, 893, 923, 934], "mandatori": [29, 245], "return_dtyp": [29, 128, 245, 257, 397, 504, 531, 555, 658, 934], "latter": [29, 140, 245, 657, 934], "appropri": [29, 245, 422, 555, 832, 934], "pure": [29, 245], "actual": [29, 88, 102, 120, 121, 245, 859, 934], "indic": [29, 65, 93, 97, 98, 99, 103, 107, 109, 118, 119, 121, 151, 152, 206, 245, 267, 293, 378, 381, 382, 384, 385, 386, 429, 430, 431, 432, 433, 435, 436, 437, 440, 446, 490, 506, 555, 585, 586, 649, 695, 792, 796, 797, 798, 799, 800, 850, 861, 906, 912, 934], "calcul": [29, 60, 151, 199, 219, 245, 275, 317, 358, 359, 360, 389, 396, 434, 449, 454, 498, 500, 504, 512, 537, 542, 543, 547, 555, 585, 617, 625, 649, 677, 722, 770, 771, 772, 807, 844, 864, 868, 924, 934], "individu": [29, 120, 152, 245, 257, 463, 555, 586, 614, 649, 707, 878, 934], "gridlin": [29, 245], "zoom": [29, 245], "level": [29, 33, 109, 111, 112, 113, 120, 128, 145, 176, 245, 367, 555, 587, 594, 614, 649], "definit": [29, 245, 389, 555, 807, 934], "take": [29, 120, 145, 173, 179, 202, 245, 342, 452, 491, 521, 523, 555, 600, 620, 649, 752, 907, 926, 934], "care": [29, 245, 257, 441, 555, 854, 934], "rel": [29, 101, 110, 116, 117, 245, 342, 358, 359, 360, 555, 752, 770, 771, 772, 934], "see": [29, 100, 101, 102, 110, 116, 117, 120, 121, 132, 165, 179, 245, 305, 306, 307, 349, 366, 375, 389, 397, 449, 539, 555, 709, 710, 711, 759, 807, 864, 934, 942], "readthedoc": [29, 245, 942], "io": [29, 245, 942], "working_with_conditional_format": [29, 245], "html": [29, 86, 100, 127, 132, 245], "similarli": [29, 88, 245], "well": [29, 98, 99, 109, 139, 180, 245, 376, 555, 577, 649, 788, 934], "adjac": [29, 245], "two": [29, 87, 89, 91, 100, 145, 172, 173, 180, 211, 226, 227, 245, 252, 318, 322, 451, 490, 502, 512, 514, 537, 542, 555, 599, 600, 632, 633, 649, 723, 728, 934], "help": [29, 245, 578, 649], "where": [29, 65, 100, 136, 140, 163, 172, 189, 199, 219, 245, 267, 354, 357, 440, 449, 452, 454, 500, 512, 537, 542, 543, 547, 548, 555, 599, 617, 625, 649, 657, 668, 764, 768, 850, 864, 868, 924, 926, 934], "appear": [29, 88, 116, 245, 497, 555, 921, 934], "working_with_sparklin": [29, 245], "inject": [29, 60, 245], "locat": [29, 140, 186, 210, 215, 245, 440, 555, 623, 649, 657, 850, 853, 906, 934], "syntax": [29, 128, 176, 245, 612, 649, 934], "ensur": [29, 120, 121, 123, 150, 178, 188, 245, 376, 499, 555, 584, 595, 649, 916, 923, 934], "correctli": [29, 245], "microsoft": [29, 245], "com": [29, 100, 245, 358, 359, 360, 462, 555, 770, 771, 772, 877, 934], "u": [29, 36, 38, 70, 92, 163, 189, 205, 245, 321, 322, 328, 351, 355, 481, 526, 727, 728, 734, 761, 765], "offic": [29, 245], "f5ed2452": [29, 245], "2337": [29, 245], "4f71": [29, 245], "bed3": [29, 245], "c8ae6d2b276": [29, 245], "instanti": [29, 192, 222, 245, 609, 627, 649], "basic": [29, 245], "random": [29, 119, 120, 121, 153, 190, 245, 372, 422, 439, 445, 555, 783, 832, 849, 860, 934], "date": [29, 36, 60, 70, 98, 99, 100, 109, 114, 133, 149, 151, 152, 164, 166, 245, 273, 274, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 429, 430, 431, 432, 433, 435, 436, 437, 481, 494, 526, 555, 585, 586, 591, 649, 675, 676, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 803, 822, 823, 853, 896, 918, 934], "dtm": [29, 245, 322, 728], "2023": [29, 92, 115, 164, 245, 322, 728], "num": [29, 211, 245, 376, 379, 484, 555, 788, 934], "500": [29, 163, 217, 245, 578, 624, 649, 742, 744, 750, 757, 839, 840, 842, 934], "val": [29, 187, 245, 303, 494, 548, 555, 607, 649, 705], "10_000": [29, 245], "20_000": [29, 245], "30_000": [29, 245], "increas": [29, 98, 107, 245, 316, 555, 719, 934], "b4": [29, 245], "light": [29, 245], "twice": [29, 102, 245], "each": [29, 60, 99, 112, 116, 117, 119, 128, 149, 150, 164, 166, 178, 209, 215, 224, 225, 227, 228, 230, 239, 245, 257, 280, 292, 346, 352, 422, 452, 463, 477, 478, 504, 511, 532, 535, 544, 555, 591, 603, 623, 631, 633, 634, 636, 645, 649, 682, 694, 707, 756, 762, 832, 878, 892, 893, 903, 934], "titl": [29, 245], "explicit": [29, 109, 119, 245, 505, 539], "integr": [29, 245], "multi_fram": [29, 245], "wb": [29, 245], "coordin": [29, 245], "advanc": [29, 245], "len": [29, 69, 119, 120, 164, 245, 311, 426, 467, 473, 484, 555, 720, 830, 836, 882, 888, 899, 934], "min_color": [29, 245], "76933c": [29, 245], "mid_color": [29, 245], "c4d79b": [29, 245], "max_color": [29, 245], "ebf1d": [29, 245], "data_bar_2010": [29, 245], "bar_color": [29, 245], "9bbb59": [29, 245], "bar_negative_color_sam": [29, 245], "bar_negative_border_color_sam": [29, 245], "000": [29, 245], "white": [29, 245], "w": [29, 245, 462, 877], "get_worksheet_by_nam": [29, 245], "fmt_titl": [29, 245], "add_format": [29, 245], "font_color": [29, 245], "4f6228": [29, 245], "font_siz": [29, 245], "12": [29, 60, 69, 70, 92, 151, 152, 166, 218, 245, 314, 322, 329, 332, 339, 344, 346, 352, 356, 416, 444, 516, 518, 519, 531, 555, 585, 586, 587, 591, 594, 612, 619, 649, 658, 720, 728, 749, 756, 762, 848, 934], "ital": [29, 245], "bold": [29, 245], "customis": [29, 245], "trend": [29, 245], "win_loss": [29, 245], "subtl": [29, 245], "tone": [29, 245], "hidden": [29, 245], "id": [29, 227, 245, 471, 472, 497, 499, 555, 633, 921, 934], "q1": [29, 245], "55": [29, 62, 115, 245], "20": [29, 140, 156, 157, 179, 181, 185, 186, 245, 264, 265, 266, 269, 317, 346, 352, 372, 375, 526, 530, 555, 602, 649, 722, 762, 934], "35": [29, 121, 245, 317, 555, 722, 934], "q2": [29, 245], "30": [29, 69, 140, 151, 156, 179, 185, 186, 204, 222, 245, 264, 265, 266, 269, 317, 322, 327, 332, 344, 346, 352, 356, 372, 444, 555, 585, 602, 627, 649, 720, 722, 728, 733, 756, 762, 934], "15": [29, 128, 151, 152, 157, 245, 316, 317, 346, 352, 363, 516, 555, 585, 586, 649, 719, 722, 756, 762, 774, 934], "60": [29, 140, 245, 347, 348, 481, 753, 757, 758, 896], "q3": [29, 245], "50": [29, 140, 245, 305, 306, 307, 346, 352, 555, 709, 762, 934], "40": [29, 140, 179, 245, 346, 352, 372, 555, 602, 649, 738, 762], "80": [29, 245], "q4": [29, 245], "75": [29, 245, 785, 830, 934], "account": [29, 92, 245, 342, 358, 359, 360, 555, 752, 770, 771, 772, 934], "flavour": [29, 245], "integer_dtyp": [29, 192, 245, 609, 649], "0_": [29, 245], "just": [29, 100, 109, 172, 245, 599, 649], "unifi": [29, 245], "multi": [29, 98, 99, 245, 361, 555], "2_color_scal": [29, 245], "95b3d7": [29, 245], "ffffff": [29, 245], "base": [29, 34, 136, 143, 151, 152, 245, 357, 358, 359, 360, 394, 395, 470, 555, 565, 574, 581, 585, 586, 649, 768, 770, 771, 772, 785, 810, 811, 830, 885, 926, 934], "standardis": [29, 245], "z": [29, 92, 119, 120, 138, 159, 161, 165, 172, 245, 272, 303, 372, 425, 481, 555, 590, 599, 615, 649, 705, 777, 896, 934], "score": [29, 245], "conjunct": [29, 245], "a123": [29, 245], "b345": [29, 245], "c567": [29, 245], "d789": [29, 245], "e101": [29, 245], "45": [29, 152, 245, 322, 346, 352, 457, 463, 586, 649, 728, 756, 762, 872, 878], "85": [29, 245], "font": [29, 245], "consola": [29, 245], "standard": [29, 199, 245, 332, 359, 435, 449, 454, 465, 543, 555, 617, 649, 738, 771, 864, 868, 880, 934], "stdev": [29, 245], "ipccompress": [30, 245], "arrow": [30, 71, 85, 100, 103, 111, 203, 245, 613, 649, 911, 916, 934], "ipc": [30, 103, 104, 111, 114, 245, 565], "binari": [30, 245, 297, 299, 300, 301, 503, 698, 700, 701, 702], "feather": [30, 103, 111, 245, 565], "lz4": [30, 33, 245, 613, 614, 649], "zstd": [30, 33, 245, 613, 614, 649], "pretti": [31, 245], "row_ori": [31, 245], "iobas": [31, 32, 105, 106, 245, 605, 630, 649], "serial": [31, 32, 245], "represent": [31, 32, 207, 245, 303, 326, 329, 332, 333, 335, 337, 339, 340, 343, 344, 347, 353, 354, 356, 494, 555, 576, 593, 649, 705, 732, 735, 737, 738, 742, 744, 747, 749, 750, 753, 754, 757, 763, 764, 766, 914, 918, 934], "orient": [31, 61, 63, 89, 91, 245, 649], "slower": [31, 89, 91, 128, 150, 178, 218, 227, 245, 584, 633, 649, 658, 934], "common": [31, 245], "write_ndjson": [31, 245], "newlin": [32, 106, 112, 245], "delimit": [32, 93, 98, 99, 106, 109, 112, 180, 206, 245, 455, 870, 912, 934], "parquetcompress": [33, 245], "compression_level": [33, 245, 614, 649], "statist": [33, 98, 99, 107, 113, 133, 245, 359, 360, 389, 429, 430, 431, 432, 433, 434, 435, 436, 437, 449, 555, 614, 649, 721, 771, 772, 807, 844, 864, 934], "row_group_s": [33, 245, 614, 649], "use_pyarrow": [33, 98, 103, 107, 245, 614, 649, 915, 916, 934], "pyarrow_opt": [33, 101, 107, 110, 245], "parquet": [33, 107, 108, 113, 245, 565, 614, 649], "gzip": [33, 245, 614, 649], "lzo": [33, 245, 614, 649], "brotli": [33, 245, 614, 649], "choos": [33, 245, 613, 614, 649], "good": [33, 163, 245, 613, 614, 649], "perform": [33, 76, 86, 98, 99, 103, 107, 109, 111, 112, 113, 127, 128, 151, 152, 166, 183, 227, 245, 257, 415, 555, 585, 586, 591, 613, 614, 629, 633, 649, 658, 934], "fast": [33, 245, 364, 441, 555, 613, 614, 649, 775, 854, 934], "decompress": [33, 245, 613, 614, 649], "backward": [33, 142, 166, 245, 296, 366, 555, 580, 591, 614, 649, 777, 934], "guarante": [33, 86, 98, 99, 214, 245, 578, 614, 622, 649], "deal": [33, 245, 422, 481, 555, 614, 649, 832, 896, 934], "older": [33, 245, 614, 649], "reader": [33, 95, 98, 99, 103, 107, 245, 566, 614, 649], "higher": [33, 182, 237, 245, 421, 433, 538, 555, 604, 614, 643, 649, 831, 843, 934], "mean": [33, 98, 99, 103, 107, 109, 133, 142, 150, 180, 225, 245, 363, 366, 430, 449, 462, 507, 555, 580, 584, 595, 614, 631, 649, 721, 774, 777, 782, 840, 864, 877, 934], "smaller": [33, 138, 245, 578, 614, 649, 769, 934], "disk": [33, 103, 245, 612, 613, 614, 649], "11": [33, 115, 152, 245, 319, 320, 332, 342, 346, 352, 375, 416, 436, 450, 484, 509, 545, 555, 571, 586, 587, 594, 603, 614, 619, 649, 658, 752, 756, 762, 838, 934], "22": [33, 245, 346, 352, 355, 481, 509, 614, 649, 756, 762, 765, 896], "extra": [33, 98, 101, 102, 103, 107, 110, 111, 113, 140, 245, 614, 649, 657, 934], "comput": [33, 67, 68, 73, 138, 150, 166, 209, 214, 225, 237, 245, 251, 258, 259, 260, 261, 262, 263, 284, 285, 286, 308, 309, 311, 312, 313, 314, 315, 318, 357, 362, 389, 394, 395, 410, 415, 416, 420, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 446, 447, 448, 449, 453, 492, 493, 506, 512, 514, 521, 537, 542, 555, 584, 588, 590, 591, 614, 622, 628, 631, 643, 649, 653, 659, 660, 661, 662, 663, 664, 686, 687, 688, 713, 714, 715, 716, 717, 718, 723, 768, 769, 773, 807, 810, 811, 818, 826, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 861, 862, 863, 864, 867, 908, 909, 917, 934], "reduc": [33, 98, 99, 107, 109, 111, 112, 113, 232, 233, 235, 238, 245, 444, 524, 555, 614, 638, 639, 641, 644, 649, 815, 829, 858, 904, 934], "pressur": [33, 107, 112, 113, 245, 444, 555, 614, 649, 858, 934], "improv": [33, 103, 111, 245, 614, 649], "speed": [33, 245, 257, 555, 614, 649], "minimum": [33, 119, 120, 121, 145, 174, 245, 305, 307, 358, 359, 360, 409, 413, 422, 535, 555, 601, 614, 649, 709, 711, 746, 770, 771, 772, 823, 828, 832, 934], "implement": [33, 86, 127, 128, 227, 245, 257, 555, 633, 658, 852, 853, 934], "v": [33, 69, 138, 245, 440, 555, 720, 850, 934], "At": [33, 245], "moment": [33, 132, 245, 389, 449, 555, 807, 864, 934], "argument": [33, 98, 101, 107, 110, 132, 134, 139, 150, 151, 152, 170, 178, 179, 180, 192, 198, 200, 209, 215, 218, 222, 225, 245, 346, 352, 361, 376, 415, 417, 429, 430, 431, 432, 433, 435, 436, 437, 452, 468, 474, 480, 481, 508, 509, 510, 522, 532, 535, 541, 544, 555, 573, 577, 584, 585, 586, 602, 609, 616, 623, 627, 631, 649, 756, 762, 788, 883, 889, 895, 917, 934], "pyarrow": [33, 85, 90, 98, 101, 103, 107, 110, 114, 115, 164, 203, 208, 209, 245, 566, 911, 915, 916, 917, 934], "write_t": [33, 245], "calendar": [35, 36, 151, 152, 166, 218, 245, 332, 342, 346, 352, 356, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 738, 752, 756, 762, 766], "time": [36, 38, 66, 67, 70, 92, 98, 99, 109, 140, 151, 152, 166, 218, 245, 272, 273, 274, 294, 321, 322, 323, 328, 342, 345, 351, 355, 481, 494, 495, 510, 511, 520, 526, 540, 555, 571, 585, 586, 591, 603, 649, 657, 674, 676, 727, 728, 729, 734, 752, 755, 761, 765, 896, 918, 919, 934], "time_unit": [36, 38, 70, 92, 355, 765], "time_zon": [36, 70, 92, 323, 345, 729, 755], "m": [36, 38, 70, 321, 322, 328, 349, 351, 355, 481, 520, 526, 727, 728, 734, 759, 761, 765, 896], "timezon": [36, 70, 481, 896], "zoneinfo": 36, "run": [36, 67, 128, 150, 167, 214, 227, 245, 257, 276, 316, 541, 555, 571, 576, 578, 584, 595, 599, 603, 612, 613, 614, 622, 633, 649, 658, 678, 719, 934, 941], "available_timezon": 36, "attribut": [36, 37, 38, 45, 118, 245, 549, 551, 556, 557, 560, 561, 562, 649, 928, 930, 935, 938, 939, 940], "128": [37, 62, 826, 934], "bit": [37, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 424, 456, 555, 834, 871, 934], "neg": [37, 151, 154, 168, 194, 195, 197, 201, 245, 288, 289, 442, 443, 450, 475, 555, 585, 610, 611, 615, 629, 649, 690, 691, 784, 809, 856, 857, 865, 890, 905, 934], "scale": [37, 138, 245, 769, 934], "experiment": [37, 69, 114, 192, 216, 217, 222, 245, 316, 346, 429, 430, 431, 432, 433, 435, 436, 437, 555, 609, 624, 627, 649, 719, 756, 785, 830, 934], "progress": 37, "expect": [37, 77, 79, 84, 257, 504, 555, 593, 595, 649, 830, 934], "delta": [38, 101, 110, 199, 219, 245, 454, 500, 512, 537, 542, 543, 547, 555, 565, 617, 625, 649, 868, 924, 934], "32": [39, 42, 55, 62, 152, 162, 245, 444, 555, 586, 649, 723, 753, 826, 843, 934], "sign": [41, 42, 43, 44, 342, 424, 484, 555, 752, 834, 899, 934], "inner": [45, 51, 165, 217, 245, 281, 318, 555, 590, 624, 630, 649, 683, 723, 934], "polarsdatatyp": [45, 96, 98, 99, 104, 108, 109, 118, 120, 121, 124, 128, 137, 245, 257, 302, 361, 397, 399, 464, 504, 505, 509, 522, 530, 531, 555, 575, 649, 658, 703, 813, 879, 934], "pythondatatyp": 45, "nest": [45, 51, 138, 245, 565, 769, 934], "arrai": [45, 85, 89, 98, 99, 107, 138, 203, 208, 209, 245, 272, 283, 284, 285, 286, 287, 290, 291, 299, 305, 306, 307, 311, 312, 313, 314, 315, 395, 429, 430, 432, 435, 436, 437, 441, 457, 459, 462, 463, 465, 521, 555, 649, 674, 685, 686, 687, 688, 689, 692, 693, 700, 709, 710, 711, 715, 716, 717, 718, 723, 769, 811, 839, 840, 842, 845, 846, 847, 854, 859, 872, 874, 877, 878, 880, 911, 916, 917, 925, 934], "within": [45, 116, 117, 166, 245, 452, 555, 591, 649], "wrap": [47, 92, 376, 555], "arbitrari": [47, 120], "python": [47, 70, 98, 99, 115, 128, 163, 189, 205, 227, 245, 257, 322, 397, 504, 548, 555, 633, 658, 728, 739, 740, 741, 746, 915, 934], "queri": [48, 67, 100, 103, 109, 111, 112, 113, 140, 167, 179, 245, 294, 399, 465, 555, 571, 576, 578, 587, 594, 603, 612, 629, 633, 649, 657, 880, 934, 941], "pars": [48, 98, 99, 102, 109, 111, 112, 150, 192, 198, 212, 222, 225, 245, 376, 415, 452, 464, 470, 481, 506, 508, 510, 511, 526, 532, 535, 544, 555, 584, 609, 616, 621, 627, 631, 649, 788, 879, 885, 896, 934], "transform": [48, 128, 245, 397, 482, 483, 555], "lf": [50, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 625, 626, 627, 628, 629, 630, 649], "under": [50, 61, 62, 63, 64, 549, 551, 556, 557, 560, 561, 562, 928, 930, 935, 938, 939, 940], "context": [51, 176, 245, 252, 257, 276, 367, 405, 451, 452, 499, 504, 513, 523, 526, 541, 554, 555, 565, 628, 649, 678], "manag": [51, 565], "categor": [51, 93, 123, 165, 206, 207, 245, 303, 399, 494, 555, 704, 705, 918, 934], "temporarili": [51, 151, 152, 245, 585, 586, 649], "cach": [51, 67, 103, 109, 111, 113, 123, 399, 429, 430, 431, 432, 433, 435, 436, 437, 481, 555, 571, 576, 578, 603, 612, 649, 896], "categori": [51, 69, 123, 303, 705, 720, 785, 830, 934], "until": [51, 167, 245], "finish": [51, 73, 140, 245, 657, 934], "global": [51, 120, 123, 399, 555], "invalid": [51, 98, 99, 109, 464, 465, 470, 879, 880, 885], "outermost": 51, "exit": [51, 125], "df1": [51, 60, 68, 116, 140, 146, 209, 220, 245], "color": [51, 227, 633], "red": [51, 227, 633], "green": [51, 227, 633], "blue": 51, "orang": [51, 131, 228, 229, 231, 232, 233, 235, 237, 238, 245, 634, 635, 637, 638, 639, 641, 643, 644], "uint8": [51, 118, 207, 245, 314, 315, 399, 488, 555, 717, 718, 904, 934], "df2": [51, 60, 68, 116, 140, 146, 209, 220, 245], "yellow": 51, "black": [51, 128, 245], "join": [51, 60, 67, 166, 217, 245, 375, 415, 555, 571, 576, 578, 591, 603, 612, 624, 628, 649], "succe": [51, 98, 99, 109], "df_join": 51, "cat": [51, 69, 207, 245, 456, 482, 483, 494, 511, 551, 555, 720, 785, 830, 871, 930, 934], "u8": [51, 93, 206, 207, 245, 399, 555, 912, 934], "schemadict": [52, 85, 87, 88, 89, 90, 91, 109, 191, 245, 544, 595, 608, 633, 649], "composit": 52, "dai": [53, 70, 151, 152, 164, 166, 218, 245, 328, 332, 339, 342, 343, 344, 346, 351, 352, 353, 354, 356, 429, 430, 431, 432, 433, 435, 436, 437, 518, 519, 520, 555, 585, 586, 591, 649, 752, 753, 756, 762, 764], "unsign": [54, 55, 56, 57, 424, 555, 834, 934], "could": [58, 73, 136, 151, 245, 302, 515, 524, 555, 574, 585, 649, 703, 934], "static": [58, 633], "utf": 59, "descend": [60, 198, 212, 245, 266, 269, 290, 422, 441, 451, 452, 495, 506, 555, 616, 621, 649, 667, 670, 692, 802, 832, 854, 866, 919, 934], "uniqu": [60, 118, 119, 121, 161, 176, 236, 245, 268, 379, 387, 411, 481, 497, 499, 536, 555, 642, 649, 669, 721, 793, 804, 820, 896, 921, 923, 934], "fill": [60, 68, 96, 124, 141, 142, 195, 216, 245, 296, 312, 315, 365, 366, 371, 375, 429, 430, 432, 435, 436, 437, 443, 467, 473, 484, 525, 555, 579, 580, 611, 628, 649, 776, 777, 824, 839, 840, 842, 845, 846, 847, 857, 882, 888, 899, 934], "sort": [60, 61, 116, 151, 152, 166, 173, 179, 180, 212, 218, 230, 239, 245, 266, 269, 303, 367, 441, 452, 499, 501, 506, 555, 576, 585, 586, 591, 600, 602, 603, 612, 621, 636, 645, 649, 667, 670, 705, 802, 854, 920, 923, 934], "origin": [60, 98, 99, 214, 245, 345, 388, 399, 415, 424, 457, 462, 463, 465, 467, 473, 484, 555, 622, 649, 720, 755, 813, 830, 872, 877, 878, 880, 882, 888, 899, 934], "doe": [60, 79, 85, 87, 88, 89, 91, 92, 98, 99, 101, 102, 109, 110, 114, 116, 117, 140, 164, 188, 189, 214, 222, 245, 355, 399, 497, 523, 555, 578, 595, 622, 627, 649, 657, 765, 782, 813, 859, 925, 934], "receiv": [60, 109, 128, 179, 245, 417, 555, 602, 649], "now": [60, 152, 245, 481, 586, 649], "whose": [60, 166, 180, 245, 361, 522, 555, 591, 649], "post": 60, "constrain": 60, "newli": 60, "boolean": [60, 65, 143, 145, 198, 212, 245, 254, 255, 273, 297, 331, 367, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 452, 464, 501, 506, 544, 555, 581, 616, 621, 649, 655, 656, 668, 675, 698, 737, 778, 788, 789, 790, 792, 793, 795, 796, 797, 798, 799, 800, 804, 827, 828, 852, 871, 926, 934], "2022": [60, 70, 133, 149, 245, 322, 481, 520, 526, 728, 738, 896], "x": [60, 92, 98, 99, 100, 109, 119, 120, 138, 156, 159, 161, 165, 172, 245, 257, 272, 281, 372, 397, 425, 446, 449, 477, 494, 504, 515, 516, 517, 524, 531, 539, 545, 555, 590, 595, 599, 615, 649, 654, 658, 777, 805, 861, 864, 892, 918, 934], "y": [60, 92, 119, 120, 138, 159, 161, 165, 172, 245, 272, 281, 349, 425, 481, 517, 545, 555, 590, 599, 615, 649, 654, 759, 896, 934], "df3": [60, 245], "set_tbl_format": 60, "09": [60, 152, 245, 322, 332, 586, 649, 732], "01": [60, 70, 133, 149, 151, 152, 218, 245, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 481, 520, 585, 586, 649, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 896], "02": [60, 70, 115, 149, 151, 152, 218, 245, 321, 322, 328, 329, 330, 337, 338, 339, 347, 348, 351, 353, 355, 438, 481, 520, 555, 585, 586, 649, 727, 728, 730, 731, 734, 735, 736, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 896], "03": [60, 70, 92, 151, 152, 218, 245, 321, 322, 323, 327, 328, 330, 338, 339, 345, 346, 347, 348, 349, 351, 352, 353, 355, 585, 586, 649, 727, 728, 729, 732, 733, 734, 735, 736, 739, 740, 741, 742, 744, 746, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 761, 763, 764, 765], "af1": 60, "af2": 60, "af3": 60, "keep": [60, 98, 99, 109, 214, 217, 218, 245, 388, 399, 508, 555, 622, 624, 649, 720, 813, 830, 934], "easili": [60, 192, 222, 225, 245, 509, 544, 609, 627, 631, 649], "dot": [60, 555, 612, 649, 934], "product": [60, 132, 245, 314, 318, 504, 555, 717, 723, 934], "fill_nul": [60, 141, 245, 481, 555, 579, 628, 649, 896, 934], "167": 60, "47": 60, "callabl": [61, 62, 63, 64, 109, 128, 145, 179, 227, 245, 257, 294, 397, 398, 417, 428, 504, 515, 516, 524, 531, 539, 555, 595, 602, 633, 649, 658, 696, 838, 934], "decor": [61, 62, 63, 64, 120, 121, 128, 245, 257, 555, 658, 934], "access": [61, 62, 63, 64, 163, 188, 189, 245, 399, 555, 628, 649], "by_first_letter_of_column_nam": 61, "f": [61, 99, 133, 149, 164, 203, 213, 216, 245, 257, 294, 444, 461, 481, 504, 510, 515, 516, 524, 531, 539, 555, 696, 876, 896], "fromkei": [61, 63], "by_first_letter_of_column_valu": 61, "starts_with": [61, 456, 460, 875], "slice": [61, 67, 138, 154, 164, 201, 245, 280, 292, 428, 429, 430, 431, 432, 433, 435, 436, 437, 555, 571, 576, 578, 595, 603, 612, 613, 614, 649, 682, 694, 769, 784, 838, 839, 840, 841, 842, 843, 845, 846, 847, 905, 934], "to_seri": [61, 65, 245, 294, 696], "xx": [61, 63], "xy": [61, 63], "yy": [61, 63], "yz": [61, 63], "a2": [61, 63], "b1": [61, 63], "b2": [61, 63], "pow_n": 62, "powersofn": 62, "next": [62, 296, 422, 555, 832, 934], "p": [62, 179, 245, 417, 544, 555, 602, 649], "ceil": [62, 555, 934], "previou": [62, 125, 416, 486, 555, 826, 934], "floor": [62, 555, 934], "nearest": [62, 166, 182, 237, 245, 304, 370, 421, 433, 538, 555, 591, 604, 643, 649, 706, 780, 787, 831, 843, 934], "24": [62, 115, 128, 138, 152, 245, 314, 316, 330, 555, 586, 649, 719, 736, 934], "001": [62, 333, 334, 336, 341, 520, 743, 745, 751], "next_pow2": 62, "prev_pow2": 62, "nearest_pow2": 62, "split_by_column_dtyp": 63, "collect": [63, 67, 109, 110, 114, 167, 203, 245, 257, 380, 505, 510, 526, 544, 555, 573, 574, 577, 578, 579, 580, 581, 582, 584, 585, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 604, 606, 607, 609, 610, 611, 615, 616, 617, 618, 619, 620, 622, 623, 625, 627, 628, 629, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 649, 795, 934], "31": [64, 322, 326, 327, 339, 353, 481, 518, 519, 526, 728, 732, 733, 896], "42": [64, 152, 153, 245, 586, 649, 783, 934], "961": 64, "1764": 64, "4160": 64, "eager": [65, 151, 216, 245, 505, 526, 530, 540, 544, 554, 565, 585, 649], "evalu": [65, 141, 143, 166, 245, 267, 316, 374, 376, 380, 399, 503, 505, 521, 540, 544, 548, 555, 581, 588, 590, 591, 649, 668, 719, 926, 934], "immedi": [65, 422, 505, 540, 544, 555, 832, 934], "arg_tru": [65, 555, 934], "u32": [65, 151, 177, 223, 228, 236, 238, 245, 252, 264, 265, 266, 267, 268, 269, 270, 271, 274, 283, 310, 311, 326, 329, 333, 337, 339, 343, 344, 347, 353, 354, 391, 399, 411, 414, 422, 440, 457, 466, 469, 494, 497, 506, 513, 536, 555, 585, 629, 634, 642, 644, 649, 667, 668, 669, 685, 703, 732, 735, 742, 744, 747, 749, 750, 753, 754, 757, 763, 764, 785, 832, 872, 881, 884, 918, 921, 923, 934], "build": [66, 86], "wa": 66, "compil": [66, 270, 271, 672, 673], "gate": 66, "info": [66, 101, 110, 115, 331, 737], "otherwis": [66, 173, 192, 245, 298, 305, 306, 307, 358, 359, 360, 424, 456, 458, 548, 555, 600, 609, 649, 658, 699, 709, 710, 711, 770, 771, 772, 834, 852, 853, 871, 873, 934], "version": [66, 69, 93, 101, 110, 115, 269, 363, 481, 537, 539, 542, 555, 670, 774, 934], "depend": [66, 115, 257, 270, 271, 405, 422, 504, 523, 526, 555, 672, 673, 832, 934], "host": [66, 98, 103, 107, 111, 113], "git": 66, "lazy_fram": 67, "type_coercion": [67, 571, 576, 578, 603, 612, 613, 614, 649], "predicate_pushdown": [67, 571, 576, 578, 595, 603, 612, 613, 614, 649], "projection_pushdown": [67, 571, 576, 578, 595, 603, 612, 613, 614, 649], "simplify_express": [67, 571, 576, 578, 603, 612, 613, 614, 649], "no_optim": [67, 571, 578, 595, 603, 613, 614, 649], "slice_pushdown": [67, 571, 576, 578, 595, 603, 612, 613, 614, 649], "common_subplan_elimin": [67, 571, 576, 578, 603, 612, 649], "graph": [67, 167, 245, 588, 628, 649], "parallel": [67, 68, 95, 100, 107, 113, 151, 166, 167, 179, 245, 276, 316, 555, 565, 585, 590, 591, 649, 678, 719, 934], "threadpool": 67, "coercion": [67, 425, 555, 571, 576, 578, 603, 612, 613, 614, 649], "optim": [67, 107, 109, 111, 112, 113, 163, 167, 179, 183, 189, 214, 245, 571, 576, 578, 595, 603, 612, 613, 614, 622, 629, 649], "predic": [67, 109, 111, 112, 113, 114, 143, 188, 245, 367, 501, 524, 555, 571, 576, 578, 581, 595, 603, 606, 612, 613, 614, 629, 649, 778, 852, 853, 934], "pushdown": [67, 571, 576, 578, 595, 603, 606, 612, 613, 614, 629, 649, 852, 853, 934], "project": [67, 109, 111, 112, 113, 257, 451, 452, 555, 571, 576, 578, 595, 603, 606, 612, 613, 614, 630, 649], "turn": [67, 98, 99, 109, 123, 499, 555, 571, 576, 578, 595, 603, 613, 614, 649], "off": [67, 98, 99, 109, 123, 499, 555, 571, 576, 578, 595, 603, 613, 614, 649], "Will": [67, 213, 245, 571, 576, 578, 603, 612, 649, 934], "try": [67, 80, 82, 98, 99, 102, 103, 107, 109, 111, 113, 571, 576, 578, 603, 612, 649], "branch": [67, 571, 576, 578, 603, 612, 649], "subplan": [67, 571, 576, 578, 603, 612, 649], "occur": [67, 274, 410, 422, 555, 571, 576, 578, 603, 612, 649, 676, 818, 832, 934], "union": [67, 68, 571, 576, 578, 603, 612, 649, 723, 795, 853, 934], "part": [67, 85, 477, 478, 571, 576, 578, 603, 612, 628, 649, 732, 735, 742, 744, 747, 749, 750, 757, 766, 892, 893], "fashion": [67, 165, 245, 571, 576, 578, 603, 612, 649], "item": [68, 99, 190, 245, 273, 279, 281, 363, 439, 478, 555, 675, 681, 683, 774, 849, 893, 934], "iter": [68, 150, 151, 152, 163, 164, 178, 188, 189, 192, 198, 212, 213, 222, 224, 225, 245, 316, 361, 415, 452, 506, 508, 509, 510, 511, 522, 532, 535, 541, 544, 548, 555, 584, 585, 586, 609, 616, 621, 627, 631, 649, 719, 934], "rechunk": [68, 85, 90, 98, 99, 103, 107, 109, 111, 112, 113, 140, 245, 555, 657, 707, 819, 934], "concatmethod": 68, "vertic": [68, 140, 216, 220, 245, 455, 532, 535, 870], "aggreg": [68, 98, 99, 107, 145, 151, 169, 170, 171, 174, 176, 180, 181, 182, 199, 200, 216, 219, 225, 226, 229, 231, 245, 252, 367, 393, 397, 415, 428, 429, 430, 431, 432, 433, 435, 436, 437, 499, 515, 516, 517, 524, 529, 532, 535, 539, 545, 555, 585, 595, 596, 597, 598, 601, 604, 617, 618, 625, 631, 632, 635, 637, 649, 838, 839, 840, 842, 845, 846, 847, 934], "concaten": [68, 145, 179, 245, 417, 510, 511, 555, 602, 649, 707, 819, 934], "sure": [68, 85, 90, 98, 99, 100, 103, 107, 183, 245, 505], "contigu": [68, 85, 90, 98, 99, 103, 107, 109, 111, 112, 113, 183, 245], "diagon": [68, 213, 245], "strategi": [68, 98, 118, 119, 120, 121, 142, 151, 165, 166, 175, 245, 257, 294, 366, 555, 580, 585, 590, 591, 649, 696, 777, 934], "vstack": [68, 140, 245], "find": [68, 144, 245, 440, 555, 850, 934], "miss": [68, 98, 99, 109, 141, 245, 296, 358, 359, 360, 371, 375, 382, 384, 542, 555, 579, 649, 770, 771, 772, 925, 934], "stack": [68, 156, 220, 245], "length": [68, 69, 96, 109, 119, 124, 151, 152, 197, 245, 289, 316, 346, 352, 406, 428, 429, 430, 431, 432, 433, 435, 436, 437, 450, 467, 469, 473, 475, 484, 505, 555, 585, 586, 603, 615, 649, 691, 696, 707, 719, 720, 728, 756, 762, 808, 824, 830, 838, 839, 840, 841, 842, 843, 845, 846, 847, 865, 882, 884, 888, 890, 899, 934], "don": [68, 128, 214, 216, 245, 257, 276, 316, 504, 555, 622, 649, 658, 678, 719, 851, 925, 934], "t": [68, 102, 109, 128, 179, 214, 216, 245, 257, 276, 316, 357, 358, 359, 360, 417, 468, 474, 480, 481, 504, 548, 555, 602, 622, 649, 658, 678, 719, 768, 770, 771, 772, 851, 883, 889, 895, 896, 925, 934], "relev": 68, "execut": [68, 167, 245, 276, 568, 595, 603, 649, 678], "df_h1": 68, "l1": 68, "l2": 68, "df_h2": 68, "r1": 68, "r2": 68, "r3": 68, "df_d1": 68, "df_d2": 68, "bin": [69, 470, 549, 720, 785, 830, 885, 928, 934], "label": [69, 428, 429, 430, 431, 432, 433, 435, 436, 437, 555, 603, 649, 720, 830, 838, 839, 840, 841, 842, 843, 845, 846, 847, 934], "break_point_label": [69, 720, 830, 934], "break_point": [69, 720, 785, 830, 934], "category_label": [69, 720, 830, 934], "discret": [69, 275, 317, 357, 555, 677, 720, 722, 768, 785, 830, 934], "deprec": [69, 93, 269, 363, 481, 537, 542, 555, 649, 670, 774, 934], "sinc": [69, 93, 101, 110, 269, 328, 363, 481, 526, 537, 542, 555, 670, 734, 774, 934], "assign": [69, 119, 151, 245, 422, 477, 478, 555, 585, 649, 720, 813, 830, 832, 892, 893, 934], "breakpoint": [69, 720, 830, 934], "inf": [69, 120, 121, 263, 378, 381, 555, 664, 720, 785, 792, 796, 812, 826, 830, 922, 934], "low": [70, 151, 245, 347, 505, 585, 649], "high": [70, 151, 245, 347, 505, 585, 649], "interv": [70, 151, 152, 218, 245, 331, 346, 347, 352, 376, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 649, 732, 734, 735, 737, 742, 744, 747, 749, 750, 753, 754, 756, 757, 759, 761, 762, 763, 764, 766, 788, 934], "timedelta": [70, 151, 152, 218, 245, 326, 328, 329, 332, 337, 339, 342, 343, 344, 346, 347, 349, 351, 352, 353, 354, 356, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 649, 739, 741, 746, 752, 756, 762, 822, 823, 934], "1d": [70, 151, 152, 166, 218, 245, 321, 330, 338, 342, 346, 352, 355, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 727, 734, 736, 739, 740, 741, 746, 748, 752, 756, 759, 761, 762, 764, 765], "closedinterv": [70, 151, 152, 245, 376, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 649, 788, 934], "lower": [70, 109, 151, 182, 237, 245, 376, 396, 421, 424, 433, 505, 538, 555, 578, 585, 604, 643, 649, 788, 812, 831, 834, 843, 922, 934], "bound": [70, 98, 99, 138, 151, 245, 279, 293, 376, 396, 498, 505, 555, 585, 649, 681, 695, 769, 788, 812, 922, 934], "upper": [70, 98, 99, 138, 151, 245, 376, 498, 505, 555, 585, 649, 769, 788, 812, 922, 934], "period": [70, 151, 152, 194, 195, 245, 288, 346, 352, 358, 359, 360, 416, 442, 443, 555, 585, 586, 610, 611, 649, 690, 756, 762, 770, 771, 772, 826, 856, 857, 934], "like": [70, 86, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 159, 161, 165, 245, 276, 408, 422, 532, 535, 545, 555, 578, 605, 649, 678, 832, 934], "durat": [70, 166, 218, 245, 327, 330, 334, 336, 338, 341, 348, 355, 494, 555, 591, 649, 733, 736, 743, 745, 748, 751, 758, 765, 918, 934], "3d12h4m25": [70, 151, 152, 166, 218, 245, 346, 352, 585, 586, 591, 649, 756, 762], "hour": [70, 151, 152, 166, 218, 245, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 519, 520, 555, 585, 586, 591, 649, 752, 756, 762], "minut": [70, 151, 152, 166, 218, 245, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 519, 520, 555, 585, 586, 591, 649, 752, 756, 762], "tempor": [70, 151, 152, 163, 189, 205, 245, 376, 429, 430, 431, 432, 433, 435, 436, 437, 555, 565, 585, 586, 649, 788, 803, 934], "window": [70, 151, 152, 245, 316, 346, 352, 358, 359, 360, 415, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 510, 555, 585, 586, 649, 719, 756, 762, 770, 771, 772, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 934], "granular": 70, "finer": 70, "permut": 70, "1mo": [70, 151, 152, 166, 218, 245, 323, 327, 342, 345, 346, 349, 352, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 729, 733, 749, 752, 753, 754, 755, 756, 762, 763], "dtrang": 70, "1985": 70, "04": [70, 114, 151, 218, 245, 322, 323, 326, 327, 330, 337, 338, 339, 343, 345, 346, 347, 348, 349, 353, 354, 355, 481, 520, 585, 649, 729, 733, 736, 742, 744, 747, 748, 749, 750, 754, 755, 757, 758, 759, 763, 764, 765, 896], "05": [70, 114, 116, 117, 166, 218, 245, 322, 323, 327, 345, 347, 349, 591, 649, 728, 729, 730, 731, 732, 733, 755, 756, 760, 762, 764], "07": [70, 322, 326, 343, 345, 346, 352, 354, 481, 526, 728, 732, 764, 896], "08": [70, 116, 117, 152, 245, 322, 346, 481, 520, 586, 649, 756, 762, 896], "zone": [70, 98, 99, 109, 323, 345, 729, 755], "america": [70, 755], "new_york": [70, 755], "\u03bc": [70, 92, 151, 152, 166, 218, 245, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 481, 526, 585, 586, 591, 649, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 896], "est": [70, 755], "encount": [71, 151, 245, 412, 413, 464, 465, 512, 515, 524, 542, 555, 585, 649, 822, 823, 879, 880, 934], "duplic": [74, 159, 165, 166, 214, 245, 377, 555, 590, 591, 622, 649, 790, 934], "certain": [75, 101, 110, 157, 218, 245, 509, 571, 603, 613, 614, 649, 934], "least": [77, 120, 416, 499, 555, 826, 923, 934], "unexpect": [78, 245], "caus": [78, 86, 98, 99, 109, 127, 140, 245, 657, 934], "panic": 78, "combin": [80, 82, 151, 152, 153, 166, 218, 245, 267, 352, 468, 474, 480, 555, 585, 586, 591, 612, 649, 762, 883, 889, 895], "mismatch": 80, "incompat": 82, "pa": [85, 114], "chunkedarrai": [85, 175, 245, 723, 934], "schemadefinit": [85, 87, 88, 89, 91, 245, 649], "schema_overrid": [85, 87, 88, 89, 90, 91, 164, 245, 649], "copi": [85, 86, 127, 129, 130, 164, 203, 209, 222, 245, 364, 484, 555, 569, 570, 627, 649, 654, 708, 712, 725, 775, 899, 911, 916, 917, 934], "closest": 85, "pair": [85, 87, 88, 89, 91, 184, 245, 606, 649], "declar": [85, 87, 88, 89, 91, 245, 649], "sever": [85, 87, 88, 89, 91, 245, 649], "wai": [85, 87, 88, 89, 91, 134, 150, 164, 179, 198, 225, 245, 415, 417, 452, 509, 555, 573, 584, 602, 616, 631, 649], "As": [85, 87, 88, 89, 91, 102, 245, 540, 649], "auto": [85, 87, 88, 89, 91, 107, 113, 213, 245, 481, 649], "automat": [85, 87, 88, 89, 91, 92, 98, 99, 100, 109, 120, 121, 192, 222, 245, 468, 474, 480, 481, 609, 627, 649, 883, 889, 895, 896, 934], "equival": [85, 87, 88, 89, 91, 101, 162, 176, 245, 469, 555, 649, 806, 884, 897, 898, 934], "form": [85, 87, 88, 89, 91, 163, 189, 216, 245, 416, 555, 649, 826, 934], "them": [85, 87, 88, 89, 91, 109, 140, 151, 152, 166, 173, 218, 245, 281, 376, 412, 413, 510, 555, 585, 586, 591, 600, 649, 657, 683, 822, 823, 934], "dimens": [85, 87, 89, 91, 245, 426, 555, 649, 836, 934], "construct": [85, 87, 88, 89, 90, 91, 245, 399, 555, 583, 605, 649, 934], "allow_copi": [86, 127], "interchang": [86, 127], "protocol": [86, 100, 127], "__dataframe__": 86, "convers": [86, 127, 164, 209, 245, 481, 565, 896, 915, 916, 917, 934], "detail": [86, 100, 116, 117, 127, 245, 649, 942], "latest": [86, 101, 110, 127, 371, 406, 555], "index": [86, 90, 94, 100, 115, 127, 144, 151, 152, 157, 166, 180, 186, 188, 197, 210, 218, 223, 245, 252, 264, 265, 266, 268, 269, 270, 271, 279, 289, 293, 342, 429, 430, 431, 432, 433, 435, 436, 437, 440, 450, 462, 475, 490, 555, 585, 586, 591, 615, 629, 649, 665, 666, 667, 668, 669, 670, 672, 673, 681, 691, 695, 752, 824, 850, 853, 865, 877, 890, 906, 934], "throw": [86, 302, 464, 465, 555, 703, 879, 880, 934], "runtimeerror": 86, "from_panda": [86, 102], "from_arrow": 86, "effici": [86, 164, 245], "map": [87, 88, 98, 99, 103, 104, 107, 108, 109, 111, 128, 137, 163, 184, 188, 189, 204, 245, 346, 352, 398, 399, 499, 504, 555, 575, 606, 649, 756, 762, 813, 934], "clone": [87, 88, 89, 90, 91, 129, 208, 209, 245, 569, 649, 708, 915, 916, 917, 925, 934], "dimension": [87, 89, 91, 245, 649, 934], "infer_schema_length": [88, 91, 98, 99, 102, 109, 112, 245, 649], "mani": [88, 91, 100, 140, 245, 657, 934], "scan": [88, 91, 98, 99, 107, 109, 110, 111, 112, 113, 114, 578, 587, 594, 649], "slow": [88, 91, 98, 99, 109, 257, 316, 555, 719, 934], "NOT": [88, 116, 117], "typic": [88, 128, 245, 658, 934], "clearer": 88, "load": [88, 90, 101, 110, 245, 565, 587, 594, 649], "want": [88, 128, 140, 176, 245, 257, 305, 306, 307, 367, 397, 399, 429, 430, 431, 432, 433, 435, 436, 437, 515, 524, 555, 571, 587, 594, 649, 657, 658, 709, 710, 711, 916, 934], "_partial_": [88, 245, 649], "omit": [88, 92, 119, 120, 121, 176, 245], "partial": 88, "present": [88, 116, 120, 380, 555, 925, 934], "np": [89, 143, 245, 490, 555, 649, 792, 796, 797, 798, 838, 906, 934], "ndarrai": [89, 143, 208, 245, 490, 555, 649, 723, 850, 853, 906, 916, 934], "numpi": [89, 115, 132, 208, 209, 245, 412, 413, 555, 649, 792, 796, 797, 798, 822, 823, 838, 850, 916, 917, 925, 934], "columnar": [89, 91, 163, 189, 245], "interpret": [89, 91, 98, 99, 109, 245, 649], "yield": [89, 91, 98, 99, 109, 138, 140, 213, 245, 649, 657, 769, 934], "conclus": [89, 91, 245, 649], "pd": [90, 102, 494, 555, 918, 934], "nan_to_nul": [90, 245, 649, 934], "include_index": 90, "datetimeindex": [90, 723, 934], "panda": [90, 102, 115, 209, 245, 494, 555, 649, 917, 918, 934], "instal": [90, 98, 99, 100, 103, 107, 115, 132, 208, 209, 245, 612, 649, 917, 934], "nan": [90, 116, 117, 120, 127, 141, 209, 245, 319, 320, 365, 375, 382, 384, 385, 386, 400, 409, 412, 413, 512, 542, 555, 579, 649, 660, 664, 724, 776, 797, 798, 822, 823, 838, 917, 934], "convert": [90, 93, 101, 102, 110, 127, 204, 205, 206, 207, 208, 211, 245, 294, 323, 470, 481, 649, 696, 729, 885, 896, 903, 914, 915, 916, 917, 925, 934], "pd_df": 90, "pd_seri": 90, "tbl": [92, 95, 99], "reconstruct": 92, "repr": [92, 120, 121], "need": [92, 98, 99, 102, 116, 117, 151, 152, 196, 208, 245, 294, 399, 444, 466, 555, 585, 586, 649, 858, 881, 934], "trim": 92, "whitespac": [92, 468, 474, 480, 883, 889, 895], "prompt": 92, "extract": [92, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 347, 348, 353, 354, 356, 417, 463, 464, 465, 555, 730, 731, 732, 733, 735, 736, 738, 742, 743, 744, 745, 747, 748, 749, 750, 751, 753, 754, 757, 758, 760, 763, 764, 766, 878, 879, 880], "to_init_repr": [92, 245, 934], "handl": [92, 98, 99, 109, 114, 275, 317, 484, 555, 677, 722, 899, 934], "truncat": [92, 151, 245, 585, 603, 649], "identifi": [92, 172, 178, 214, 245, 599, 622, 649], "compound": 92, "struct": [92, 176, 192, 211, 215, 222, 245, 294, 399, 464, 477, 478, 499, 515, 516, 517, 531, 555, 609, 623, 627, 649, 696, 879, 892, 893], "neither": [92, 190, 245], "though": 92, "plan": [92, 166, 167, 245, 568, 576, 583, 590, 591, 605, 612, 630, 649], "source_ac": 92, "source_cha": 92, "ident": [92, 129, 130, 245, 569, 570, 649, 708, 712, 934], "timestamp": [92, 345, 526, 755], "tor_id": 92, "nnel_id": 92, "asia": [92, 730, 731, 760], "tokyo": 92, "123456780": 92, "9876543210": 92, "56": [92, 492, 555], "59": [92, 115, 322, 337, 347, 519, 728, 747, 757], "663053": 92, "jst": 92, "803065983": 92, "2055938745": 92, "38": [92, 120], "18": [92, 152, 245, 315, 346, 352, 355, 375, 388, 555, 586, 603, 649, 765], "050545": 92, "source_actor_id": 92, "source_channel_id": 92, "dummi": [93, 206, 245, 912, 934], "to_dummi": [93, 245, 934], "foo_1": [93, 206, 245], "foo_2": [93, 206, 245], "bar_3": [93, 206, 245], "bar_4": [93, 206, 245], "ham_a": [93, 206, 245], "ham_b": [93, 206, 245], "datatypeclass": 94, "get": [94, 104, 108, 122, 131, 137, 147, 148, 151, 152, 154, 155, 159, 161, 168, 175, 188, 191, 193, 197, 201, 221, 230, 239, 245, 252, 264, 265, 266, 268, 269, 278, 282, 283, 295, 311, 312, 313, 314, 315, 328, 368, 373, 377, 379, 387, 390, 392, 400, 401, 402, 405, 407, 409, 412, 413, 421, 450, 454, 466, 469, 488, 489, 496, 500, 523, 528, 532, 533, 534, 535, 543, 546, 547, 555, 572, 575, 582, 585, 586, 587, 592, 594, 608, 615, 619, 626, 636, 645, 649, 665, 666, 667, 668, 669, 670, 680, 684, 685, 697, 707, 715, 716, 717, 718, 734, 781, 784, 788, 790, 793, 804, 809, 814, 816, 817, 819, 822, 823, 827, 828, 831, 865, 868, 881, 884, 905, 911, 912, 920, 924, 925, 934], "uint32": [94, 115, 138, 245, 266, 269, 270, 271, 283, 326, 329, 333, 335, 337, 339, 340, 343, 344, 347, 353, 354, 425, 457, 466, 469, 490, 494, 555, 668, 672, 673, 685, 703, 732, 735, 742, 744, 747, 749, 750, 753, 754, 757, 763, 764, 769, 851, 872, 918, 934], "regular": [94, 163, 188, 189, 218, 245, 361, 509, 522, 532, 535, 545, 555], "uint64": [94, 153, 245, 270, 271, 372, 424, 555, 672, 673, 783, 834, 934], "bigidx": 94, "read": [95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 140, 245, 397, 548, 555, 578, 583, 605, 649, 657, 934], "batch": [95, 99, 112, 595, 649], "over": [95, 98, 99, 101, 109, 120, 128, 140, 163, 164, 188, 189, 213, 224, 227, 245, 257, 316, 366, 375, 397, 398, 428, 429, 430, 431, 432, 433, 435, 436, 437, 504, 515, 516, 524, 531, 539, 555, 633, 657, 658, 719, 838, 839, 840, 842, 846, 934], "fetch": [95, 109, 167, 245, 569, 571, 587, 594, 649], "ideal": 95, "read_csv_batch": [95, 566], "tpch": [95, 99], "tables_scale_100": [95, 99], "lineitem": [95, 99, 100], "try_parse_d": [95, 98, 99, 109], "In": [96, 101, 110, 113, 120, 121, 124, 128, 138, 140, 151, 152, 176, 245, 257, 405, 555, 585, 586, 649, 657, 769, 833, 934], "probabl": [96, 124, 357, 555, 768, 934], "n_row": [97, 98, 99, 103, 107, 109, 111, 112, 113, 164, 245, 578, 649], "accept": [97, 98, 99, 101, 103, 107, 139, 150, 192, 198, 212, 222, 225, 245, 361, 376, 415, 418, 452, 506, 508, 509, 510, 511, 522, 532, 535, 544, 555, 577, 584, 609, 616, 621, 627, 631, 649, 788, 934], "stop": [97, 98, 99, 103, 107, 109, 111, 112, 113, 326, 328, 329, 331, 332, 337, 339, 343, 344, 346, 347, 351, 352, 353, 354, 356, 727, 729, 732, 734, 735, 737, 742, 744, 747, 749, 750, 753, 754, 755, 756, 757, 759, 761, 762, 763, 764, 765, 766], "textio": 98, "new_column": [98, 99, 102, 109], "comment_char": [98, 99, 109], "quote_char": [98, 99, 109], "skip_row": [98, 99, 109], "missing_utf8_is_empty_str": [98, 99, 109], "ignore_error": [98, 99, 109], "n_thread": [98, 99], "8192": 98, "csvencod": [98, 99, 109], "low_memori": [98, 99, 107, 109, 112, 113], "storage_opt": [98, 101, 103, 107, 110, 111, 113], "skip_rows_after_head": [98, 99, 109], "row_count_nam": [98, 99, 103, 107, 109, 111, 112, 113], "row_count_offset": [98, 99, 103, 107, 109, 111, 112, 113], "sample_s": [98, 99], "eol_char": [98, 99, 109], "we": [98, 99, 102, 109, 166, 245, 276, 470, 530, 548, 591, 595, 649, 658, 678, 785, 830, 885, 934], "handler": [98, 99, 102], "g": [98, 99, 101, 102, 103, 107, 110, 111, 113, 216, 245, 257, 361, 444, 522, 555, 606, 649, 851, 916, 934], "builtin": [98, 99, 102], "stringio": [98, 99], "fsspec": [98, 99, 103, 107, 110, 111, 113, 115], "remot": [98, 99, 103, 107], "first": [98, 99, 102, 109, 112, 128, 149, 151, 154, 166, 168, 175, 179, 180, 201, 207, 213, 214, 218, 230, 245, 266, 268, 269, 276, 279, 280, 316, 342, 346, 373, 379, 392, 399, 417, 440, 452, 462, 464, 465, 471, 472, 508, 515, 524, 528, 548, 555, 571, 585, 587, 591, 594, 602, 622, 628, 636, 649, 667, 670, 678, 681, 682, 696, 719, 721, 752, 756, 784, 793, 809, 813, 850, 877, 879, 880, 886, 887, 905, 914, 934], "autogener": [98, 99, 109], "column_x": [98, 99, 109], "enumer": [98, 99, 109, 164, 245], "shorter": [98, 99], "remain": [98, 99, 109, 138, 245, 257, 477, 478, 555, 595, 649, 769, 892, 893, 934], "comment": [98, 99, 109], "instanc": [98, 99, 109, 120, 121, 140, 145, 245, 294, 302, 406, 429, 430, 431, 432, 433, 435, 436, 437, 515, 524, 555, 595, 629, 649, 657, 703, 934], "special": [98, 99, 109, 658, 934], "escap": [98, 99, 109], "dure": [98, 99, 109, 125, 140, 245, 657, 934], "equal": [98, 99, 109, 116, 117, 123, 146, 151, 166, 173, 245, 428, 429, 430, 431, 432, 433, 435, 436, 437, 466, 467, 473, 484, 505, 555, 585, 591, 600, 649, 838, 839, 840, 841, 842, 843, 845, 846, 847, 851, 881, 882, 888, 899, 934], "would": [98, 99, 109, 266, 269, 279, 405, 422, 506, 555, 667, 670, 681, 832, 916, 934], "prefer": [98, 99, 101, 109, 128, 140, 163, 188, 189, 227, 245, 257, 428, 555, 633, 649, 657, 658, 838, 934], "treat": [98, 99, 109, 456, 471, 472, 871, 886, 887], "10000": [98, 164, 245, 484], "check": [98, 99, 109, 116, 117, 146, 160, 162, 245, 254, 255, 273, 297, 300, 301, 376, 380, 456, 460, 479, 555, 595, 649, 655, 656, 675, 698, 701, 702, 789, 791, 794, 795, 801, 802, 803, 805, 806, 851, 871, 875, 894, 934], "might": [98, 99, 109, 257, 405, 497, 555, 917, 934], "issu": [98, 99, 102, 109, 314, 315, 488, 555, 717, 718, 904, 934], "iso8601": [98, 99, 109], "naiv": [98, 99, 109, 322, 728], "alwai": [98, 128, 227, 245, 405, 548, 595, 633, 649, 658, 934], "physic": [98, 99, 166, 245, 303, 494, 555, 568, 590, 591, 649, 705, 918, 934], "cpu": [98, 99], "system": [98, 99], "wrongli": 98, "done": [98, 99, 109, 114, 149, 166, 245, 256, 302, 467, 473, 555, 591, 649, 703, 882, 888, 934], "buffer": [98, 99, 138, 163, 245, 769, 934], "modifi": [98, 99, 109, 125, 156, 163, 220, 245, 267, 345, 355, 555, 755, 765, 835, 897, 898, 934], "lossi": [98, 99, 109], "decod": [98, 99], "im": [98, 99], "usag": [98, 99, 109, 120, 121, 196, 245, 859, 934], "expens": [98, 99, 107, 109, 112, 113, 128, 163, 188, 189, 213, 214, 245, 257, 555, 622, 649, 657, 658, 934], "nativ": [98, 103, 107, 128, 163, 189, 205, 227, 245, 257, 555, 633, 658, 934], "parser": 98, "even": 98, "regard": [98, 512, 542], "sens": [98, 103, 107, 111, 113, 151, 152, 173, 218, 245, 585, 586, 600, 649], "particular": [98, 103, 107, 111, 113, 138, 245, 769, 934], "storag": [98, 101, 103, 107, 110, 111, 113], "skip": [98, 99, 102, 107, 109, 113, 216, 245, 658, 934], "offset": [98, 99, 103, 107, 109, 111, 112, 113, 151, 152, 197, 218, 223, 245, 289, 342, 346, 352, 450, 475, 481, 555, 585, 586, 615, 629, 649, 691, 752, 756, 762, 865, 890, 896, 934], "row_count": [98, 99, 103, 107, 109, 111, 112, 113], "sampl": [98, 99, 227, 245, 449, 555, 633, 864, 934], "estim": [98, 99, 138, 245, 359, 360, 389, 555, 769, 771, 772, 807, 934], "alloc": [98, 99, 138, 183, 245, 769, 934], "scan_csv": [98, 99, 613, 614, 649], "lazili": [98, 99, 109, 110, 111, 112, 113, 399, 555], "glob": [98, 99, 109, 111, 112, 113], "pattern": [98, 99, 109, 111, 112, 113, 163, 245, 404, 456, 457, 462, 463, 471, 472, 852, 853, 871, 872, 877, 878, 886, 887, 934], "store": [98, 107, 140, 163, 189, 245, 657, 934], "continu": [98, 107, 449, 555, 864, 934], "benchmark": [98, 107], "50000": 99, "batchedcsvread": [99, 565], "upon": 99, "creation": 99, "gather": 99, "next_batch": 99, "big": 99, "interest": 99, "seen_group": 99, "big_fil": 99, "while": [99, 101, 102, 110, 120, 121, 163, 172, 213, 245, 599, 649], "df_current_batch": 99, "concat": [99, 707, 819, 934], "partition_df": 99, "partition_bi": [99, 164, 245], "as_dict": [99, 178, 245], "fh": 99, "write_csv": [99, 109, 245], "els": [99, 548], "partition_on": 100, "partition_rang": 100, "partition_num": 100, "dbreadengin": 100, "connectorx": [100, 115], "raw": 100, "partit": [100, 101, 107, 110, 114, 164, 178, 245], "backend": [100, 101, 110], "transfer": 100, "document": [100, 102, 465, 481, 880, 896], "redshift": 100, "mysql": 100, "mariadb": 100, "clickhous": 100, "oracl": 100, "bigqueri": 100, "pleas": 100, "doc": [100, 132, 245], "github": 100, "sfu": 100, "db": 100, "connector": 100, "destin": 100, "sqlite": 100, "develop": [100, 120, 121], "flight_sql": 100, "further": [100, 917, 934], "wide": [100, 149, 172, 216, 245, 599, 649], "adopt": 100, "significantli": 100, "better": [100, 128, 227, 245, 257, 499, 555, 633, 852, 853, 934], "driver": 100, "cpp": 100, "partition_col": 100, "explicitli": [100, 119, 120, 399, 544, 555], "delta_table_opt": [101, 110], "lake": [101, 110, 565], "root": [101, 110, 388, 398, 407, 419, 453, 487, 554, 555, 867, 934], "filesystem": [101, 110], "absolut": [101, 110, 116, 117, 188, 245, 251, 358, 359, 360, 555, 653, 770, 771, 772, 934], "gc": [101, 110], "azur": [101, 110], "deltalak": [101, 110, 115], "cloud": [101, 110, 114], "configur": [101, 110], "authent": [101, 110], "keyword": [101, 107, 110, 132, 179, 188, 192, 222, 225, 245, 417, 541, 544, 555, 602, 609, 627, 631, 649, 934], "table_path": [101, 110], "avoid": 101, "year": [101, 110, 151, 152, 166, 218, 245, 331, 332, 342, 343, 346, 352, 353, 429, 430, 431, 432, 433, 435, 436, 437, 518, 519, 555, 585, 586, 591, 649, 737, 738, 752, 753, 756, 762, 763], "2021": [101, 110, 133, 149, 151, 218, 245, 481, 530, 585, 649, 730, 731, 738, 760, 803, 896, 934], "aw": [101, 110], "bucket": [101, 110, 346, 352, 756, 762, 785, 934], "aws_access_key_id": [101, 110], "the_aws_access_key_id": [101, 110], "aws_secret_access_kei": [101, 110], "the_aws_secret_access_kei": [101, 110], "googl": [101, 110], "service_account": [101, 110], "service_account_json_absolute_path": [101, 110], "az": [101, 110], "adl": [101, 110], "abf": [101, 110], "azure_storage_account_nam": [101, 110], "azure_storage_account_kei": [101, 110], "without_fil": [101, 110], "track": [101, 110, 128, 245], "sheet_id": 102, "sheet_nam": 102, "xlsx2csv_option": 102, "read_csv_opt": 102, "xlsx2csv": [102, 115], "read_csv": [102, 109], "skip_empty_lin": 102, "my": [102, 114], "datasheet": 102, "correct": [102, 359, 360, 389, 434, 449, 555, 595, 649, 771, 772, 807, 844, 864, 934], "look": [102, 294, 297, 698], "fix": [102, 119, 120, 355, 429, 430, 431, 432, 433, 435, 436, 437, 555, 765], "whole": [102, 451, 452, 462, 555, 649, 877], "With": [102, 128, 245, 257, 555, 658, 934], "1000": [102, 138, 207, 245, 333, 334, 484, 743, 914, 934], "spreadsheet": [102, 180, 245], "xl": 102, "xlsm": 102, "xlsb": 102, "odf": 102, "od": [102, 480, 895], "odt": 102, "memory_map": [103, 107, 111], "v2": [103, 111], "greatli": [103, 111], "repeat": [103, 111, 423, 425, 555], "o": [103, 111, 316, 461, 495, 555, 719, 876, 919, 934], "page": [103, 107, 111, 113, 245, 555, 565, 614, 649, 934], "give": [103, 107, 111, 112, 113, 172, 214, 245, 328, 389, 425, 555, 565, 599, 622, 649, 734, 807, 934], "That": [103, 595, 649], "filenam": 103, "my_fil": 103, "write_ipc": [103, 245], "read_ndjson": 105, "parallelstrategi": [107, 113], "use_statist": [107, 113], "awar": [107, 163, 189, 205, 245, 481, 896], "stabl": [107, 132, 190, 245, 599, 649], "row_group": [107, 113], "read_tabl": 107, "with_column_nam": 109, "push": [109, 111, 112, 113, 114], "down": [109, 111, 112, 113, 114, 370, 555, 780, 934], "therebi": [109, 111, 112, 113], "potenti": [109, 111, 112, 113], "overhead": [109, 111, 112, 113], "realloc": [109, 111, 112, 140, 245, 657, 934], "headerless": 109, "unlik": 109, "fewer": 109, "my_long_fil": 109, "doesn": [109, 357, 555, 768, 925, 934], "thing": [109, 502, 523], "less": [109, 166, 245, 467, 473, 478, 484, 591, 649, 882, 888, 893, 899], "limit": [109, 142, 245, 296, 305, 306, 307, 366, 371, 555, 580, 587, 614, 649, 709, 710, 711, 777, 934], "breezah": 109, "languag": [109, 151, 152, 166, 218, 245, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 752, 756, 762], "hard": [109, 595, 649], "mydf": 109, "lambda": [109, 128, 145, 179, 227, 245, 257, 294, 358, 359, 360, 397, 398, 428, 504, 515, 516, 517, 524, 531, 539, 545, 555, 595, 602, 633, 649, 658, 696, 770, 771, 772, 934], "simpli": [109, 515, 524], "idx": [109, 151, 164, 245, 294, 585, 649, 696, 853, 934], "uint16": [109, 314, 315, 488, 555, 717, 718, 904, 934], "u16": 109, "aws_region": 110, "eu": 110, "central": [110, 389, 449, 555, 807, 864, 934], "allow_pyarrow_filt": 114, "comparison": 114, "dset": 114, "folder": 114, "1970": 114, "stdout": [115, 149, 245], "13": [115, 129, 130, 141, 142, 148, 152, 157, 167, 175, 222, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 428, 430, 510, 515, 524, 547, 555, 569, 570, 579, 580, 586, 593, 627, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 649, 658, 756, 762, 763, 934], "platform": 115, "maco": 115, "arm64": 115, "arm": 115, "64bit": [115, 424, 555, 834, 934], "main": 115, "feb": 115, "clang": 115, "14": [115, 128, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 332, 375, 555, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 756], "1400": 115, "29": 115, "202": 115, "2_alpha": 115, "detect": 115, "matplotlib": [115, 603, 612, 649], "check_dtyp": [116, 117], "check_exact": [116, 117], "rtol": [116, 117], "1e": [116, 117], "atol": [116, 117], "nans_compare_equ": [116, 117], "check_column_ord": 116, "check_row_ord": 116, "assertionerror": [116, 117], "compar": [116, 117, 146, 245, 503, 851, 934], "exactli": [116, 117, 120, 121, 477, 478, 859, 892, 893, 934], "toler": [116, 117, 166, 245, 591, 649], "inexact": [116, 117], "assert": [116, 117, 119, 120, 121, 152, 245, 565, 586, 649, 782, 934], "irrespect": 116, "unsort": 116, "check_nam": 117, "s1": [117, 145, 245, 917, 926, 934], "searchstrategi": [118, 120, 121], "null_prob": [118, 120, 121], "percentag": [118, 120, 121, 416, 555, 826, 934], "chanc": [118, 120, 121], "flag": [118, 441, 555, 576, 595, 649, 854, 934], "hypothesi": [118, 119, 120, 121, 942], "sampled_from": 118, "unique_small_int": 118, "ccy": 118, "gbp": 118, "eur": [118, 133, 149, 245], "jpy": 118, "min_col": [119, 120], "max_col": [119, 120], "suitabl": [119, 128, 245, 257, 440, 555, 658, 850, 934], "standalon": [119, 120], "itself": [119, 593, 649], "mincol": 119, "exact": [119, 120, 121, 196, 245, 481, 896], "especi": 119, "punctuat": 119, "test_special_char_colname_init": 119, "test_unique_xyz": 119, "assert_someth": 119, "min_siz": [120, 121], "max_siz": [120, 121], "include_col": 120, "allow_infin": [120, 121], "allowed_dtyp": [120, 121], "excluded_dtyp": [120, 121], "describ": [120, 149, 245, 934], "desir": 120, "ignor": [120, 121, 170, 200, 245, 275, 317, 345, 358, 359, 360, 412, 413, 555, 677, 722, 755, 770, 771, 772, 822, 823, 934], "n_chunk": [120, 121, 245, 934], "randomis": 120, "onto": 120, "independ": [120, 121], "either": [120, 152, 167, 170, 178, 188, 200, 245, 586, 593, 649], "pct": 120, "preced": 120, "disallow": [120, 121], "exclud": [120, 121, 312, 315, 376, 509, 542, 555, 788, 803, 934], "deploi": [120, 121], "characterist": [120, 121], "concret": [120, 121], "test_repr": [120, 121], "isinst": [120, 121, 245], "known": [120, 633], "df_strategi": 120, "15836": 120, "1755e": 120, "575050513": 120, "constructor": 121, "max_data_s": 121, "54666": 121, "6414": 121, "63290": 121, "toggl": [123, 481, 896], "scope": 125, "lifetim": 125, "initi": [125, 515, 524, 548], "whatev": 125, "were": 125, "enter": 125, "set_verbos": 125, "do_various_th": 125, "restor": 125, "nan_as_nul": 127, "_pyarrowdatafram": 127, "nullabl": 127, "extens": [127, 209, 245, 917, 934], "propag": [127, 170, 200, 245, 412, 413, 555, 822, 823, 934], "inference_s": [128, 245], "256": [128, 245, 826, 934], "user": [128, 179, 227, 245, 257, 417, 441, 504, 555, 602, 633, 649, 658, 854, 934], "udf": [128, 179, 227, 245, 257, 417, 504, 555, 602, 633, 649, 658, 934], "logic": [128, 227, 245, 494, 555, 583, 590, 605, 630, 633, 649, 658, 918, 934], "almost": [128, 227, 245, 633, 658, 934], "_significantly_": [128, 227, 245, 633, 658, 934], "intens": [128, 227, 245, 633, 658, 934], "becaus": [128, 138, 151, 167, 216, 227, 245, 276, 585, 633, 649, 658, 678, 769, 934], "forc": [128, 166, 227, 245, 590, 591, 633, 649, 658, 934], "materi": [128, 227, 245, 603, 633, 649, 658, 934], "parallelis": [128, 227, 245, 633, 658, 934], "optimis": [128, 227, 245, 633, 649, 658, 852, 853, 934], "achiev": [128, 227, 245, 257, 555, 633, 658, 934], "best": [128, 227, 245, 257, 555, 633, 658, 934], "tri": [128, 245], "arbitrarili": [128, 245], "rearrang": [128, 245], "preserv": [128, 209, 245, 446, 555, 861, 917, 934], "lru_cach": [128, 245, 257, 555, 658, 934], "magnitud": [128, 245, 257, 555, 658, 934], "speedup": [128, 163, 245, 257, 555, 658, 934], "column_1": [128, 213, 245], "scalar": [128, 162, 245, 440, 504, 555, 806, 850, 934], "cheap": [129, 130, 245, 569, 570, 649, 657, 708, 712, 934], "deepcopi": [129, 130, 245, 569, 570, 649, 708, 712, 934], "clear": [130, 245, 570, 649, 712, 934], "properti": [131, 137, 155, 191, 193, 221, 245, 565, 572, 575, 608, 626, 649], "appl": [131, 156, 165, 184, 186, 204, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 419, 427, 460, 479, 487, 555, 590, 606, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 649, 875, 894], "banana": [131, 204, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 419, 427, 487, 555, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644], "pearson": [132, 245, 389, 449, 512, 537, 555, 807, 864, 934], "correl": [132, 245, 512, 537, 542], "coeffici": [132, 245, 449, 555, 864, 934], "corrcoef": [132, 245], "summari": [133, 245, 721, 934], "glimps": [133, 154, 245], "usd": [133, 149, 245], "2020": [133, 149, 152, 245, 323, 327, 330, 333, 334, 336, 338, 341, 345, 348, 349, 481, 586, 649, 729, 733, 736, 743, 745, 748, 751, 755, 758, 896], "null_count": [133, 136, 245, 316, 555, 719, 721, 934], "266667": [133, 245], "666667": [133, 170, 219, 233, 245, 358, 555, 625, 639, 649], "std": [133, 245, 428, 555, 649, 721, 845, 934], "101514": [133, 245], "707107": [133, 245, 359, 555, 771, 934], "57735": [133, 245], "median": [133, 180, 245, 431, 555, 628, 649, 841, 934], "more_column": [134, 139, 215, 245, 361, 522, 555, 573, 577, 623, 649], "Or": [134, 150, 151, 152, 166, 198, 218, 225, 245, 415, 452, 509, 548, 555, 573, 584, 585, 586, 591, 616, 631, 649], "subset": [136, 176, 214, 245, 574, 622, 649], "snippet": [136, 245, 574, 649], "is_nul": [136, 245, 555, 574, 649, 934], "sizeunit": [138, 245, 769, 934], "heap": [138, 245, 769, 934], "its": [138, 245, 322, 346, 352, 452, 555, 728, 756, 762, 769, 934], "bitmap": [138, 245, 769, 934], "therefor": [138, 245, 294, 548, 769, 934], "structarrai": [138, 245, 769, 934], "constant": [138, 152, 245, 364, 555, 586, 649, 769, 775, 934], "unchang": [138, 245, 257, 494, 555, 595, 633, 649, 769, 918, 934], "capac": [138, 196, 245, 769, 859, 934], "ffi": [138, 245, 769, 934], "kb": [138, 245, 769, 934], "mb": [138, 245, 769, 934], "gb": [138, 245, 769, 934], "tb": [138, 245, 769, 934], "revers": [138, 245, 290, 311, 312, 313, 314, 315, 398, 419, 487, 555, 649, 715, 716, 717, 718, 934], "1_000_000": [138, 245, 769, 934], "25888898": [138, 245], "689577102661133": [138, 245], "long": [139, 172, 216, 245, 577, 599, 649], "letter": [139, 230, 239, 245, 361, 522, 555, 577, 636, 645, 649], "thu": [140, 245, 512, 542, 657, 934], "faster": [140, 216, 245, 257, 428, 469, 497, 555, 613, 614, 649, 657, 658, 838, 884, 934], "onlin": [140, 245, 657, 934], "rerun": [140, 245, 657, 934], "fill_valu": [141, 195, 216, 245, 365, 443, 555, 579, 611, 649, 776, 857, 934], "Not": [141, 245, 382, 384, 399, 555, 579, 649], "To": [141, 245, 319, 320, 366, 532, 535, 545, 555, 579, 649], "fillnullstrategi": [142, 245, 366, 555, 580, 649, 777, 934], "matches_supertyp": [142, 245, 580, 649], "forward": [142, 166, 245, 366, 371, 555, 580, 591, 649, 777, 934], "consecut": [142, 245, 296, 366, 371, 455, 555, 580, 649, 777, 870, 934], "supertyp": [142, 245, 256, 555, 580, 649], "fill_nan": [142, 245, 555, 649, 934], "OR": [143, 245, 503, 581, 649], "reduct": [145, 245], "supercast": [145, 245], "similar": [145, 166, 245, 415, 548, 555, 591, 649], "parent": [145, 245], "rule": [145, 245, 349, 759], "arithmet": [145, 245], "zip_with": [145, 245, 934], "foo11": [145, 245], "bar22": [145, 245], "null_equ": [146, 245, 851, 934], "retriev": [147, 245, 270, 271, 485, 672, 673, 900], "return_as_str": [149, 245], "preview": [149, 245], "nice": [149, 245], "few": [149, 245], "rather": [149, 166, 245, 484, 591, 649, 899], "head": [149, 168, 201, 245, 256, 392, 555, 594, 649, 809, 905, 934], "tail": [149, 154, 245, 256, 449, 555, 649, 784, 864, 934], "intoexpr": [150, 151, 152, 192, 198, 212, 222, 225, 245, 376, 415, 452, 506, 508, 510, 511, 515, 524, 532, 535, 541, 544, 548, 555, 584, 585, 586, 609, 616, 621, 631, 649, 788, 934], "more_bi": [150, 178, 198, 245, 452, 555, 584, 616, 649], "maintain_ord": [150, 178, 180, 214, 218, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 252, 257, 295, 490, 496, 513, 555, 571, 576, 578, 584, 603, 612, 613, 614, 622, 632, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 649, 697, 720, 830, 920, 934], "consist": [150, 178, 245, 481, 584, 649, 896], "agg": [150, 151, 152, 245, 252, 257, 367, 369, 451, 452, 490, 501, 513, 555, 571, 576, 578, 584, 585, 586, 603, 612, 649], "anoth": [150, 245, 293, 316, 321, 555, 584, 628, 649, 695, 719, 727, 851, 934], "index_column": [151, 152, 245, 585, 586, 649], "include_boundari": [151, 245, 585, 649], "start_bi": [151, 245, 585, 649], "startbi": [151, 245, 585, 649], "dynamicgroupbi": [151, 245], "normal": [151, 245, 357, 389, 449, 555, 585, 649, 768, 807, 864, 934], "groupbi": [151, 152, 176, 245, 252, 257, 276, 316, 367, 369, 415, 451, 452, 490, 501, 504, 513, 555, 571, 576, 578, 585, 586, 603, 612, 649, 678, 719, 934], "member": [151, 245, 585, 649, 795, 934], "seen": [151, 245, 296, 371, 555, 585, 649], "roll": [151, 152, 245, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 510, 555, 585, 586, 649, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 934], "slot": [151, 245, 275, 316, 317, 555, 585, 649, 677, 719, 722, 934], "1n": [151, 152, 166, 218, 245, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 752, 756, 762], "nanosecond": [151, 152, 166, 218, 245, 342, 346, 347, 352, 429, 430, 431, 432, 433, 435, 436, 437, 520, 555, 585, 586, 591, 649, 752, 756, 757, 762], "1u": [151, 152, 166, 218, 245, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 752, 756, 762], "microsecond": [151, 152, 166, 218, 245, 342, 346, 347, 352, 429, 430, 431, 432, 433, 435, 436, 437, 519, 520, 555, 585, 586, 591, 603, 649, 752, 756, 762], "1m": [151, 152, 166, 218, 245, 333, 334, 336, 341, 342, 346, 348, 352, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 743, 745, 751, 752, 756, 758, 762], "millisecond": [151, 152, 166, 218, 245, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 520, 555, 585, 586, 591, 649, 752, 756, 762], "1h": [151, 152, 166, 218, 245, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 735, 752, 756, 762], "1w": [151, 152, 166, 218, 245, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 752, 756, 762], "week": [151, 152, 166, 218, 245, 342, 346, 352, 354, 429, 430, 431, 432, 433, 435, 436, 437, 520, 555, 585, 586, 591, 649, 752, 756, 762, 764], "month": [151, 152, 166, 218, 245, 326, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 518, 519, 555, 585, 586, 591, 649, 732, 752, 756, 762], "1y": [151, 152, 166, 218, 245, 331, 342, 346, 352, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 737, 752, 756, 762, 766], "1i": [151, 152, 166, 218, 245, 342, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 586, 591, 649, 752], "10i": [151, 152, 245, 585, 586, 649], "ascend": [151, 152, 245, 585, 586, 649], "often": [151, 152, 245, 274, 425, 555, 585, 586, 649, 676], "dynam": [151, 245, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 649], "matter": [151, 152, 163, 189, 205, 245, 585, 586, 649], "_lower_bound": [151, 245, 585, 649], "_upper_bound": [151, 245, 585, 649], "impact": [151, 245, 585, 649], "harder": [151, 245, 585, 649], "inclus": [151, 152, 245, 376, 429, 430, 431, 432, 433, 435, 436, 437, 476, 477, 555, 585, 586, 649, 788, 891, 892, 934], "datapoint": [151, 245, 585, 649], "mondai": [151, 245, 354, 585, 649, 764], "date_rang": [151, 218, 245, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 585, 649, 727, 729, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766], "30m": [151, 245, 346, 352, 585, 649, 756, 762], "time_min": [151, 245, 585, 649], "time_max": [151, 245, 585, 649], "23": [151, 152, 245, 322, 329, 346, 519, 585, 586, 649, 728, 735], "boundari": [151, 245, 305, 306, 307, 555, 585, 649, 709, 710, 711, 785, 934], "time_count": [151, 245, 585, 649], "_lower_boundari": [151, 245, 585, 649], "_upper_boundari": [151, 245, 585, 649], "lower_bound": [151, 245, 555, 585, 649, 922, 934], "upper_bound": [151, 245, 294, 555, 585, 649, 812, 934], "time_agg_list": [151, 245, 585, 649], "arang": [151, 216, 227, 245, 585, 633, 649], "2i": [151, 245, 585, 649], "3i": [151, 245, 585, 649], "a_agg_list": [151, 245, 585, 649], "rollinggroupbi": [152, 245], "dynamic_groupbi": [152, 245, 586, 649], "groupby_dynam": [152, 245, 586, 649], "48": [152, 245, 586, 649], "19": [152, 166, 245, 346, 586, 591, 649, 756, 762], "43": [152, 245, 315, 555, 586, 649], "strptime": [152, 245, 349, 586, 649, 759], "2d": [152, 208, 245, 586, 649, 732], "sum_a": [152, 245, 586, 649], "min_a": [152, 245, 586, 649], "max_a": [152, 245, 586, 649], "to_list": [152, 245, 294, 586, 649, 696, 934], "seed": [153, 190, 245, 372, 439, 445, 555, 783, 849, 860, 934], "seed_1": [153, 245, 372, 555, 783, 934], "seed_2": [153, 245, 372, 555, 783, 934], "seed_3": [153, 245, 372, 555, 783, 934], "hash": [153, 245, 555, 934], "u64": [153, 245, 372, 424, 555, 603, 649, 783, 934], "10783150408545073287": [153, 245], "1438741209321515184": [153, 245], "10047419486152048166": [153, 245], "2047317070637311557": [153, 245], "last": [154, 166, 168, 180, 198, 201, 212, 214, 239, 245, 266, 269, 279, 292, 316, 326, 343, 353, 451, 478, 489, 546, 555, 591, 616, 619, 621, 622, 645, 649, 667, 670, 681, 694, 719, 732, 753, 763, 784, 809, 893, 905, 934], "ab": [154, 168, 201, 222, 245, 485, 486, 532, 535, 555, 627, 649, 784, 809, 905, 934], "grown": [156, 245], "baz": [157, 158, 180, 215, 245, 476, 478, 589, 623, 649, 893], "intermedi": [158, 245, 589, 649, 787, 934], "linear": [158, 182, 237, 245, 272, 375, 402, 421, 433, 510, 511, 538, 555, 589, 604, 643, 649, 674, 787, 831, 843, 934], "mask": [159, 161, 245, 273, 297, 298, 377, 379, 387, 456, 458, 555, 675, 698, 699, 778, 788, 790, 793, 804, 827, 828, 852, 871, 873, 926, 934], "visual": [159, 161, 245], "buffer_s": [163, 245], "intern": [163, 245], "veri": [163, 213, 245, 257, 555, 570, 649, 712, 934], "fit": [163, 196, 216, 245, 444, 555, 858, 859, 934], "signific": [163, 245, 257, 555], "4x": [163, 245], "disabl": [163, 245], "materialis": [163, 164, 188, 189, 245], "iter_row": [164, 188, 189, 245], "17_500": [164, 245], "klmnoopqrstuvwxyz": [164, 245], "__name__": [164, 245], "7500": [164, 245], "recordbatch": [164, 245], "15_000": [164, 245], "record_batch": [164, 245], "to_arrow": [164, 245, 934], "to_batch": [164, 245], "date32": [164, 245], "large_str": [164, 203, 209, 245], "15000": [164, 245], "2500": [164, 245], "left_on": [165, 166, 245, 590, 591, 649], "right_on": [165, 166, 245, 590, 591, 649], "joinstrategi": [165, 245, 590, 649], "suffix": [165, 166, 192, 222, 225, 245, 300, 382, 384, 385, 386, 415, 427, 460, 555, 590, 591, 609, 627, 628, 631, 649, 701, 875], "_right": [165, 166, 245, 590, 591, 649], "outer": [165, 245, 590, 649], "semi": [165, 245, 590, 649], "anti": [165, 245, 590, 649, 852, 853, 934], "cross": [165, 245, 590, 649], "join_asof": [165, 245, 590, 649], "stringcach": [165, 245, 565], "other_df": [165, 245], "by_left": [166, 245, 591, 649], "by_right": [166, 245, 591, 649], "asofjoinstrategi": [166, 245, 591, 649], "allow_parallel": [166, 245, 590, 591, 649], "force_parallel": [166, 245, 590, 591, 649], "asof": [166, 245, 591, 649], "asof_join": [166, 245], "search": [166, 245, 591, 649], "greater": [166, 245, 449, 478, 555, 591, 649, 864, 893, 934], "distanc": [166, 245, 591, 649, 785, 934], "gdp": [166, 245, 591, 649], "2016": [166, 245, 591, 649], "2017": [166, 245, 591, 649], "2018": [166, 245, 591, 649], "2019": [166, 245, 591, 649], "record": [166, 245, 591, 649], "jan": [166, 245, 591, 649], "1st": [166, 245, 591, 649], "4164": [166, 245, 591, 649], "4411": [166, 245, 591, 649], "4566": [166, 245, 591, 649], "4696": [166, 245, 591, 649], "popul": [166, 245, 591, 649], "12th": [166, 245, 591, 649], "82": [166, 245, 591, 649], "66": [166, 245, 591, 649, 843, 934], "83": [166, 245, 591, 649], "52": [166, 222, 245, 438, 555, 591, 627, 649], "request": [167, 245], "small": [167, 245, 346, 578, 649], "describe_plan": [167, 245, 649], "unoptim": [167, 245, 649], "describe_optimized_plan": [167, 245, 649], "show_graph": [167, 245, 649], "un": [167, 245], "graphviz": [167, 245, 612, 649], "axi": [169, 170, 172, 174, 200, 245, 599, 649], "null_strategi": [170, 200, 245], "nullstrategi": [170, 200, 245], "spam": [170, 245], "id_var": [172, 245, 599, 649], "value_var": [172, 245, 599, 649], "variable_nam": [172, 245, 599, 649], "value_nam": [172, 245, 599, 649], "unpivot": [172, 245, 599, 649], "leav": [172, 245, 599, 649], "massag": [172, 245, 599, 649], "measur": [172, 245, 599, 649], "merg": [173, 245, 600, 649], "caller": [173, 245, 294, 595, 600, 633, 649], "respons": [173, 245, 600, 649], "One": [176, 180, 245, 934], "what": [176, 245, 916, 925, 934], "pack": [176, 245], "expr_unique_subset": [176, 245], "df_nuniqu": [176, 245], "df_agg_nuniqu": [176, 245], "func": [179, 245, 602, 649], "offer": [179, 245, 417, 555, 602, 649], "recommend": [179, 245], "fulli": [179, 190, 245], "advantag": [179, 245], "cast_str_to_int": [179, 245, 602, 649], "col_nam": [179, 245, 602, 649], "tdf": [179, 245, 602, 649], "aggregate_funct": [180, 245], "pivotagg": [180, 245], "nodefault": [180, 245, 481], "_nodefault": [180, 245, 481], "no_default": [180, 245, 481], "sort_column": [180, 245], "predefin": [180, 245], "predict": [180, 183, 218, 245], "transpos": [180, 245], "discoveri": [180, 245], "interpol": [182, 237, 245, 366, 402, 421, 433, 538, 555, 604, 643, 649, 831, 843, 934], "rollinginterpolationmethod": [182, 237, 245, 421, 433, 538, 555, 604, 643, 649, 831, 843, 934], "midpoint": [182, 237, 245, 421, 433, 538, 555, 604, 643, 649, 831, 843, 934], "old": [184, 245, 606, 649], "new_col": [185, 245], "by_pred": [188, 245], "accord": [188, 245, 399, 555, 738], "never": [188, 245], "mutual": [188, 245], "exclus": [188, 245], "addition": [188, 245], "clariti": [188, 245], "anyth": [188, 245], "toomanyrowsreturn": [188, 245, 565], "norowsreturn": [188, 245, 565], "inherit": [188, 245], "rowsexcept": [188, 245, 565], "frac": [190, 245, 358, 359, 360, 439, 449, 495, 555, 770, 771, 772, 849, 864, 919, 934], "with_replac": [190, 245, 439, 555, 849, 934], "shuffl": [190, 227, 245, 439, 555, 633, 849, 934], "nor": [190, 245], "modul": [190, 245, 439, 445, 554, 555, 849, 860, 934], "more_expr": [192, 222, 245, 415, 508, 510, 532, 535, 541, 555, 609, 627, 649], "named_expr": [192, 222, 245, 541, 544, 609, 627, 649], "threshold": [192, 245, 609, 649], "set_auto_structifi": [192, 222, 245, 609, 627, 649], "is_odd": [192, 245, 609, 649], "_is_odd": [192, 245, 609, 649], "shift_and_fil": [194, 245, 555, 649, 934], "shift": [195, 245, 275, 317, 416, 443, 510, 555, 611, 649, 677, 722, 826, 857, 934], "shrink": [196, 245, 444, 555, 858, 859, 934], "hold": [196, 245], "nulls_last": [198, 212, 245, 266, 269, 451, 555, 616, 621, 649, 667, 670, 934], "ddof": [199, 219, 245, 454, 500, 512, 537, 542, 543, 547, 555, 617, 625, 649, 868, 924, 934], "deviat": [199, 245, 359, 435, 454, 543, 555, 617, 649, 771, 868, 934], "degre": [199, 219, 245, 454, 500, 512, 537, 542, 543, 547, 555, 617, 625, 649, 868, 924, 934], "freedom": [199, 219, 245, 454, 500, 512, 537, 542, 543, 547, 555, 617, 625, 649, 868, 924, 934], "divisor": [199, 219, 245, 454, 500, 512, 537, 542, 543, 547, 555, 617, 625, 649, 868, 924, 934], "816497": [199, 245], "21": [200, 245, 526], "16a": [200, 245], "27b": [200, 245], "38c": [200, 245], "nth": [202, 245, 478, 491, 555, 620, 649, 893, 907, 934], "mostli": [203, 245, 367, 555], "categoricaltyp": [203, 245], "as_seri": [204, 245], "fruit": [204, 245, 419, 427, 460, 479, 487, 555, 875, 894], "car": [204, 245, 419, 427, 487, 555], "beetl": [204, 245, 419, 427, 487, 555], "audi": [204, 245, 419, 427, 487, 555], "28": [204, 245, 355, 765], "300": [204, 245, 839, 840, 842, 934], "instantiat": [207, 245, 914, 934], "from_repr": [207, 245, 914, 934], "df_from_str_repr": [207, 245], "eval": [207, 245, 521, 914, 934], "re": [208, 245], "ll": [208, 245], "numpy_arrai": [208, 245], "use_pyarrow_extension_arrai": [209, 245, 917, 934], "trigger": [209, 245, 917, 934], "sent": [209, 245, 916, 917, 934], "pandas_df1": [209, 245], "pandas_df2": [209, 245], "pandas_df2_pa": [209, 245], "na": [209, 245, 917, 934], "four": [211, 245], "five": [211, 245], "k": [212, 245, 303, 389, 495, 555, 621, 649, 705, 807, 919, 934], "largest": [212, 245, 495, 555, 621, 649, 919, 934], "smallest": [212, 245, 495, 555, 621, 649, 919, 934], "top": [212, 245, 621, 649], "include_head": [213, 245], "header_nam": [213, 245], "column_nam": [213, 245], "perhap": [213, 245], "column_2": [213, 245], "name_gener": [213, 245, 294, 696], "base_nam": [213, 245], "my_column_": [213, 245], "my_column_0": [213, 245], "my_column_1": [213, 245], "my_column_2": [213, 245], "uniquekeepstrategi": [214, 245, 622, 649], "kept": [214, 245, 622, 649], "decompos": [215, 245, 623, 649], "t_a": [215, 245, 623, 649], "t_b": [215, 245, 623, 649], "t_c": [215, 245, 623, 649], "t_d": [215, 245, 623, 649], "womp": [215, 245, 623, 649], "t_": [215, 245, 623, 649], "t_struct": [215, 245, 623, 649], "step": [216, 245, 505], "unstackdirect": [216, 245], "much": [216, 245, 293, 316, 555, 695, 719, 934], "pivot": [216, 245], "phase": [216, 245], "subject": [216, 245], "ascii_uppercas": [216, 245], "col1": [216, 245, 649], "col2": [216, 245, 649], "h": [216, 245, 349, 444, 481, 555, 896], "col1_0": [216, 245], "col1_1": [216, 245], "col1_2": [216, 245], "col2_0": [216, 245], "col2_1": [216, 245], "col2_2": [216, 245], "syntact": [217, 245, 517, 522, 523, 527, 538, 541, 545, 624, 649, 867, 934], "sugar": [217, 245, 517, 522, 523, 527, 538, 541, 545, 624, 649, 867, 934], "coalesc": [217, 245, 624, 649], "400": [217, 245, 624, 649, 839, 840, 842, 934], "600": [217, 245, 624, 649], "700": [217, 245, 624, 649], "new_df": [217, 245, 624, 649], "time_column": [218, 245], "frequenc": [218, 245], "forward_fil": [218, 245, 312, 315, 555], "06": [218, 245, 322, 332, 344, 345, 356, 756, 764], "varianc": [219, 245, 360, 389, 437, 500, 547, 555, 625, 649, 772, 807, 847, 924, 934], "grow": [220, 245], "is_not": [222, 245, 555, 627, 649], "not_c": [222, 245, 627, 649], "diff": [222, 245, 327, 330, 334, 336, 338, 341, 348, 555, 627, 649, 733, 736, 743, 745, 748, 751, 758, 934], "_diff": [222, 245, 627, 649], "row_nr": [223, 245, 399, 555, 629, 649, 853, 934], "more_agg": [225, 631], "named_agg": [225, 631], "_sum": [225, 631], "_mean_squar": [225, 631], "b_sum": [225, 631], "c_mean_squar": [225, 631], "17": [225, 438, 481, 526, 555, 631, 713, 756, 934], "sub": [227, 300, 301, 460, 479, 555, 701, 702, 875, 894], "triangl": [227, 633], "group_df": [227, 633], "nr": [230, 239, 636, 645], "maxim": [232, 264, 555, 638, 665, 934], "833333": [233, 639], "minim": [235, 265, 271, 444, 452, 555, 641, 666, 673, 817, 858, 934], "overview": [245, 555, 565, 649, 934], "public": [245, 555, 565, 649, 934], "frameinittyp": [245, 649], "variou": [245, 555, 649, 934], "entri": [245, 649], "prevent": [245, 314, 315, 388, 488, 555, 649, 717, 718, 904, 934], "come": [245, 389, 555, 566, 648, 649, 807, 934], "behavior": [245, 257, 293, 504, 555, 695], "mydatafram": 245, "notic": [245, 649, 934], "df4": 245, "df5": 245, "df6": 245, "corr": [245, 537, 542], "drop_in_plac": 245, "drop_nul": [245, 319, 555, 649, 934], "estimated_s": [245, 934], "explod": [245, 369, 426, 555, 649, 836, 934], "find_idx_by_nam": 245, "fold": [245, 406, 508, 515, 516, 539, 545], "frame_equ": [245, 346, 352], "get_column": [245, 545], "groupby_rol": [245, 429, 430, 431, 432, 433, 435, 436, 437, 555, 585, 649], "hash_row": 245, "hstack": 245, "insert_at_idx": 245, "is_dupl": [245, 555, 934], "is_empti": [245, 934], "is_uniqu": [245, 555, 934], "iter_slic": 245, "melt": [245, 649], "merge_sort": [245, 649], "n_uniqu": [245, 555, 934], "pipe": [245, 555, 649], "quantil": [245, 433, 555, 649, 830, 843, 934], "replace_at_idx": 245, "shrink_to_fit": [245, 934], "take_everi": [245, 555, 649, 934], "to_dict": 245, "to_numpi": [245, 397, 555, 934], "to_panda": [245, 934], "to_struct": 245, "top_k": [245, 555, 649, 934], "unnest": [245, 477, 478, 486, 649, 892, 893], "unstack": 245, "updat": [245, 649], "upsampl": 245, "write_avro": 245, "write_databas": 245, "write_excel": 245, "write_json": [245, 605, 649], "write_parquet": 245, "94": [252, 555], "confus": [254, 382, 384, 555], "tt": [254, 555], "tf": [254, 255, 555], "ff": [254, 255, 555], "upcast": [256, 555], "skip_nul": [257, 555, 658, 934], "pass_nam": [257, 555], "applystrategi": [257, 555], "thread_loc": [257, 555], "assum": [257, 555, 595, 633, 649], "code": [257, 441, 555, 593, 649, 854, 934], "amount": [257, 555], "releas": [257, 555], "gil": [257, 555], "discourag": [257, 555], "loop": [257, 555], "a_times_2": [257, 555], "invers": [258, 259, 260, 261, 262, 263, 555, 659, 660, 661, 662, 663, 664, 934], "cosin": [258, 259, 308, 309, 397, 555, 659, 660, 713, 714, 934], "570796": [258, 260, 555, 659, 661, 934], "hyperbol": [259, 261, 263, 309, 448, 493, 555, 660, 662, 664, 714, 863, 909, 934], "sine": [260, 261, 397, 447, 448, 555, 661, 662, 862, 863, 934], "881374": [261, 555, 662, 934], "tangent": [262, 263, 492, 493, 555, 663, 664, 908, 909, 934], "785398": [262, 555, 663, 934], "arg_wher": [267, 555], "arg_sort": [269, 555, 670, 934], "favour": [269, 363, 555, 670, 774, 934], "sublist": [270, 271, 273, 275, 278, 279, 280, 281, 282, 289, 292, 293, 672, 673, 675, 677, 680, 681, 682, 683, 684, 691, 694, 695, 696, 795, 934], "membership": [273, 675], "listcol": 274, "number_of_two": 274, "null_behavior": [275, 317, 555, 677, 722, 934], "nullbehavior": [275, 317, 555, 677, 722, 934], "th": [275, 317, 449, 555, 677, 722, 864, 934], "against": [276, 649, 678, 941], "blindli": [276, 678], "worth": [276, 678], "enough": [276, 449, 555, 678, 864, 934], "concat_list": [276, 521, 678], "rank": [276, 512, 521, 542, 555, 678, 934], "exprnamespac": 277, "reshap": [277, 555, 679, 934], "flat": [277, 426, 555, 679, 836, 934], "taken": [289, 475, 490, 555, 691, 890], "null_on_oob": [293, 695], "cheaper": [293, 695], "n_field_strategi": [294, 696], "tostructstrategi": [294, 696], "first_non_nul": [294, 696], "max_width": [294, 696], "field_0": [294, 696], "field_1": [294, 696], "field_n": [294, 696], "know": [294, 469, 884, 916, 925, 934], "incorrectli": 294, "downstream": [294, 441, 555, 854, 934], "col_name_": [294, 696], "col_name_0": [294, 696], "col_name_1": [294, 696], "col_name_2": [294, 696], "maintain": [295, 440, 496, 555, 613, 614, 649, 697, 850, 920, 934], "substr": [297, 300, 301, 456, 460, 471, 472, 476, 477, 478, 479, 698, 701, 702, 871, 875, 886, 887, 891, 892, 893, 894], "transferencod": [298, 299, 458, 459, 699, 700, 873, 874], "strict": [298, 302, 456, 458, 470, 481, 555, 699, 703, 851, 871, 873, 885, 896, 934], "hex": [298, 299, 458, 459, 470, 699, 700, 873, 874, 885], "base64": [298, 299, 458, 459, 699, 700, 873, 874], "prefix": [301, 479, 484, 555, 702, 894, 899], "due": [302, 555, 703, 934], "overflow": [302, 314, 315, 470, 488, 555, 703, 717, 718, 885, 904, 934], "categoricalord": [303, 705], "lexic": [303, 705], "min_val": [305, 307, 555, 709, 711, 934], "max_val": [305, 306, 555, 709, 710, 934], "foo_clip": [305, 306, 307, 555], "clip": [306, 307, 555, 710, 711, 934], "543081": [309, 555, 714, 934], "cumul": [311, 312, 313, 314, 315, 515, 516, 517, 555, 715, 716, 717, 718, 934], "a_revers": [311, 312, 313, 314, 315, 398, 427, 487, 555], "value_cummax": [312, 555], "value_cummax_all_fil": [312, 555], "value_cumsum": [315, 555], "value_cumsum_all_fil": [315, 555], "min_period": [316, 358, 359, 360, 428, 429, 430, 431, 432, 433, 435, 436, 437, 555, 719, 770, 771, 772, 838, 839, 840, 841, 842, 843, 845, 846, 847, 934], "slide": [316, 555, 719, 934], "realli": [316, 555, 719, 934], "complex": [316, 495, 555, 719, 919, 934], "visit": [316, 555, 719, 934], "44": [318, 555], "drop_nan": [320, 555, 934], "tu": [321, 322, 328, 351, 355, 727, 728, 734, 755, 761, 765], "lose": [321, 727], "2001": [321, 326, 328, 329, 331, 332, 337, 339, 342, 343, 344, 346, 347, 351, 352, 353, 354, 355, 356, 481, 727, 732, 734, 735, 737, 739, 740, 741, 742, 744, 746, 747, 749, 750, 752, 753, 754, 756, 757, 759, 761, 762, 763, 764, 765, 766, 896], "tu_m": [321, 727], "tu_n": [321, 727], "tm": [322, 728], "compon": [322, 347, 481, 520, 728, 757], "resolv": 322, "456000": [322, 728], "101000": 322, "456": [322, 728, 913, 934], "101": [322, 470, 885], "d1": 322, "d2": 322, "d3": 322, "utc": [323, 345, 481, 729, 755, 896], "tz": [323, 345, 729, 755], "europ": [323, 345, 729, 755], "london": [323, 345, 729, 755], "gmt": [323, 345, 729, 755], "bst": [323, 345, 729, 755], "weekdai": [326, 343], "day_of_month": [326, 343, 354], "ordinal_dai": [326, 354], "day_of_year": [326, 343, 354], "days_diff": 327, "epochtimeunit": [328, 526, 734], "unix": [328, 526, 734], "epoch_n": [328, 734], "epoch_": [328, 734], "978307200000000": [328, 351, 734, 761], "978307200": [328, 734], "978393600000000": [328, 351, 734, 761], "978393600": [328, 734], "978480000000000": [328, 351, 734, 761], "978480000": [328, 734], "hours_diff": 330, "leap": [331, 342, 737, 752], "2000": [331, 333, 342, 737, 752], "2002": [331, 332, 342, 344, 356, 737, 752, 766], "iso": [332, 353, 354, 738, 763, 764], "correspond": [332, 422, 555, 738, 832, 934], "2006": [332, 342, 752], "180": [332, 344, 356], "2004": [332, 342, 752], "2005": [332, 342, 752], "1_001": [333, 334, 336, 341], "002": [333, 334, 336, 341, 520, 743, 745, 751], "003": [333, 334, 336, 341], "3000": 333, "997": [333, 334, 336, 341], "997000": 333, "998": [333, 334, 336, 341], "998000": 333, "999": [333, 334, 336, 341], "999000": 333, "microseconds_diff": 334, "milliseconds_diff": 336, "minutes_diff": 338, "1440": [338, 748], "nanoseconds_diff": 341, "1000000": [341, 484, 751], "minu": [342, 752], "dictat": [342, 752], "date_plus_1i": [342, 752], "1y2mo": [342, 752], "date_min": 342, "1998": [342, 752], "1999": [342, 752], "2003": [342, 526, 752], "ordin": [343, 422, 555, 753, 832, 934], "366": [343, 753], "convert_time_zon": [345, 755], "unset": [345, 755], "london_timezon": 345, "amsterdam": 345, "london_to_amsterdam": 345, "cet": 345, "cest": 345, "half": [346, 358, 359, 360, 555, 756, 770, 771, 772, 934], "225": [346, 352], "to_fram": [346, 352, 481, 852, 853, 892, 893, 896, 934], "10m": [346, 352, 756, 762], "milli": [347, 757], "micro": [347, 757], "456789": 347, "654321": 347, "111110": 347, "765431": 347, "sec": 347, "11111": 347, "seconds_diff": 348, "timestamp_n": [351, 761], "timestamp_m": 351, "978307200000": 351, "978393600000": 351, "978480000000": 351, "53": [353, 763], "sundai": [354, 764], "incorrect": [355, 441, 555, 633, 765, 854, 934], "tu_u": [355, 765], "32971": [355, 765], "32974": [355, 765], "32976": [355, 765], "718281828459045": [357, 394, 555, 768, 810, 934], "pk": [357, 555, 768, 934], "459148": [357, 555], "754888": [357, 555], "span": [358, 359, 360, 555, 770, 771, 772, 934], "half_lif": [358, 359, 360, 555, 770, 771, 772, 934], "adjust": [358, 359, 360, 449, 555, 770, 771, 772, 864, 934], "ignore_nul": [358, 359, 360, 555, 770, 771, 772, 925, 934], "exponenti": [358, 359, 360, 362, 555, 770, 771, 772, 773, 934], "weight": [358, 359, 360, 428, 429, 430, 431, 432, 433, 435, 436, 437, 449, 555, 770, 771, 772, 838, 839, 840, 841, 842, 843, 845, 846, 847, 864, 934], "decai": [358, 359, 360, 555, 770, 771, 772, 934], "term": [358, 359, 360, 466, 469, 555, 770, 771, 772, 881, 884, 934], "mass": [358, 359, 360, 555, 770, 771, 772, 934], "gamma": [358, 359, 360, 555, 770, 771, 772, 934], "foral": [358, 359, 360, 555, 770, 771, 772, 934], "geq": [358, 359, 360, 555, 770, 771, 772, 934], "theta": [358, 359, 360, 555, 770, 771, 772, 934], "life": [358, 359, 360, 555, 770, 771, 772, 934], "exp": [358, 359, 360, 555, 770, 771, 772, 934], "ln": [358, 359, 360, 555, 770, 771, 772, 934], "smooth": [358, 359, 360, 555, 770, 771, 772, 934], "factor": [358, 359, 360, 494, 555, 770, 771, 772, 918, 934], "leq": [358, 359, 360, 555, 770, 771, 772, 934], "begin": [358, 359, 360, 462, 555, 770, 771, 772, 877, 934], "imbal": [358, 359, 360, 555, 770, 771, 772, 934], "ew": [358, 359, 360, 555, 770, 771, 772, 934], "w_i": [358, 359, 360, 555, 770, 771, 772, 934], "recurs": [358, 359, 360, 555, 770, 771, 772, 934], "y_0": [358, 359, 360, 555, 770, 771, 772, 934], "x_0": [358, 359, 360, 555, 770, 771, 772, 934], "y_t": [358, 359, 360, 555, 770, 771, 772, 934], "y_": [358, 359, 360, 555, 770, 771, 772, 934], "x_t": [358, 359, 360, 555, 770, 771, 772, 934], "observ": [358, 359, 360, 555, 770, 771, 772, 934], "x_2": [358, 359, 360, 555, 770, 771, 772, 934], "428571": [358, 555], "bia": [359, 360, 389, 434, 449, 555, 771, 772, 807, 844, 864, 934], "unbias": [359, 360, 555, 771, 772, 934], "963624": [359, 555, 771, 934], "928571": [360, 555, 772, 934], "wildcard": [361, 502, 509, 515, 516, 524, 539, 555], "regex": [361, 404, 456, 457, 460, 462, 463, 471, 472, 479, 522, 532, 535, 545, 555, 871, 872, 875, 877, 878, 886, 887, 894], "aa": [361, 522, 555], "ba": [361, 522, 555], "cc": [361, 522, 555], "718282": [362, 555], "389056": [362, 555], "54": [362, 555], "59815": [362, 555], "expand": [363, 403, 404, 425, 555, 774, 934], "arr": [363, 521, 555, 556, 774, 916, 934, 935], "exprlistnamespac": [363, 369, 426, 555], "exprstringnamespac": [363, 555], "pythonliter": [364, 532, 535, 555, 627, 649, 775, 814, 817, 934], "extrem": [364, 555, 775, 934], "group_col": [367, 501, 555], "g1": [367, 501, 555], "g2": [367, 501, 555], "lt": [367, 501, 555, 934], "gte": [367, 501, 555], "9774092659964970114": [372, 555], "13614470193936745724": [372, 555], "1101441246220388612": [372, 555], "11638928888656214026": [372, 555], "13382926553367784577": [372, 555], "cumsum": [374, 555, 588, 649, 934], "interpolationmethod": [375, 555, 787, 934], "regrid": [375, 555], "grid": [375, 555], "df_original_grid": [375, 555], "grid_point": [375, 555], "df_new_grid": [375, 555], "conflat": [376, 555], "finit": [378, 512, 542, 555, 792, 934], "primit": [380, 555, 916, 934], "optional_memb": [380, 555, 795, 934], "infinit": [381, 555, 796, 934], "_isnan": [382, 555], "b_isnan": [382, 555], "negat": [383, 555], "_is_not_nan": [384, 555], "b_is_not_nan": [384, 555], "_not_nul": [385, 555], "a_not_nul": [385, 555], "b_not_nul": [385, 555], "_isnul": [386, 555], "a_isnul": [386, 555], "b_isnul": [386, 555], "undo": [388, 408, 555], "duplicateerror": [388, 555, 565], "occurr": [388, 555, 785, 934], "333333": [388, 437, 555, 826, 847, 934], "fisher": [389, 449, 555, 807, 864, 934], "fourth": [389, 555, 807, 934], "subtract": [389, 555, 807, 934], "distribut": [389, 449, 555, 807, 864, 934], "elimin": [389, 555, 807, 934], "bias": [389, 449, 555, 807, 864, 934], "scipi": [389, 449, 555, 807, 864, 934], "stat": [389, 449, 555, 807, 864, 934], "153061": [389, 555], "logarithm": [394, 395, 555, 810, 811, 934], "584963": [394, 555], "30103": [395, 555], "60206": [395, 555], "lowest": [396, 555], "9223372036854775808": [396, 555], "agg_list": [397, 555], "elementwis": [397, 428, 429, 430, 431, 432, 433, 435, 436, 437, 502, 503, 555, 838, 839, 840, 841, 842, 843, 845, 846, 847, 934], "third": [397, 555], "parti": [397, 555], "book": [397, 555], "argmax": [397, 555], "_revers": [398, 427, 487, 555], "b_revers": [398, 427, 487, 555], "remap": [399, 555, 813, 934], "lookup": [399, 555, 813, 934], "country_code_dict": [399, 555], "ca": [399, 555], "canada": [399, 555], "de": [399, 555], "germani": [399, 555], "fr": [399, 555], "franc": [399, 555], "country_cod": [399, 555], "unknown": [399, 530, 555], "rest": [399, 555], "computeerror": [405, 470, 565, 885], "keep_nam": [408, 555], "poison": [412, 413, 555, 822, 823, 934], "nanmax": [412, 413, 555, 822, 823, 934], "wherea": [412, 413, 555, 587, 594, 649, 822, 823, 934], "outcom": [415, 555], "_max": [415, 555], "c_max": [415, 555], "_min": [415, 555], "c_min": [415, 555], "recent": [416, 555, 826, 934], "percent": [416, 555, 826, 934], "090909": [416, 555], "extract_numb": [417, 555], "r": [417, 457, 461, 462, 463, 471, 555, 872, 876, 877, 878, 886], "expon": [418, 555, 934], "power": [418, 555, 934], "reverse_": [419, 555], "reverse_a": [419, 555], "reverse_fruit": [419, 555], "reverse_b": [419, 555], "reverse_car": [419, 555], "rankmethod": [422, 555, 832, 934], "ti": [422, 555, 832, 934], "competit": [422, 555, 832, 934], "highest": [422, 498, 512, 542, 555, 649, 832, 934], "safe": [424, 481, 555, 834, 916, 934], "coerc": [425, 555], "dim": [426, 555, 836, 934], "fruits_revers": [427, 487, 555], "cars_revers": [427, 487, 555], "window_s": [428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 555, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 934], "rolling_min": [428, 555, 838, 934], "rolling_max": [428, 555, 838, 934], "rolling_mean": [428, 555, 838, 934], "rolling_sum": [428, 555, 838, 934], "multipli": [428, 429, 430, 431, 432, 433, 435, 436, 437, 555, 838, 839, 840, 841, 842, 843, 845, 846, 847, 934], "358899": [428, 555], "041452": [428, 555], "567764": [428, 555], "travers": [429, 430, 432, 435, 436, 437, 555, 839, 840, 842, 845, 846, 847, 934], "vector": [429, 430, 432, 435, 436, 437, 555, 839, 840, 842, 845, 846, 847, 934], "5h": [429, 430, 431, 432, 433, 435, 436, 437, 555], "33": [433, 438, 509, 555, 843, 934], "skew": [434, 555, 844, 934], "527525": [435, 555, 845, 934], "digit": [438, 484, 555, 848, 872, 899, 934], "searchsortedsid": [440, 555, 850, 934], "leftmost": [440, 555, 850, 934], "rightmost": [440, 555, 850, 934], "six": [440, 555], "extrema": [444, 555, 858, 934], "112": [444, 555], "129": [444, 555], "i8": [444, 555, 722, 837, 922, 934], "8589934592": [444, 555], "1073741824": [444, 555], "content": [445, 499, 555, 860, 934], "175201": [448, 555, 863, 934], "about": [449, 555, 864, 934], "unimod": [449, 555, 864, 934], "skewtest": [449, 555, 864, 934], "speak": [449, 555, 864, 934], "g_1": [449, 555, 864, 934], "m_3": [449, 555, 864, 934], "m_2": [449, 555, 864, 934], "m_i": [449, 555, 864, 934], "sum_": [449, 555, 864, 934], "texttt": [449, 555, 864, 934], "k_3": [449, 555, 864, 934], "k_2": [449, 555, 864, 934], "sqrt": [449, 555, 864, 934], "343622": [449, 555], "value1": [452, 555], "value2": [452, 555], "attain": [452, 555], "414214": [453, 555, 867, 934], "ends_with": [456, 479, 894], "crab": [456, 871], "dog": [456, 482, 483, 511, 871], "rab": [456, 871], "success": [457, 463, 872, 878], "overlap": [457, 463, 872, 878], "captur": [457, 462, 463, 872, 877, 878], "123": [457, 463, 472, 872, 878, 887, 913, 934], "bla": [457, 463, 872, 878], "asd": [457, 463, 872, 878], "678": [457, 463, 872, 878], "910t": [457, 463, 872, 878], "count_digit": 457, "666f6f": [459, 874], "626172": [459, 874], "mango": [460, 479, 875, 894], "go": [460, 875], "has_suffix": 460, "group_index": [462, 877], "vote": [462, 877], "ballon_dor": [462, 877], "candid": [462, 877], "messi": [462, 877], "ref": [462, 877], "candidat": [462, 877], "jorginho": [462, 877], "ronaldo": [462, 877], "extracted_nr": 463, "910": [463, 878], "json_path_match": [464, 879], "jsonpath": [464, 465, 879, 880], "json_path": [465, 880], "regardless": [465, 880], "json_val": [465, 880], "n_char": [466, 881], "caf\u00e9": [466, 469, 881, 884], "345": [466, 469, 881, 884], "\u6771\u4eac": [466, 469, 881, 884], "nchar": [466, 469], "fillchar": [467, 473, 882, 888], "justifi": [467, 473, 882, 888], "pad": [467, 473, 484, 882, 888, 899], "cow": [467, 473, 882, 888], "monkei": [467, 473, 882, 888], "hippopotamu": [467, 473, 882, 888], "strip": [468, 474, 883, 889], "tworld": [468, 480, 883, 895], "wod": [468, 474, 883, 889], "rld": [468, 883], "text": [469, 471, 472, 884], "radix": [470, 885], "parseerror": [470, 885], "becom": [470, 885], "silent": [470, 885], "110": [470, 885], "010": [470, 885], "fa1e": [470, 885], "ff00": [470, 885], "cafe": [470, 885], "64030": [470, 885], "65280": [470, 885], "51966": [470, 885], "replace_al": [471, 886], "123abc": [471, 886], "abc456": [471, 886], "abcabc": [472, 887], "123a123": [472, 887], "bc": [472, 545, 887], "trail": [474, 480, 889, 895], "worl": [474, 480, 889, 895], "subslic": [475, 890], "pear": [475, 890], "papaya": [475, 890], "dragonfruit": [475, 890], "s_slice": 475, "ear": [475, 890], "aya": [475, 890], "uit": [475, 890], "ya": [475, 890], "onf": [475, 890], "a_1": [477, 892, 912, 934], "d_4": [477, 892], "rename_field": [477, 478, 892, 893], "first_part": [477, 478, 892, 893], "second_part": [477, 478, 892, 893], "remaind": [478, 893], "app": [479, 894], "has_prefix": 479, "polarstemporaltyp": [481, 896], "tz_awar": [481, 896], "strftime": [481, 896], "anywher": [481, 896], "futur": 481, "3f": 481, "00z": [481, 896], "sun": [481, 896], "jul": [481, 896], "34": [481, 896], "lowercas": [482, 897], "variant": [482, 483], "uppercas": [483, 898], "100000": 484, "0010": 484, "0001": 484, "00000": 484, "00001": 484, "cd": [485, 486], "struct_col": [485, 486], "www": 486, "xxx": 486, "yyi": 486, "zzz": 486, "obvious": 486, "structfieldnotfounderror": [486, 565], "761594": [493, 555, 909, 934], "replic": [494, 555, 918, 934], "vals_phys": [494, 555], "bottom_k": [495, 555], "value_count": [497, 555, 934], "9223372036854775807": [498, 555], "multithread": [499, 555], "columnwis": [502, 503], "AND": 502, "bitwis": [502, 503], "returns_scalar": 504, "product_a": 504, "49": 504, "Be": 505, "more_nam": 509, "hamburg": 509, "lag": 510, "mimic": 510, "a_lag_": 510, "a_rol": 510, "plai": 511, "swim": 511, "walk": 511, "full_sent": 511, "correlationmethod": 512, "propagate_nan": [512, 542], "spearman": [512, 542], "larger": [512, 542, 613, 614, 649], "544705": [512, 537], "covari": 514, "acc": [515, 516, 524, 539], "include_init": 515, "accumul": [515, 516, 524, 539], "fn": [515, 516, 524, 539], "new_valu": [515, 516, 524, 539], "cumreduc": 515, "cumfold": 517, "999999": 519, "add_week": 520, "add_dai": 520, "add_second": 520, "add_millisecond": 520, "add_hour": 520, "add_millisec": 520, "ond": 520, "mathemat": 521, "a_b_doubl": 521, "fstring": 525, "placehold": 525, "hello_": 525, "_world": 525, "foo_": 525, "_bar_": 525, "foo_a_bar_1": 525, "foo_b_bar_2": 525, "foo_c_bar_3": 525, "epoch": [526, 755], "timestep": 526, "1666683077": 526, "1666683099": 526, "39": 526, "12345": [526, 706, 780, 848, 934], "12346": 526, "agg_group": [527, 555], "allow_object": 530, "valueexcept": 530, "test_func": 531, "selector": [532, 535, 545], "favor": [537, 542], "605551": 543, "605551275463989": 543, "my_struct": 544, "q": 544, "statement": 548, "chain": 548, "isn": 548, "thens": 548, "elif": 548, "pick": 548, "sometim": 554, "and_": 555, "other1": 555, "other2": 555, "arcco": [555, 934], "arccosh": [555, 934], "arcsin": [555, 934], "arcsinh": [555, 934], "arctan": [555, 934], "arctanh": [555, 934], "arg_max": [555, 934], "arg_min": [555, 934], "arg_uniqu": [555, 934], "argsort": [555, 934], "backward_fil": 555, "clip_max": [555, 934], "clip_min": [555, 934], "co": [555, 934], "cosh": [555, 934], "cumcount": 555, "cummax": [555, 934], "cummin": [555, 934], "cumprod": [555, 934], "cumulative_ev": [555, 934], "entropi": [555, 934], "eq": [555, 934], "ewm_mean": [555, 934], "ewm_std": [555, 934], "ewm_var": [555, 934], "extend_const": [555, 934], "flatten": 555, "floordiv": 555, "ge": [555, 934], "gt": [555, 934], "inspect": [555, 649], "is_between": [555, 934], "is_finit": [555, 934], "is_first": [555, 934], "is_in": [555, 934], "is_infinit": [555, 934], "is_nan": [555, 934], "is_not_nan": [555, 934], "is_not_nul": [555, 934], "kurtosi": [555, 934], "le": [555, 934], "log10": [555, 934], "map_alia": 555, "map_dict": [555, 934], "mod": 555, "mul": 555, "nan_max": [555, 934], "nan_min": [555, 934], "ne": [555, 934], "or_": 555, "pct_chang": [555, 934], "pow": [555, 934], "reinterpret": [555, 934], "repeat_bi": 555, "rolling_appli": [555, 934], "rolling_median": [555, 934], "rolling_quantil": [555, 934], "rolling_skew": [555, 934], "rolling_std": [555, 934], "rolling_var": [555, 934], "search_sort": [555, 934], "set_sort": [555, 934], "shrink_dtyp": [555, 934], "sin": [555, 934], "sinh": [555, 934], "sort_bi": 555, "tan": [555, 934], "tanh": [555, 934], "to_phys": [555, 934], "truediv": 555, "unique_count": [555, 934], "xor": 555, "expos": 565, "registr": 565, "miscellan": 565, "arrowerror": 565, "columnnotfounderror": 565, "invalidoperationerror": 565, "nodataerror": 565, "panicexcept": 565, "schemaerror": 565, "schemafieldnotfounderror": 565, "shapeerror": 565, "build_info": 565, "get_index_typ": 565, "show_vers": 565, "threadpool_s": 565, "sqlcontext": [565, 941], "hit": [568, 649], "node": [568, 588, 595, 599, 603, 606, 649], "huge": [571, 649], "saver": [571, 649], "purpos": [578, 649], "influenc": [578, 595, 649], "read_json": [583, 630, 649], "lazygroupbi": [584, 585, 586, 649], "other_lf": [590, 649], "validate_output_schema": [595, 649], "streamabl": [595, 599, 649], "past": [595, 649], "paramount": [595, 649], "bug": [595, 633, 649], "elig": [595, 649], "invari": [595, 649], "upheld": [595, 649], "prune": [595, 649], "show_plot": [603, 649], "truncate_nod": [603, 649], "figsiz": [603, 612, 649], "gantt": [603, 649], "plot": [603, 612, 649], "groupby_partit": [603, 649], "470": [603, 649], "475": [603, 649], "1964": [603, 649], "from_json": [605, 649], "swap": [606, 649], "output_path": [612, 649], "raw_output": [612, 649], "figur": [612, 649], "persist": [613, 614, 649], "ram": [613, 614, 649], "slightli": [613, 614, 649], "my_larger_than_ram_fil": [613, 614, 649], "data_pagesize_limit": [614, 649], "290994": [617, 649], "118034": [617, 649], "433013": [617, 649], "1875": [625, 649], "polarsexprtyp": [627, 649], "extern": [628, 649], "lf_other": [628, 649], "afoo": [628, 649], "cfoo": [628, 649], "train_lf": [628, 649], "feature_0": [628, 649], "feature_1": [628, 649], "test_lf": [628, 649], "_train": [628, 649], "feature_0_train": [628, 649], "dataframescan": [630, 649], "output_schema": [630, 649], "initialis": 649, "lf2": 649, "lf3": 649, "lf4": 649, "lf5": 649, "lf6": 649, "explain": 649, "profil": 649, "sink_ipc": 649, "sink_parquet": 649, "with_context": 649, "sr": [654, 934], "new_aliased_sr": [654, 934], "append_chunk": [657, 934], "super": [657, 934], "141593": [659, 934], "292432": [660, 934], "549306": [664, 934], "listnamespac": [671, 774, 836, 934], "catnamespac": 704, "56789": [706, 780, 848, 934], "901234": [706, 780, 848, 934], "pi": [713, 862, 908, 934], "1232e": [713, 934], "quick": [721, 934], "series_num": [721, 934], "581139": [721, 934], "series_str": [721, 934], "datetimenamespac": 726, "ser": [730, 731, 760], "replace_time_zon": [730, 731, 760], "kathmandu": [730, 731, 760], "0545": [730, 731, 760], "500m": [742, 744, 750, 757], "500000": 742, "2m": 747, "500000000": 750, "date_minus_1y_2mon": 752, "1583020800": 755, "1585699200": 755, "1588291200": 755, "nyc": 755, "edt": 755, "1583038800": 755, "1585717200": 755, "1588309200": 755, "165": [756, 762], "series_equ": [756, 762, 934], "timestamp_u": 761, "978307200000000000": 761, "978393600000000000": 761, "978480000000000000": 761, "005": [768, 934], "06293300616044681": [768, 934], "65": [768, 934], "8568409950394724": [768, 934], "4000000": [769, 934], "814697265625": [769, 934], "stringnamespac": [774, 869, 934], "bitmask": [782, 934], "swiftli": [782, 934], "10734580197236529959": [783, 934], "3022416320763508302": [783, 934], "13756996518000038261": [783, 934], "bin_count": [785, 934], "a_count": [785, 934], "fall": [788, 934], "2147483648": [812, 934], "iso3166": [813, 934], "tur": [813, 934], "jpn": [813, 934], "nld": [813, 934], "country_lookup": [813, 934], "japan": [813, 934], "t\u00fcrkiy": [813, 934], "netherland": [813, 934], "unrecognis": [813, 934], "unspecifi": [813, 934], "country_nam": [813, 934], "166667": [826, 934], "142857": [826, 934], "512": [826, 934], "peak": [827, 828, 934], "quanil": [830, 934], "nanstd": [838, 934], "858612": [838, 934], "200": [839, 840, 842, 934], "150": [840, 934], "250": [840, 934], "350": [840, 934], "450": [840, 934], "381802": [844, 934], "dev": [845, 934], "57": [848, 934], "frequent": [852, 853, 934], "mutat": [853, 934], "2246e": [862, 908, 934], "6331e16": [908, 934], "lib": [911, 934], "int64arrai": [911, 934], "a_2": [912, 934], "a_3": [912, 934], "s_from_str_repr": [914, 934], "zero_copy_onli": [916, 934], "writabl": [916, 934], "complet": [916, 934], "view": [916, 934], "presenc": [916, 934], "immut": [916, 934], "127": [922, 934], "seriesview": [925, 934], "arraylik": 934, "dtype_if_empti": 934, "position": 934, "scenario": 934, "through": 934, "chunk_length": 934, "cut": 934, "get_chunk": 934, "has_valid": 934, "hist": 934, "is_boolean": 934, "is_float": 934, "is_numer": 934, "is_sort": 934, "is_tempor": 934, "is_utf8": 934, "new_from_index": 934, "peak_max": 934, "peak_min": 934, "qcut": 934, "set_at_idx": 934}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [941, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 0, 1, "", "Struct"], [53, 0, 1, "", "Time"], [54, 0, 1, "", "UInt16"], [55, 0, 1, "", "UInt32"], [56, 0, 1, "", "UInt64"], [57, 0, 1, "", "UInt8"], [58, 0, 1, "", "Unknown"], [59, 0, 1, "", "Utf8"], [60, 4, 1, "", "align_frames"], [502, 4, 1, "", "all"], [503, 4, 1, "", "any"], [504, 4, 1, "", "apply"], [505, 4, 1, "", "arange"], [506, 4, 1, "", "arg_sort_by"], [65, 4, 1, "", "arg_where"], [507, 4, 1, "", "avg"], [66, 4, 1, "", "build_info"], [508, 4, 1, "", "coalesce"], [509, 4, 1, "", "col"], [67, 4, 1, "", "collect_all"], [68, 4, 1, "", "concat"], [510, 4, 1, "", "concat_list"], [511, 4, 1, "", "concat_str"], [512, 4, 1, "", "corr"], [513, 4, 1, "", "count"], [514, 4, 1, "", "cov"], [515, 4, 1, "", "cumfold"], [516, 4, 1, "", "cumreduce"], [517, 4, 1, "", "cumsum"], [69, 4, 1, "", "cut"], [518, 4, 1, "", "date"], [70, 4, 1, "", "date_range"], [519, 4, 1, "", "datetime"], [520, 4, 1, "", "duration"], [521, 4, 1, "", "element"], [522, 4, 1, "", "exclude"], [523, 4, 1, "", "first"], [524, 4, 1, "", "fold"], [525, 4, 1, "", "format"], [85, 4, 1, "", "from_arrow"], [86, 4, 1, "", "from_dataframe"], [87, 4, 1, "", "from_dict"], [88, 4, 1, "", "from_dicts"], [526, 4, 1, "", "from_epoch"], [89, 4, 1, "", "from_numpy"], [90, 4, 1, "", "from_pandas"], [91, 4, 1, "", "from_records"], [92, 4, 1, "", "from_repr"], [93, 4, 1, "", "get_dummies"], [94, 4, 1, "", "get_index_type"], [527, 4, 1, "", "groups"], [528, 4, 1, "", "head"], [529, 4, 1, "", "list"], [530, 4, 1, "", "lit"], [531, 4, 1, "", "map"], [532, 4, 1, "", "max"], [533, 4, 1, "", "mean"], [534, 4, 1, "", "median"], [535, 4, 1, "", "min"], [536, 4, 1, "", "n_unique"], [96, 4, 1, "", "ones"], [537, 4, 1, "", "pearson_corr"], [538, 4, 1, "", "quantile"], [97, 4, 1, "", "read_avro"], [98, 4, 1, "", "read_csv"], [99, 4, 1, "", "read_csv_batched"], [100, 4, 1, "", "read_database"], [101, 4, 1, "", "read_delta"], [102, 4, 1, "", "read_excel"], [103, 4, 1, "", "read_ipc"], [104, 4, 1, "", "read_ipc_schema"], [105, 4, 1, "", "read_json"], [106, 4, 1, "", "read_ndjson"], [107, 4, 1, "", "read_parquet"], [108, 4, 1, "", "read_parquet_schema"], [539, 4, 1, "", "reduce"], [540, 4, 1, "", "repeat"], [109, 4, 1, "", "scan_csv"], [110, 4, 1, "", "scan_delta"], [111, 4, 1, "", "scan_ipc"], [112, 4, 1, "", "scan_ndjson"], [113, 4, 1, "", "scan_parquet"], [114, 4, 1, "", "scan_pyarrow_dataset"], [541, 4, 1, "", "select"], [115, 4, 1, "", "show_versions"], [542, 4, 1, "", "spearman_rank_corr"], [543, 4, 1, "", "std"], [544, 4, 1, "", "struct"], [545, 4, 1, "", "sum"], [546, 4, 1, "", "tail"], [122, 4, 1, "", "threadpool_size"], [123, 4, 1, "", "toggle_string_cache"], [547, 4, 1, "", "var"], [548, 4, 1, "", "when"], [124, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[127, 1, 1, "", "__dataframe__"], [128, 1, 1, "", "apply"], [129, 1, 1, "", "clear"], [130, 1, 1, "", "clone"], [131, 2, 1, "", "columns"], [132, 1, 1, "", "corr"], [133, 1, 1, "", "describe"], [134, 1, 1, "", "drop"], [135, 1, 1, "", "drop_in_place"], [136, 1, 1, "", "drop_nulls"], [137, 2, 1, "", "dtypes"], [138, 1, 1, "", "estimated_size"], [139, 1, 1, "", "explode"], [140, 1, 1, "", "extend"], [141, 1, 1, "", "fill_nan"], [142, 1, 1, "", "fill_null"], [143, 1, 1, "", "filter"], [144, 1, 1, "", "find_idx_by_name"], [145, 1, 1, "", "fold"], [146, 1, 1, "", "frame_equal"], [147, 1, 1, "", "get_column"], [148, 1, 1, "", "get_columns"], [149, 1, 1, "", "glimpse"], [150, 1, 1, "", "groupby"], [151, 1, 1, "", "groupby_dynamic"], [152, 1, 1, "", "groupby_rolling"], [153, 1, 1, "", "hash_rows"], [154, 1, 1, "", "head"], [155, 2, 1, "", "height"], [156, 1, 1, "", "hstack"], [157, 1, 1, "", "insert_at_idx"], [158, 1, 1, "", "interpolate"], [159, 1, 1, "", "is_duplicated"], [160, 1, 1, "", "is_empty"], [161, 1, 1, "", "is_unique"], [162, 1, 1, "", "item"], [163, 1, 1, "", "iter_rows"], [164, 1, 1, "", "iter_slices"], [165, 1, 1, "", "join"], [166, 1, 1, "", "join_asof"], [167, 1, 1, "", "lazy"], [168, 1, 1, "", "limit"], [169, 1, 1, "", "max"], [170, 1, 1, "", "mean"], [171, 1, 1, "", "median"], [172, 1, 1, "", "melt"], [173, 1, 1, "", "merge_sorted"], [174, 1, 1, "", "min"], [175, 1, 1, "", "n_chunks"], [176, 1, 1, "", "n_unique"], [177, 1, 1, "", "null_count"], [178, 1, 1, "", "partition_by"], [179, 1, 1, "", "pipe"], [180, 1, 1, "", "pivot"], [181, 1, 1, "", "product"], [182, 1, 1, "", "quantile"], [183, 1, 1, "", "rechunk"], [184, 1, 1, "", "rename"], [185, 1, 1, "", "replace"], [186, 1, 1, "", "replace_at_idx"], [187, 1, 1, "", "reverse"], [188, 1, 1, "", "row"], [189, 1, 1, "", "rows"], [190, 1, 1, "", "sample"], [191, 2, 1, "", "schema"], [192, 1, 1, "", "select"], [193, 2, 1, "", "shape"], [194, 1, 1, "", "shift"], [195, 1, 1, "", "shift_and_fill"], [196, 1, 1, "", "shrink_to_fit"], [197, 1, 1, "", "slice"], [198, 1, 1, "", "sort"], [199, 1, 1, "", "std"], [200, 1, 1, "", "sum"], [201, 1, 1, "", "tail"], [202, 1, 1, "", "take_every"], [203, 1, 1, "", "to_arrow"], [204, 1, 1, "", "to_dict"], [205, 1, 1, "", "to_dicts"], [206, 1, 1, "", "to_dummies"], [207, 1, 1, "", "to_init_repr"], [208, 1, 1, "", "to_numpy"], [209, 1, 1, "", "to_pandas"], [210, 1, 1, "", "to_series"], [211, 1, 1, "", "to_struct"], [212, 1, 1, "", "top_k"], [213, 1, 1, "", "transpose"], [214, 1, 1, "", "unique"], [215, 1, 1, "", "unnest"], [216, 1, 1, "", "unstack"], [217, 1, 1, "", "update"], [218, 1, 1, "", "upsample"], [219, 1, 1, "", "var"], [220, 1, 1, "", "vstack"], [221, 2, 1, "", "width"], [222, 1, 1, "", "with_columns"], [223, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[251, 1, 1, "", "abs"], [252, 1, 1, "", "agg_groups"], [253, 1, 1, "", "alias"], [254, 1, 1, "", "all"], [255, 1, 1, "", "any"], [256, 1, 1, "", "append"], [257, 1, 1, "", "apply"], [258, 1, 1, "", "arccos"], [259, 1, 1, "", "arccosh"], [260, 1, 1, "", "arcsin"], [261, 1, 1, "", "arcsinh"], [262, 1, 1, "", "arctan"], [263, 1, 1, "", "arctanh"], [264, 1, 1, "", "arg_max"], [265, 1, 1, "", "arg_min"], [266, 1, 1, "", "arg_sort"], [267, 1, 1, "", "arg_true"], [268, 1, 1, "", "arg_unique"], [269, 1, 1, "", "argsort"], [296, 1, 1, "", "backward_fill"], [302, 1, 1, "", "cast"], [304, 1, 1, "", "ceil"], [305, 1, 1, "", "clip"], [306, 1, 1, "", "clip_max"], [307, 1, 1, "", "clip_min"], [308, 1, 1, "", "cos"], [309, 1, 1, "", "cosh"], [310, 1, 1, "", "count"], [311, 1, 1, "", "cumcount"], [312, 1, 1, "", "cummax"], [313, 1, 1, "", "cummin"], [314, 1, 1, "", "cumprod"], [315, 1, 1, "", "cumsum"], [316, 1, 1, "", "cumulative_eval"], [317, 1, 1, "", "diff"], [318, 1, 1, "", "dot"], [319, 1, 1, "", "drop_nans"], [320, 1, 1, "", "drop_nulls"], [357, 1, 1, "", "entropy"], [358, 1, 1, "", "ewm_mean"], [359, 1, 1, "", "ewm_std"], [360, 1, 1, "", "ewm_var"], [361, 1, 1, "", "exclude"], [362, 1, 1, "", "exp"], [363, 1, 1, "", "explode"], [364, 1, 1, "", "extend_constant"], [365, 1, 1, "", "fill_nan"], [366, 1, 1, "", "fill_null"], [367, 1, 1, "", "filter"], [368, 1, 1, "", "first"], [369, 1, 1, "", "flatten"], [370, 1, 1, "", "floor"], [371, 1, 1, "", "forward_fill"], [372, 1, 1, "", "hash"], [373, 1, 1, "", "head"], [374, 1, 1, "", "inspect"], [375, 1, 1, "", "interpolate"], [376, 1, 1, "", "is_between"], [377, 1, 1, "", "is_duplicated"], [378, 1, 1, "", "is_finite"], [379, 1, 1, "", "is_first"], [380, 1, 1, "", "is_in"], [381, 1, 1, "", "is_infinite"], [382, 1, 1, "", "is_nan"], [383, 1, 1, "", "is_not"], [384, 1, 1, "", "is_not_nan"], [385, 1, 1, "", "is_not_null"], [386, 1, 1, "", "is_null"], [387, 1, 1, "", "is_unique"], [388, 1, 1, "", "keep_name"], [389, 1, 1, "", "kurtosis"], [390, 1, 1, "", "last"], [391, 1, 1, "", "len"], [392, 1, 1, "", "limit"], [393, 1, 1, "", "list"], [394, 1, 1, "", "log"], [395, 1, 1, "", "log10"], [396, 1, 1, "", "lower_bound"], [397, 1, 1, "", "map"], [398, 1, 1, "", "map_alias"], [399, 1, 1, "", "map_dict"], [400, 1, 1, "", "max"], [401, 1, 1, "", "mean"], [402, 1, 1, "", "median"], [409, 1, 1, "", "min"], [410, 1, 1, "", "mode"], [411, 1, 1, "", "n_unique"], [412, 1, 1, "", "nan_max"], [413, 1, 1, "", "nan_min"], [414, 1, 1, "", "null_count"], [415, 1, 1, "", "over"], [416, 1, 1, "", "pct_change"], [417, 1, 1, "", "pipe"], [418, 1, 1, "", "pow"], [419, 1, 1, "", "prefix"], [420, 1, 1, "", "product"], [421, 1, 1, "", "quantile"], [422, 1, 1, "", "rank"], [423, 1, 1, "", "rechunk"], [424, 1, 1, "", "reinterpret"], [425, 1, 1, "", "repeat_by"], [426, 1, 1, "", "reshape"], [427, 1, 1, "", "reverse"], [428, 1, 1, "", "rolling_apply"], [429, 1, 1, "", "rolling_max"], [430, 1, 1, "", "rolling_mean"], [431, 1, 1, "", "rolling_median"], [432, 1, 1, "", "rolling_min"], [433, 1, 1, "", "rolling_quantile"], [434, 1, 1, "", "rolling_skew"], [435, 1, 1, "", "rolling_std"], [436, 1, 1, "", "rolling_sum"], [437, 1, 1, "", "rolling_var"], [438, 1, 1, "", "round"], [439, 1, 1, "", "sample"], [440, 1, 1, "", "search_sorted"], [441, 1, 1, "", "set_sorted"], [442, 1, 1, "", "shift"], [443, 1, 1, "", "shift_and_fill"], [444, 1, 1, "", "shrink_dtype"], [445, 1, 1, "", "shuffle"], [446, 1, 1, "", "sign"], [447, 1, 1, "", "sin"], [448, 1, 1, "", "sinh"], [449, 1, 1, "", "skew"], [450, 1, 1, "", "slice"], [451, 1, 1, "", "sort"], [452, 1, 1, "", "sort_by"], [453, 1, 1, "", "sqrt"], [454, 1, 1, "", "std"], [487, 1, 1, "", "suffix"], [488, 1, 1, "", "sum"], [489, 1, 1, "", "tail"], [490, 1, 1, "", "take"], [491, 1, 1, "", "take_every"], [492, 1, 1, "", "tan"], [493, 1, 1, "", "tanh"], [494, 1, 1, "", "to_physical"], [495, 1, 1, "", "top_k"], [496, 1, 1, "", "unique"], [497, 1, 1, "", "unique_counts"], [498, 1, 1, "", "upper_bound"], [499, 1, 1, "", "value_counts"], [500, 1, 1, "", "var"], [501, 1, 1, "", "where"]], "polars.Expr.arr": [[270, 1, 1, "", "arg_max"], [271, 1, 1, "", "arg_min"], [272, 1, 1, "", "concat"], [273, 1, 1, "", "contains"], [274, 1, 1, "", "count_match"], [275, 1, 1, "", "diff"], [276, 1, 1, "", "eval"], [277, 1, 1, "", "explode"], [278, 1, 1, "", "first"], [279, 1, 1, "", "get"], [280, 1, 1, "", "head"], [281, 1, 1, "", "join"], [282, 1, 1, "", "last"], [283, 1, 1, "", "lengths"], [284, 1, 1, "", "max"], [285, 1, 1, "", "mean"], [286, 1, 1, "", "min"], [287, 1, 1, "", "reverse"], [288, 1, 1, "", "shift"], [289, 1, 1, "", "slice"], [290, 1, 1, "", "sort"], [291, 1, 1, "", "sum"], [292, 1, 1, "", "tail"], [293, 1, 1, "", "take"], [294, 1, 1, "", "to_struct"], [295, 1, 1, "", "unique"]], "polars.Expr.bin": [[297, 1, 1, "", "contains"], [298, 1, 1, "", "decode"], [299, 1, 1, "", "encode"], [300, 1, 1, "", "ends_with"], [301, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[303, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[321, 1, 1, "", "cast_time_unit"], [322, 1, 1, "", "combine"], [323, 1, 1, "", "convert_time_zone"], [324, 1, 1, "", "date"], [325, 1, 1, "", "datetime"], [326, 1, 1, "", "day"], [327, 1, 1, "", "days"], [328, 1, 1, "", "epoch"], [329, 1, 1, "", "hour"], [330, 1, 1, "", "hours"], [331, 1, 1, "", "is_leap_year"], [332, 1, 1, "", "iso_year"], [333, 1, 1, "", "microsecond"], [334, 1, 1, "", "microseconds"], [335, 1, 1, "", "millisecond"], [336, 1, 1, "", "milliseconds"], [337, 1, 1, "", "minute"], [338, 1, 1, "", "minutes"], [339, 1, 1, "", "month"], [340, 1, 1, "", "nanosecond"], [341, 1, 1, "", "nanoseconds"], [342, 1, 1, "", "offset_by"], [343, 1, 1, "", "ordinal_day"], [344, 1, 1, "", "quarter"], [345, 1, 1, "", "replace_time_zone"], [346, 1, 1, "", "round"], [347, 1, 1, "", "second"], [348, 1, 1, "", "seconds"], [349, 1, 1, "", "strftime"], [350, 1, 1, "", "time"], [351, 1, 1, "", "timestamp"], [352, 1, 1, "", "truncate"], [353, 1, 1, "", "week"], [354, 1, 1, "", "weekday"], [355, 1, 1, "", "with_time_unit"], [356, 1, 1, "", "year"]], "polars.Expr.meta": [[403, 1, 1, "", "has_multiple_outputs"], [404, 1, 1, "", "is_regex_projection"], [405, 1, 1, "", "output_name"], [406, 1, 1, "", "pop"], [407, 1, 1, "", "root_names"], [408, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[455, 1, 1, "", "concat"], [456, 1, 1, "", "contains"], [457, 1, 1, "", "count_match"], [458, 1, 1, "", "decode"], [459, 1, 1, "", "encode"], [460, 1, 1, "", "ends_with"], [461, 1, 1, "", "explode"], [462, 1, 1, "", "extract"], [463, 1, 1, "", "extract_all"], [464, 1, 1, "", "json_extract"], [465, 1, 1, "", "json_path_match"], [466, 1, 1, "", "lengths"], [467, 1, 1, "", "ljust"], [468, 1, 1, "", "lstrip"], [469, 1, 1, "", "n_chars"], [470, 1, 1, "", "parse_int"], [471, 1, 1, "", "replace"], [472, 1, 1, "", "replace_all"], [473, 1, 1, "", "rjust"], [474, 1, 1, "", "rstrip"], [475, 1, 1, "", "slice"], [476, 1, 1, "", "split"], [477, 1, 1, "", "split_exact"], [478, 1, 1, "", "splitn"], [479, 1, 1, "", "starts_with"], [480, 1, 1, "", "strip"], [481, 1, 1, "", "strptime"], [482, 1, 1, "", "to_lowercase"], [483, 1, 1, "", "to_uppercase"], [484, 1, 1, "", "zfill"]], "polars.Expr.struct": [[485, 1, 1, "", "field"], [486, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[568, 1, 1, "", "cache"], [569, 1, 1, "", "clear"], [570, 1, 1, "", "clone"], [571, 1, 1, "", "collect"], [572, 2, 1, "", "columns"], [573, 1, 1, "", "drop"], [574, 1, 1, "", "drop_nulls"], [575, 2, 1, "", "dtypes"], [576, 1, 1, "", "explain"], [577, 1, 1, "", "explode"], [578, 1, 1, "", "fetch"], [579, 1, 1, "", "fill_nan"], [580, 1, 1, "", "fill_null"], [581, 1, 1, "", "filter"], [582, 1, 1, "", "first"], [583, 1, 1, "", "from_json"], [584, 1, 1, "", "groupby"], [585, 1, 1, "", "groupby_dynamic"], [586, 1, 1, "", "groupby_rolling"], [587, 1, 1, "", "head"], [588, 1, 1, "", "inspect"], [589, 1, 1, "", "interpolate"], [590, 1, 1, "", "join"], [591, 1, 1, "", "join_asof"], [592, 1, 1, "", "last"], [593, 1, 1, "", "lazy"], [594, 1, 1, "", "limit"], [595, 1, 1, "", "map"], [596, 1, 1, "", "max"], [597, 1, 1, "", "mean"], [598, 1, 1, "", "median"], [599, 1, 1, "", "melt"], [600, 1, 1, "", "merge_sorted"], [601, 1, 1, "", "min"], [602, 1, 1, "", "pipe"], [603, 1, 1, "", "profile"], [604, 1, 1, "", "quantile"], [605, 1, 1, "", "read_json"], [606, 1, 1, "", "rename"], [607, 1, 1, "", "reverse"], [608, 2, 1, "", "schema"], [609, 1, 1, "", "select"], [610, 1, 1, "", "shift"], [611, 1, 1, "", "shift_and_fill"], [612, 1, 1, "", "show_graph"], [613, 1, 1, "", "sink_ipc"], [614, 1, 1, "", "sink_parquet"], [615, 1, 1, "", "slice"], [616, 1, 1, "", "sort"], [617, 1, 1, "", "std"], [618, 1, 1, "", "sum"], [619, 1, 1, "", "tail"], [620, 1, 1, "", "take_every"], [621, 1, 1, "", "top_k"], [622, 1, 1, "", "unique"], [623, 1, 1, "", "unnest"], [624, 1, 1, "", "update"], [625, 1, 1, "", "var"], [626, 2, 1, "", "width"], [627, 1, 1, "", "with_columns"], [628, 1, 1, "", "with_context"], [629, 1, 1, "", "with_row_count"], [630, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"]], "polars.Series": [[653, 1, 1, "", "abs"], [654, 1, 1, "", "alias"], [655, 1, 1, "", "all"], [656, 1, 1, "", "any"], [657, 1, 1, "", "append"], [658, 1, 1, "", "apply"], [659, 1, 1, "", "arccos"], [660, 1, 1, "", "arccosh"], [661, 1, 1, "", "arcsin"], [662, 1, 1, "", "arcsinh"], [663, 1, 1, "", "arctan"], [664, 1, 1, "", "arctanh"], [665, 1, 1, "", "arg_max"], [666, 1, 1, "", "arg_min"], [667, 1, 1, "", "arg_sort"], [668, 1, 1, "", "arg_true"], [669, 1, 1, "", "arg_unique"], [670, 1, 1, "", "argsort"], [671, 3, 1, "", "arr"], [703, 1, 1, "", "cast"], [704, 3, 1, "", "cat"], [706, 1, 1, "", "ceil"], [707, 1, 1, "", "chunk_lengths"], [708, 1, 1, "", "clear"], [709, 1, 1, "", "clip"], [710, 1, 1, "", "clip_max"], [711, 1, 1, "", "clip_min"], [712, 1, 1, "", "clone"], [713, 1, 1, "", "cos"], [714, 1, 1, "", "cosh"], [715, 1, 1, "", "cummax"], [716, 1, 1, "", "cummin"], [717, 1, 1, "", "cumprod"], [718, 1, 1, "", "cumsum"], [719, 1, 1, "", "cumulative_eval"], [720, 1, 1, "", "cut"], [721, 1, 1, "", "describe"], [722, 1, 1, "", "diff"], [723, 1, 1, "", "dot"], [724, 1, 1, "", "drop_nans"], [725, 1, 1, "", "drop_nulls"], [726, 3, 1, "", "dt"], [767, 3, 1, "", "dtype"], [768, 1, 1, "", "entropy"], [769, 1, 1, "", "estimated_size"], [770, 1, 1, "", "ewm_mean"], [771, 1, 1, "", "ewm_std"], [772, 1, 1, "", "ewm_var"], [773, 1, 1, "", "exp"], [774, 1, 1, "", "explode"], [775, 1, 1, "", "extend_constant"], [776, 1, 1, "", "fill_nan"], [777, 1, 1, "", "fill_null"], [778, 1, 1, "", "filter"], [779, 3, 1, "", "flags"], [780, 1, 1, "", "floor"], [781, 1, 1, "", "get_chunks"], [782, 1, 1, "", "has_validity"], [783, 1, 1, "", "hash"], [784, 1, 1, "", "head"], [785, 1, 1, "", "hist"], [786, 3, 1, "", "inner_dtype"], [787, 1, 1, "", "interpolate"], [788, 1, 1, "", "is_between"], [789, 1, 1, "", "is_boolean"], [790, 1, 1, "", "is_duplicated"], [791, 1, 1, "", "is_empty"], [792, 1, 1, "", "is_finite"], [793, 1, 1, "", "is_first"], [794, 1, 1, "", "is_float"], [795, 1, 1, "", "is_in"], [796, 1, 1, "", "is_infinite"], [797, 1, 1, "", "is_nan"], [798, 1, 1, "", "is_not_nan"], [799, 1, 1, "", "is_not_null"], [800, 1, 1, "", "is_null"], [801, 1, 1, "", "is_numeric"], [802, 1, 1, "", "is_sorted"], [803, 1, 1, "", "is_temporal"], [804, 1, 1, "", "is_unique"], [805, 1, 1, "", "is_utf8"], [806, 1, 1, "", "item"], [807, 1, 1, "", "kurtosis"], [808, 1, 1, "", "len"], [809, 1, 1, "", "limit"], [810, 1, 1, "", "log"], [811, 1, 1, "", "log10"], [812, 1, 1, "", "lower_bound"], [813, 1, 1, "", "map_dict"], [814, 1, 1, "", "max"], [815, 1, 1, "", "mean"], [816, 1, 1, "", "median"], [817, 1, 1, "", "min"], [818, 1, 1, "", "mode"], [819, 1, 1, "", "n_chunks"], [820, 1, 1, "", "n_unique"], [821, 3, 1, "", "name"], [822, 1, 1, "", "nan_max"], [823, 1, 1, "", "nan_min"], [824, 1, 1, "", "new_from_index"], [825, 1, 1, "", "null_count"], [826, 1, 1, "", "pct_change"], [827, 1, 1, "", "peak_max"], [828, 1, 1, "", "peak_min"], [829, 1, 1, "", "product"], [830, 1, 1, "", "qcut"], [831, 1, 1, "", "quantile"], [832, 1, 1, "", "rank"], [833, 1, 1, "", "rechunk"], [834, 1, 1, "", "reinterpret"], [835, 1, 1, "", "rename"], [836, 1, 1, "", "reshape"], [837, 1, 1, "", "reverse"], [838, 1, 1, "", "rolling_apply"], [839, 1, 1, "", "rolling_max"], [840, 1, 1, "", "rolling_mean"], [841, 1, 1, "", "rolling_median"], [842, 1, 1, "", "rolling_min"], [843, 1, 1, "", "rolling_quantile"], [844, 1, 1, "", "rolling_skew"], [845, 1, 1, "", "rolling_std"], [846, 1, 1, "", "rolling_sum"], [847, 1, 1, "", "rolling_var"], [848, 1, 1, "", "round"], [849, 1, 1, "", "sample"], [850, 1, 1, "", "search_sorted"], [851, 1, 1, "", "series_equal"], [852, 1, 1, "", "set"], [853, 1, 1, "", "set_at_idx"], [854, 1, 1, "", "set_sorted"], [855, 3, 1, "", "shape"], [856, 1, 1, "", "shift"], [857, 1, 1, "", "shift_and_fill"], [858, 1, 1, "", "shrink_dtype"], [859, 1, 1, "", "shrink_to_fit"], [860, 1, 1, "", "shuffle"], [861, 1, 1, "", "sign"], [862, 1, 1, "", "sin"], [863, 1, 1, "", "sinh"], [864, 1, 1, "", "skew"], [865, 1, 1, "", "slice"], [866, 1, 1, "", "sort"], [867, 1, 1, "", "sqrt"], [868, 1, 1, "", "std"], [869, 3, 1, "", "str"], [904, 1, 1, "", "sum"], [905, 1, 1, "", "tail"], [906, 1, 1, "", "take"], [907, 1, 1, "", "take_every"], [908, 1, 1, "", "tan"], [909, 1, 1, "", "tanh"], [910, 3, 1, "", "time_unit"], [911, 1, 1, "", "to_arrow"], [912, 1, 1, "", "to_dummies"], [913, 1, 1, "", "to_frame"], [914, 1, 1, "", "to_init_repr"], [915, 1, 1, "", "to_list"], [916, 1, 1, "", "to_numpy"], [917, 1, 1, "", "to_pandas"], [918, 1, 1, "", "to_physical"], [919, 1, 1, "", "top_k"], [920, 1, 1, "", "unique"], [921, 1, 1, "", "unique_counts"], [922, 1, 1, "", "upper_bound"], [923, 1, 1, "", "value_counts"], [924, 1, 1, "", "var"], [925, 1, 1, "", "view"], [926, 1, 1, "", "zip_with"]], "polars.Series.arr": [[672, 1, 1, "", "arg_max"], [673, 1, 1, "", "arg_min"], [674, 1, 1, "", "concat"], [675, 1, 1, "", "contains"], [676, 1, 1, "", "count_match"], [677, 1, 1, "", "diff"], [678, 1, 1, "", "eval"], [679, 1, 1, "", "explode"], [680, 1, 1, "", "first"], [681, 1, 1, "", "get"], [682, 1, 1, "", "head"], [683, 1, 1, "", "join"], [684, 1, 1, "", "last"], [685, 1, 1, "", "lengths"], [686, 1, 1, "", "max"], [687, 1, 1, "", "mean"], [688, 1, 1, "", "min"], [689, 1, 1, "", "reverse"], [690, 1, 1, "", "shift"], [691, 1, 1, "", "slice"], [692, 1, 1, "", "sort"], [693, 1, 1, "", "sum"], [694, 1, 1, "", "tail"], [695, 1, 1, "", "take"], [696, 1, 1, "", "to_struct"], [697, 1, 1, "", "unique"]], "polars.Series.bin": [[698, 1, 1, "", "contains"], [699, 1, 1, "", "decode"], [700, 1, 1, "", "encode"], [701, 1, 1, "", "ends_with"], [702, 1, 1, "", "starts_with"]], "polars.Series.cat": [[705, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[727, 1, 1, "", "cast_time_unit"], [728, 1, 1, "", "combine"], [729, 1, 1, "", "convert_time_zone"], [730, 1, 1, "", "date"], [731, 1, 1, "", "datetime"], [732, 1, 1, "", "day"], [733, 1, 1, "", "days"], [734, 1, 1, "", "epoch"], [735, 1, 1, "", "hour"], [736, 1, 1, "", "hours"], [737, 1, 1, "", "is_leap_year"], [738, 1, 1, "", "iso_year"], [739, 1, 1, "", "max"], [740, 1, 1, "", "mean"], [741, 1, 1, "", "median"], [742, 1, 1, "", "microsecond"], [743, 1, 1, "", "microseconds"], [744, 1, 1, "", "millisecond"], [745, 1, 1, "", "milliseconds"], [746, 1, 1, "", "min"], [747, 1, 1, "", "minute"], [748, 1, 1, "", "minutes"], [749, 1, 1, "", "month"], [750, 1, 1, "", "nanosecond"], [751, 1, 1, "", "nanoseconds"], [752, 1, 1, "", "offset_by"], [753, 1, 1, "", "ordinal_day"], [754, 1, 1, "", "quarter"], [755, 1, 1, "", "replace_time_zone"], [756, 1, 1, "", "round"], [757, 1, 1, "", "second"], [758, 1, 1, "", "seconds"], [759, 1, 1, "", "strftime"], [760, 1, 1, "", "time"], [761, 1, 1, "", "timestamp"], [762, 1, 1, "", "truncate"], [763, 1, 1, "", "week"], [764, 1, 1, "", "weekday"], [765, 1, 1, "", "with_time_unit"], [766, 1, 1, "", "year"]], "polars.Series.str": [[870, 1, 1, "", "concat"], [871, 1, 1, "", "contains"], [872, 1, 1, "", "count_match"], [873, 1, 1, "", "decode"], [874, 1, 1, "", "encode"], [875, 1, 1, "", "ends_with"], [876, 1, 1, "", "explode"], [877, 1, 1, "", "extract"], [878, 1, 1, "", "extract_all"], [879, 1, 1, "", "json_extract"], [880, 1, 1, "", "json_path_match"], [881, 1, 1, "", "lengths"], [882, 1, 1, "", "ljust"], [883, 1, 1, "", "lstrip"], [884, 1, 1, "", "n_chars"], [885, 1, 1, "", "parse_int"], [886, 1, 1, "", "replace"], [887, 1, 1, "", "replace_all"], [888, 1, 1, "", "rjust"], [889, 1, 1, "", "rstrip"], [890, 1, 1, "", "slice"], [891, 1, 1, "", "split"], [892, 1, 1, "", "split_exact"], [893, 1, 1, "", "splitn"], [894, 1, 1, "", "starts_with"], [895, 1, 1, "", "strip"], [896, 1, 1, "", "strptime"], [897, 1, 1, "", "to_lowercase"], [898, 1, 1, "", "to_uppercase"], [899, 1, 1, "", "zfill"]], "polars.Series.struct": [[900, 1, 1, "", "field"], [901, 3, 1, "", "fields"], [902, 1, 1, "", "rename_fields"], [903, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.Struct": [[52, 1, 1, "", "__init__"]], "polars.Time": [[53, 1, 1, "", "__init__"]], "polars.UInt16": [[54, 1, 1, "", "__init__"]], "polars.UInt32": [[55, 1, 1, "", "__init__"]], "polars.UInt64": [[56, 1, 1, "", "__init__"]], "polars.UInt8": [[57, 1, 1, "", "__init__"]], "polars.Unknown": [[58, 1, 1, "", "__init__"]], "polars.Utf8": [[59, 1, 1, "", "__init__"]], "polars.api": [[61, 4, 1, "", "register_dataframe_namespace"], [62, 4, 1, "", "register_expr_namespace"], [63, 4, 1, "", "register_lazyframe_namespace"], [64, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[224, 1, 1, "", "__iter__"], [225, 1, 1, "", "agg"], [226, 1, 1, "", "all"], [227, 1, 1, "", "apply"], [228, 1, 1, "", "count"], [229, 1, 1, "", "first"], [230, 1, 1, "", "head"], [231, 1, 1, "", "last"], [232, 1, 1, "", "max"], [233, 1, 1, "", "mean"], [234, 1, 1, "", "median"], [235, 1, 1, "", "min"], [236, 1, 1, "", "n_unique"], [237, 1, 1, "", "quantile"], [238, 1, 1, "", "sum"], [239, 1, 1, "", "tail"]], "polars.exceptions": [[71, 5, 1, "", "ArrowError"], [72, 5, 1, "", "ColumnNotFoundError"], [73, 5, 1, "", "ComputeError"], [74, 5, 1, "", "DuplicateError"], [75, 5, 1, "", "InvalidOperationError"], [76, 5, 1, "", "NoDataError"], [77, 5, 1, "", "NoRowsReturned"], [78, 5, 1, "", "PanicException"], [79, 5, 1, "", "RowsException"], [80, 5, 1, "", "SchemaError"], [81, 5, 1, "", "SchemaFieldNotFoundError"], [82, 5, 1, "", "ShapeError"], [83, 5, 1, "", "StructFieldNotFoundError"], [84, 5, 1, "", "TooManyRowsReturned"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[95, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[631, 1, 1, "", "agg"], [632, 1, 1, "", "all"], [633, 1, 1, "", "apply"], [634, 1, 1, "", "count"], [635, 1, 1, "", "first"], [636, 1, 1, "", "head"], [637, 1, 1, "", "last"], [638, 1, 1, "", "max"], [639, 1, 1, "", "mean"], [640, 1, 1, "", "median"], [641, 1, 1, "", "min"], [642, 1, 1, "", "n_unique"], [643, 1, 1, "", "quantile"], [644, 1, 1, "", "sum"], [645, 1, 1, "", "tail"]], "polars.testing": [[116, 4, 1, "", "assert_frame_equal"], [117, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[118, 0, 1, "", "column"], [119, 4, 1, "", "columns"], [120, 4, 1, "", "dataframes"], [121, 4, 1, "", "series"]], "polars.testing.parametric.column": [[118, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 140], "api": [1, 61, 62, 63, 64, 565], "provid": 1, "new": 1, "function": [1, 554, 564], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926], "binari": [2, 549, 928], "boolean": [3, 550, 929], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125], "activate_decim": 5, "load": [6, 125], "restore_default": 7, "save": [8, 125], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 125], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 630], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 324, 518, 730], "datetim": [36, 325, 519, 731], "decim": 37, "durat": [38, 520], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 393, 529, 556, 935], "null": 46, "object": 47, "sqlcontext": [48, 49, 50], "execut": 48, "queri": 49, "regist": 50, "stringcach": [51, 564], "struct": [52, 485, 486, 544, 561, 900, 901, 902, 903, 939], "time": [53, 350, 760], "uint16": 54, "uint32": 55, "uint64": 56, "uint8": 57, "unknown": 58, "utf8": 59, "align_fram": 60, "register_dataframe_namespac": 61, "register_expr_namespac": 62, "register_lazyframe_namespac": 63, "register_series_namespac": 64, "arg_wher": 65, "build_info": 66, "collect_al": 67, "concat": [68, 272, 455, 674, 870], "cut": [69, 720], "date_rang": 70, "except": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 249], "arrowerror": 71, "columnnotfounderror": 72, "computeerror": 73, "duplicateerror": 74, "invalidoperationerror": 75, "nodataerror": 76, "norowsreturn": 77, "panicexcept": 78, "rowsexcept": 79, "schemaerror": 80, "schemafieldnotfounderror": 81, "shapeerror": 82, "structfieldnotfounderror": 83, "toomanyrowsreturn": 84, "from_arrow": 85, "from_datafram": 86, "from_dict": [87, 88], "from_numpi": 89, "from_panda": 90, "from_record": 91, "from_repr": 92, "get_dummi": 93, "get_index_typ": 94, "io": 95, "csv": [95, 566], "batched_read": 95, "batchedcsvread": [95, 566], "next_batch": 95, "ones": 96, "read_avro": 97, "read_csv": 98, "read_csv_batch": 99, "read_databas": 100, "read_delta": 101, "read_excel": 102, "read_ipc": 103, "read_ipc_schema": 104, "read_json": [105, 605], "read_ndjson": 106, "read_parquet": 107, "read_parquet_schema": 108, "scan_csv": 109, "scan_delta": 110, "scan_ipc": 111, "scan_ndjson": 112, "scan_parquet": 113, "scan_pyarrow_dataset": 114, "show_vers": 115, "test": [116, 117, 118, 119, 120, 121, 942], "assert_frame_equ": 116, "assert_series_equ": 117, "parametr": [118, 119, 120, 121], "column": [118, 119, 131, 552, 572], "seri": [121, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 934], "threadpool_s": 122, "toggle_string_cach": 123, "zero": 124, "option": 125, "current": 125, "us": 125, "context": 125, "manag": 125, "aggreg": [126, 250, 567, 652], "__dataframe__": 127, "appli": [128, 227, 257, 504, 633, 658], "clear": [129, 569, 708], "clone": [130, 570, 712], "corr": [132, 512], "describ": [133, 721], "drop": [134, 573], "drop_in_plac": 135, "drop_nul": [136, 320, 574, 725], "dtype": [137, 575, 767], "estimated_s": [138, 769], "explod": [139, 277, 363, 461, 577, 679, 774, 876], "fill_nan": [141, 365, 579, 776], "fill_nul": [142, 366, 580, 777], "filter": [143, 367, 581, 778], "find_idx_by_nam": 144, "fold": [145, 524], "frame_equ": 146, "get_column": [147, 148], "glimps": 149, "groupbi": [150, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 244, 584, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 648], "groupby_dynam": [151, 585], "groupby_rol": [152, 586], "hash_row": 153, "head": [154, 230, 280, 373, 528, 587, 636, 682, 784], "height": 155, "hstack": 156, "insert_at_idx": 157, "interpol": [158, 375, 589, 787], "is_dupl": [159, 377, 790], "is_empti": [160, 791], "is_uniqu": [161, 387, 804], "item": [162, 806], "iter_row": 163, "iter_slic": 164, "join": [165, 281, 590, 683], "join_asof": [166, 591], "lazi": [167, 564, 593], "limit": [168, 392, 594, 809], "max": [169, 232, 284, 400, 532, 596, 638, 686, 739, 814], "mean": [170, 233, 285, 401, 533, 597, 639, 687, 740, 815], "median": [171, 234, 402, 534, 598, 640, 741, 816], "melt": [172, 599], "merge_sort": [173, 600], "min": [174, 235, 286, 409, 535, 601, 641, 688, 746, 817], "n_chunk": [175, 819], "n_uniqu": [176, 236, 411, 536, 642, 820], "null_count": [177, 414, 825], "partition_bi": 178, "pipe": [179, 417, 602], "pivot": 180, "product": [181, 420, 829], "quantil": [182, 237, 421, 538, 604, 643, 831], "rechunk": [183, 423, 833], "renam": [184, 606, 835], "replac": [185, 471, 886], "replace_at_idx": 186, "revers": [187, 287, 427, 607, 689, 837], "row": [188, 189], "sampl": [190, 439, 849], "schema": [191, 608], "select": [192, 247, 541, 559, 609, 651, 937], "shape": [193, 855], "shift": [194, 288, 442, 610, 690, 856], "shift_and_fil": [195, 443, 611, 857], "shrink_to_fit": [196, 859], "slice": [197, 289, 450, 475, 615, 691, 865, 890], "sort": [198, 290, 451, 616, 692, 866], "std": [199, 454, 543, 617, 868], "sum": [200, 238, 291, 488, 545, 618, 644, 693, 904], "tail": [201, 239, 292, 489, 546, 619, 645, 694, 905], "take_everi": [202, 491, 620, 907], "to_arrow": [203, 911], "to_dict": [204, 205], "to_dummi": [206, 912], "to_init_repr": [207, 914], "to_numpi": [208, 916], "to_panda": [209, 917], "to_seri": 210, "to_struct": [211, 294, 696], "top_k": [212, 495, 621, 919], "transpos": 213, "uniqu": [214, 295, 496, 622, 697, 920], "unnest": [215, 623, 903], "unstack": 216, "updat": [217, 624], "upsampl": 218, "var": [219, 500, 547, 625, 924], "vstack": 220, "width": [221, 626], "with_column": [222, 627], "with_row_count": [223, 629], "__iter__": 224, "agg": [225, 631], "all": [226, 254, 502, 632, 655], "count": [228, 310, 513, 634], "first": [229, 278, 368, 523, 582, 635, 680], "last": [231, 282, 390, 592, 637, 684], "attribut": [240, 646, 927], "comput": [241, 553, 931], "descript": [242, 647, 932], "export": [243, 933], "miscellan": [246, 558, 564, 650, 936], "manipul": [247, 559, 651, 937], "data": 248, "type": 248, "numer": 248, "tempor": [248, 562, 940], "nest": 248, "other": 248, "expr": [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "ab": [251, 653], "agg_group": 252, "alia": [253, 654], "ani": [255, 503, 656], "append": [256, 657], "arcco": [258, 659], "arccosh": [259, 660], "arcsin": [260, 661], "arcsinh": [261, 662], "arctan": [262, 663], "arctanh": [263, 664], "arg_max": [264, 270, 665, 672], "arg_min": [265, 271, 666, 673], "arg_sort": [266, 667], "arg_tru": [267, 668], "arg_uniqu": [268, 669], "argsort": [269, 670], "arr": [270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697], "contain": [273, 297, 456, 675, 698, 871], "count_match": [274, 457, 676, 872], "diff": [275, 317, 677, 722], "eval": [276, 678], "get": [279, 681], "length": [283, 466, 685, 881], "take": [293, 490, 695, 906], "backward_fil": 296, "bin": [297, 298, 299, 300, 301, 698, 699, 700, 701, 702], "decod": [298, 458, 699, 873], "encod": [299, 459, 700, 874], "ends_with": [300, 460, 701, 875], "starts_with": [301, 479, 702, 894], "cast": [302, 703], "cat": [303, 704, 705], "set_ord": [303, 705], "ceil": [304, 706], "clip": [305, 709], "clip_max": [306, 710], "clip_min": [307, 711], "co": [308, 713], "cosh": [309, 714], "cumcount": 311, "cummax": [312, 715], "cummin": [313, 716], "cumprod": [314, 717], "cumsum": [315, 517, 718], "cumulative_ev": [316, 719], "dot": [318, 723], "drop_nan": [319, 724], "dt": [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766], "cast_time_unit": [321, 727], "combin": [322, 728], "convert_time_zon": [323, 729], "dai": [326, 327, 732, 733], "epoch": [328, 734], "hour": [329, 330, 735, 736], "is_leap_year": [331, 737], "iso_year": [332, 738], "microsecond": [333, 334, 742, 743], "millisecond": [335, 336, 744, 745], "minut": [337, 338, 747, 748], "month": [339, 749], "nanosecond": [340, 341, 750, 751], "offset_bi": [342, 752], "ordinal_dai": [343, 753], "quarter": [344, 754], "replace_time_zon": [345, 755], "round": [346, 438, 756, 848], "second": [347, 348, 757, 758], "strftime": [349, 759], "timestamp": [351, 761], "truncat": [352, 762], "week": [353, 763], "weekdai": [354, 764], "with_time_unit": [355, 765], "year": [356, 766], "entropi": [357, 768], "ewm_mean": [358, 770], "ewm_std": [359, 771], "ewm_var": [360, 772], "exclud": [361, 522], "exp": [362, 773], "extend_const": [364, 775], "flatten": 369, "floor": [370, 780], "forward_fil": 371, "hash": [372, 783], "inspect": [374, 588], "is_between": [376, 788], "is_finit": [378, 792], "is_first": [379, 793], "is_in": [380, 795], "is_infinit": [381, 796], "is_nan": [382, 797], "is_not": 383, "is_not_nan": [384, 798], "is_not_nul": [385, 799], "is_nul": [386, 800], "keep_nam": 388, "kurtosi": [389, 807], "len": [391, 808], "log": [394, 810], "log10": [395, 811], "lower_bound": [396, 812], "map": [397, 531, 595], "map_alia": 398, "map_dict": [399, 813], "meta": [403, 404, 405, 406, 407, 408, 557], "has_multiple_output": 403, "is_regex_project": 404, "output_nam": 405, "pop": 406, "root_nam": 407, "undo_alias": 408, "mode": [410, 818], "nan_max": [412, 822], "nan_min": [413, 823], "over": 415, "pct_chang": [416, 826], "pow": 418, "prefix": 419, "rank": [422, 832], "reinterpret": [424, 834], "repeat_bi": 425, "reshap": [426, 836], "rolling_appli": [428, 838], "rolling_max": [429, 839], "rolling_mean": [430, 840], "rolling_median": [431, 841], "rolling_min": [432, 842], "rolling_quantil": [433, 843], "rolling_skew": [434, 844], "rolling_std": [435, 845], "rolling_sum": [436, 846], "rolling_var": [437, 847], "search_sort": [440, 850], "set_sort": [441, 854], "shrink_dtyp": [444, 858], "shuffl": [445, 860], "sign": [446, 861], "sin": [447, 862], "sinh": [448, 863], "skew": [449, 864], "sort_bi": 452, "sqrt": [453, 867], "str": [455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899], "extract": [462, 877], "extract_al": [463, 878], "json_extract": [464, 879], "json_path_match": [465, 880], "ljust": [467, 882], "lstrip": [468, 883], "n_char": [469, 884], "parse_int": [470, 885], "replace_al": [472, 887], "rjust": [473, 888], "rstrip": [474, 889], "split": [476, 891], "split_exact": [477, 892], "splitn": [478, 893], "strip": [480, 895], "strptime": [481, 896], "to_lowercas": [482, 897], "to_uppercas": [483, 898], "zfill": [484, 899], "field": [485, 900, 901], "rename_field": [486, 902], "suffix": 487, "tan": [492, 908], "tanh": [493, 909], "to_phys": [494, 918], "unique_count": [497, 921], "upper_bound": [498, 922], "value_count": [499, 923], "where": 501, "arang": 505, "arg_sort_bi": 506, "avg": 507, "coalesc": 508, "col": 509, "concat_list": 510, "concat_str": 511, "cov": 514, "cumfold": 515, "cumreduc": 516, "element": 521, "format": 525, "from_epoch": 526, "group": 527, "lit": 530, "pearson_corr": 537, "reduc": 539, "repeat": 540, "spearman_rank_corr": 542, "when": 548, "categori": [551, 930], "name": [552, 821], "express": 555, "string": [560, 938], "window": 563, "convers": 564, "eager": 564, "parallel": 564, "refer": 565, "input": 566, "output": 566, "feather": 566, "ipc": 566, "parquet": 566, "databas": 566, "json": 566, "avro": 566, "excel": 566, "delta": 566, "lake": 566, "dataset": 566, "lazyfram": [568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 649], "cach": 568, "collect": 571, "explain": 576, "fetch": 578, "from_json": 583, "profil": 603, "show_graph": 612, "sink_ipc": 613, "sink_parquet": 614, "with_context": 628, "lazygroupbi": [631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645], "read": 650, "write": 650, "logic": 650, "plan": 650, "chunk_length": 707, "flag": 779, "get_chunk": 781, "has_valid": 782, "hist": 785, "inner_dtyp": 786, "is_boolean": 789, "is_float": 794, "is_numer": 801, "is_sort": 802, "is_tempor": 803, "is_utf8": 805, "new_from_index": 824, "peak_max": 827, "peak_min": 828, "qcut": 830, "series_equ": 851, "set": 852, "set_at_idx": 853, "time_unit": 910, "to_fram": 913, "to_list": 915, "view": 925, "zip_with": 926, "sql": 941, "method": 941, "assert": 942, "properti": 942, "base": 942, "strategi": 942, "helper": 942, "util": 943}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.UInt32": [[55, "polars-uint32"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Object": [[47, "polars-object"]], "polars.UInt64": [[56, "polars-uint64"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.api.register_lazyframe_namespace": [[63, "polars-api-register-lazyframe-namespace"]], "polars.Time": [[53, "polars-time"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.align_frames": [[60, "polars-align-frames"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.api.register_dataframe_namespace": [[61, "polars-api-register-dataframe-namespace"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Boolean": [[3, "polars-boolean"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.List": [[45, "polars-list"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.arg_where": [[65, "polars-arg-where"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Int16": [[41, "polars-int16"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.UInt16": [[54, "polars-uint16"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Int8": [[44, "polars-int8"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.Date": [[35, "polars-date"]], "polars.api.register_series_namespace": [[64, "polars-api-register-series-namespace"]], "polars.Null": [[46, "polars-null"]], "polars.collect_all": [[67, "polars-collect-all"]], "polars.Int64": [[43, "polars-int64"]], "polars.Float32": [[39, "polars-float32"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.api.register_expr_namespace": [[62, "polars-api-register-expr-namespace"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.Unknown": [[58, "polars-unknown"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.build_info": [[66, "polars-build-info"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.DataType": [[34, "polars-datatype"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Struct": [[52, "polars-struct"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.Int32": [[42, "polars-int32"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.Binary": [[2, "polars-binary"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.StringCache": [[51, "polars-stringcache"]], "polars.Duration": [[38, "polars-duration"]], "polars.Utf8": [[59, "polars-utf8"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.UInt8": [[57, "polars-uint8"]], "polars.Float64": [[40, "polars-float64"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.exceptions.SchemaFieldNotFoundError": [[81, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.SchemaError": [[80, "polars-exceptions-schemaerror"]], "polars.exceptions.ColumnNotFoundError": [[72, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.StructFieldNotFoundError": [[83, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.corr": [[132, "polars-dataframe-corr"]], "polars.DataFrame.describe": [[133, "polars-dataframe-describe"]], "polars.exceptions.NoDataError": [[76, "polars-exceptions-nodataerror"]], "polars.read_database": [[100, "polars-read-database"]], "polars.exceptions.PanicException": [[78, "polars-exceptions-panicexception"]], "polars.read_ipc": [[103, "polars-read-ipc"]], "polars.read_json": [[105, "polars-read-json"]], "polars.concat": [[68, "polars-concat"]], "polars.get_dummies": [[93, "polars-get-dummies"]], "polars.from_dicts": [[88, "polars-from-dicts"]], "polars.scan_parquet": [[113, "polars-scan-parquet"]], "polars.scan_delta": [[110, "polars-scan-delta"]], "polars.read_ipc_schema": [[104, "polars-read-ipc-schema"]], "polars.show_versions": [[115, "polars-show-versions"]], "polars.from_arrow": [[85, "polars-from-arrow"]], "polars.read_csv_batched": [[99, "polars-read-csv-batched"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[95, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.from_dict": [[87, "polars-from-dict"]], "polars.DataFrame.clone": [[130, "polars-dataframe-clone"]], "polars.scan_ndjson": [[112, "polars-scan-ndjson"]], "polars.threadpool_size": [[122, "polars-threadpool-size"]], "polars.DataFrame.apply": [[128, "polars-dataframe-apply"]], "polars.read_ndjson": [[106, "polars-read-ndjson"]], "polars.testing.assert_series_equal": [[117, "polars-testing-assert-series-equal"]], "polars.read_parquet_schema": [[108, "polars-read-parquet-schema"]], "polars.date_range": [[70, "polars-date-range"]], "polars.from_pandas": [[90, "polars-from-pandas"]], "polars.scan_pyarrow_dataset": [[114, "polars-scan-pyarrow-dataset"]], "polars.exceptions.TooManyRowsReturned": [[84, "polars-exceptions-toomanyrowsreturned"]], "polars.exceptions.ComputeError": [[73, "polars-exceptions-computeerror"]], "Aggregation": [[126, "aggregation"], [652, "aggregation"], [567, "aggregation"], [250, "aggregation"]], "polars.DataFrame.columns": [[131, "polars-dataframe-columns"]], "polars.from_repr": [[92, "polars-from-repr"]], "polars.read_delta": [[101, "polars-read-delta"]], "polars.testing.parametric.columns": [[119, "polars-testing-parametric-columns"]], "polars.exceptions.ShapeError": [[82, "polars-exceptions-shapeerror"]], "polars.from_records": [[91, "polars-from-records"]], "polars.exceptions.ArrowError": [[71, "polars-exceptions-arrowerror"]], "polars.read_csv": [[98, "polars-read-csv"]], "polars.scan_ipc": [[111, "polars-scan-ipc"]], "polars.read_parquet": [[107, "polars-read-parquet"]], "polars.toggle_string_cache": [[123, "polars-toggle-string-cache"]], "polars.exceptions.NoRowsReturned": [[77, "polars-exceptions-norowsreturned"]], "polars.from_dataframe": [[86, "polars-from-dataframe"]], "Config": [[125, "config"]], "Config options": [[125, "config-options"]], "Config load, save, and current state": [[125, "config-load-save-and-current-state"]], "Use as a context manager": [[125, "use-as-a-context-manager"]], "polars.read_excel": [[102, "polars-read-excel"]], "polars.testing.assert_frame_equal": [[116, "polars-testing-assert-frame-equal"]], "polars.scan_csv": [[109, "polars-scan-csv"]], "polars.testing.parametric.column": [[118, "polars-testing-parametric-column"]], "polars.testing.parametric.series": [[121, "polars-testing-parametric-series"]], "polars.from_numpy": [[89, "polars-from-numpy"]], "polars.exceptions.DuplicateError": [[74, "polars-exceptions-duplicateerror"]], "polars.exceptions.RowsException": [[79, "polars-exceptions-rowsexception"]], "polars.get_index_type": [[94, "polars-get-index-type"]], "polars.DataFrame.clear": [[129, "polars-dataframe-clear"]], "polars.DataFrame.drop": [[134, "polars-dataframe-drop"]], "polars.DataFrame.drop_in_place": [[135, "polars-dataframe-drop-in-place"]], "polars.read_avro": [[97, "polars-read-avro"]], "polars.DataFrame.__dataframe__": [[127, "polars-dataframe-dataframe"]], "polars.testing.parametric.dataframes": [[120, "polars-testing-parametric-dataframes"]], "polars.exceptions.InvalidOperationError": [[75, "polars-exceptions-invalidoperationerror"]], "polars.cut": [[69, "polars-cut"]], "polars.zeros": [[124, "polars-zeros"]], "polars.ones": [[96, "polars-ones"]], "polars.Series.set_sorted": [[854, "polars-series-set-sorted"]], "polars.Series.quantile": [[831, "polars-series-quantile"]], "polars.Series.shape": [[855, "polars-series-shape"]], "polars.Series.sample": [[849, "polars-series-sample"]], "polars.Series.new_from_index": [[824, "polars-series-new-from-index"]], "polars.Series.reverse": [[837, "polars-series-reverse"]], "polars.Series.sin": [[862, "polars-series-sin"]], "polars.Series.n_unique": [[820, "polars-series-n-unique"]], "polars.Series.name": [[821, "polars-series-name"]], "polars.Series.str.count_match": [[872, "polars-series-str-count-match"]], "polars.Series.peak_max": [[827, "polars-series-peak-max"]], "polars.Series.rolling_std": [[845, "polars-series-rolling-std"]], "polars.Series.qcut": [[830, "polars-series-qcut"]], "polars.Series.rolling_skew": [[844, "polars-series-rolling-skew"]], "polars.Series.skew": [[864, "polars-series-skew"]], "polars.Series.rolling_min": [[842, "polars-series-rolling-min"]], "polars.Series.str.ljust": [[882, "polars-series-str-ljust"]], "polars.Series.shift": [[856, "polars-series-shift"]], "polars.Series.nan_min": [[823, "polars-series-nan-min"]], "polars.Series.mode": [[818, "polars-series-mode"]], "polars.Series.str": [[869, "polars-series-str"]], "polars.Series.product": [[829, "polars-series-product"]], "polars.Series.rolling_median": [[841, "polars-series-rolling-median"]], "polars.Series.str.contains": [[871, "polars-series-str-contains"]], "polars.Series.sqrt": [[867, "polars-series-sqrt"]], "polars.Series.str.lengths": [[881, "polars-series-str-lengths"]], "polars.Series.null_count": [[825, "polars-series-null-count"]], "polars.Series.rank": [[832, "polars-series-rank"]], "polars.Series.str.explode": [[876, "polars-series-str-explode"]], "polars.Series.n_chunks": [[819, "polars-series-n-chunks"]], "polars.Series.rechunk": [[833, "polars-series-rechunk"]], "polars.Series.reinterpret": [[834, "polars-series-reinterpret"]], "polars.Series.rolling_quantile": [[843, "polars-series-rolling-quantile"]], "polars.Series.peak_min": [[828, "polars-series-peak-min"]], "polars.Series.rolling_mean": [[840, "polars-series-rolling-mean"]], "polars.Series.sinh": [[863, "polars-series-sinh"]], "polars.Series.series_equal": [[851, "polars-series-series-equal"]], "polars.Series.str.ends_with": [[875, "polars-series-str-ends-with"]], "polars.Series.shuffle": [[860, "polars-series-shuffle"]], "polars.Series.str.lstrip": [[883, "polars-series-str-lstrip"]], "polars.Series.set_at_idx": [[853, "polars-series-set-at-idx"]], "polars.Series.rolling_max": [[839, "polars-series-rolling-max"]], "polars.Series.shift_and_fill": [[857, "polars-series-shift-and-fill"]], "polars.Series.std": [[868, "polars-series-std"]], "polars.Series.set": [[852, "polars-series-set"]], "polars.Series.str.encode": [[874, "polars-series-str-encode"]], "polars.Series.rename": [[835, "polars-series-rename"]], "polars.Series.shrink_to_fit": [[859, "polars-series-shrink-to-fit"]], "polars.Series.rolling_sum": [[846, "polars-series-rolling-sum"]], "polars.Series.sort": [[866, "polars-series-sort"]], "polars.Series.str.concat": [[870, "polars-series-str-concat"]], "polars.Series.min": [[817, "polars-series-min"]], "polars.Series.str.extract_all": [[878, "polars-series-str-extract-all"]], "polars.Series.str.decode": [[873, "polars-series-str-decode"]], "polars.Series.nan_max": [[822, "polars-series-nan-max"]], "polars.Series.rolling_apply": [[838, "polars-series-rolling-apply"]], "polars.Series.str.json_extract": [[879, "polars-series-str-json-extract"]], "polars.Series.shrink_dtype": [[858, "polars-series-shrink-dtype"]], "polars.Series.median": [[816, "polars-series-median"]], "polars.Series.pct_change": [[826, "polars-series-pct-change"]], "polars.Series.rolling_var": [[847, "polars-series-rolling-var"]], "polars.Series.slice": [[865, "polars-series-slice"]], "polars.Series.search_sorted": [[850, "polars-series-search-sorted"]], "polars.Series.str.extract": [[877, "polars-series-str-extract"]], "polars.Series.reshape": [[836, "polars-series-reshape"]], "polars.Series.str.json_path_match": [[880, "polars-series-str-json-path-match"]], "polars.Series.sign": [[861, "polars-series-sign"]], "polars.Series.round": [[848, "polars-series-round"]], "polars.Series.is_between": [[788, "polars-series-is-between"]], "polars.Series.has_validity": [[782, "polars-series-has-validity"]], "polars.Series.limit": [[809, "polars-series-limit"]], "polars.Series.dt.quarter": [[754, "polars-series-dt-quarter"]], "polars.Series.kurtosis": [[807, "polars-series-kurtosis"]], "polars.Series.dt.second": [[757, "polars-series-dt-second"]], "polars.Series.dtype": [[767, "polars-series-dtype"]], "polars.Series.estimated_size": [[769, "polars-series-estimated-size"]], "polars.Series.dt.nanosecond": [[750, "polars-series-dt-nanosecond"]], "polars.Series.ewm_mean": [[770, "polars-series-ewm-mean"]], "polars.Series.dt.offset_by": [[752, "polars-series-dt-offset-by"]], "polars.Series.ewm_std": [[771, "polars-series-ewm-std"]], "polars.Series.fill_nan": [[776, "polars-series-fill-nan"]], "polars.Series.flags": [[779, "polars-series-flags"]], "polars.Series.is_boolean": [[789, "polars-series-is-boolean"]], "polars.Series.is_null": [[800, "polars-series-is-null"]], "polars.Series.get_chunks": [[781, "polars-series-get-chunks"]], "polars.Series.is_duplicated": [[790, "polars-series-is-duplicated"]], "polars.Series.dt.truncate": [[762, "polars-series-dt-truncate"]], "polars.Series.floor": [[780, "polars-series-floor"]], "polars.Series.is_sorted": [[802, "polars-series-is-sorted"]], "polars.Series.dt.minutes": [[748, "polars-series-dt-minutes"]], "polars.Series.dt.round": [[756, "polars-series-dt-round"]], "polars.Series.item": [[806, "polars-series-item"]], "polars.Series.log10": [[811, "polars-series-log10"]], "polars.Series.is_finite": [[792, "polars-series-is-finite"]], "polars.Series.is_nan": [[797, "polars-series-is-nan"]], "polars.Series.mean": [[815, "polars-series-mean"]], "polars.Series.is_numeric": [[801, "polars-series-is-numeric"]], "polars.Series.is_first": [[793, "polars-series-is-first"]], "polars.Series.is_in": [[795, "polars-series-is-in"]], "polars.Series.extend_constant": [[775, "polars-series-extend-constant"]], "polars.Series.log": [[810, "polars-series-log"]], "polars.Series.ewm_var": [[772, "polars-series-ewm-var"]], "polars.Series.dt.seconds": [[758, "polars-series-dt-seconds"]], "polars.Series.dt.month": [[749, "polars-series-dt-month"]], "polars.Series.explode": [[774, "polars-series-explode"]], "polars.Series.is_not_nan": [[798, "polars-series-is-not-nan"]], "polars.Series.map_dict": [[813, "polars-series-map-dict"]], "polars.Series.dt.weekday": [[764, "polars-series-dt-weekday"]], "polars.Series.dt.timestamp": [[761, "polars-series-dt-timestamp"]], "polars.Series.len": [[808, "polars-series-len"]], "polars.Series.dt.week": [[763, "polars-series-dt-week"]], "polars.Series.is_infinite": [[796, "polars-series-is-infinite"]], "polars.Series.hist": [[785, "polars-series-hist"]], "polars.Series.is_unique": [[804, "polars-series-is-unique"]], "polars.Series.hash": [[783, "polars-series-hash"]], "polars.Series.is_not_null": [[799, "polars-series-is-not-null"]], "polars.Series.dt.time": [[760, "polars-series-dt-time"]], "polars.Series.dt.replace_time_zone": [[755, "polars-series-dt-replace-time-zone"]], "polars.Series.is_temporal": [[803, "polars-series-is-temporal"]], "polars.Series.dt.ordinal_day": [[753, "polars-series-dt-ordinal-day"]], "polars.Series.interpolate": [[787, "polars-series-interpolate"]], "polars.Series.is_float": [[794, "polars-series-is-float"]], "polars.Series.lower_bound": [[812, "polars-series-lower-bound"]], "polars.Series.head": [[784, "polars-series-head"]], "polars.Series.inner_dtype": [[786, "polars-series-inner-dtype"]], "polars.Series.dt.with_time_unit": [[765, "polars-series-dt-with-time-unit"]], "polars.Series.max": [[814, "polars-series-max"]], "polars.Series.exp": [[773, "polars-series-exp"]], "polars.Series.is_empty": [[791, "polars-series-is-empty"]], "polars.Series.is_utf8": [[805, "polars-series-is-utf8"]], "polars.Series.dt.year": [[766, "polars-series-dt-year"]], "polars.Series.entropy": [[768, "polars-series-entropy"]], "polars.Series.dt.nanoseconds": [[751, "polars-series-dt-nanoseconds"]], "polars.Series.fill_null": [[777, "polars-series-fill-null"]], "polars.Series.dt.strftime": [[759, "polars-series-dt-strftime"]], "polars.Series.filter": [[778, "polars-series-filter"]], "polars.Series.describe": [[721, "polars-series-describe"]], "polars.Series.cosh": [[714, "polars-series-cosh"]], "polars.Series.arr.sum": [[693, "polars-series-arr-sum"]], "polars.Series.dt.median": [[741, "polars-series-dt-median"]], "polars.Series.cumsum": [[718, "polars-series-cumsum"]], "polars.Series.clip": [[709, "polars-series-clip"]], "polars.Series.dt": [[726, "polars-series-dt"]], "polars.Series.cumulative_eval": [[719, "polars-series-cumulative-eval"]], "polars.Series.arr.mean": [[687, "polars-series-arr-mean"]], "polars.Series.dt.microsecond": [[742, "polars-series-dt-microsecond"]], "polars.Series.arr.reverse": [[689, "polars-series-arr-reverse"]], "polars.Series.dt.mean": [[740, "polars-series-dt-mean"]], "polars.Series.dt.hour": [[735, "polars-series-dt-hour"]], "polars.Series.dt.milliseconds": [[745, "polars-series-dt-milliseconds"]], "polars.Series.dt.minute": [[747, "polars-series-dt-minute"]], "polars.Series.clear": [[708, "polars-series-clear"]], "polars.Series.arr.slice": [[691, "polars-series-arr-slice"]], "polars.Series.arr.max": [[686, "polars-series-arr-max"]], "polars.Series.clip_max": [[710, "polars-series-clip-max"]], "polars.Series.dt.combine": [[728, "polars-series-dt-combine"]], "polars.Series.cos": [[713, "polars-series-cos"]], "polars.Series.dt.max": [[739, "polars-series-dt-max"]], "polars.Series.arr.head": [[682, "polars-series-arr-head"]], "polars.Series.dt.cast_time_unit": [[727, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.date": [[730, "polars-series-dt-date"]], "polars.Series.dt.epoch": [[734, "polars-series-dt-epoch"]], "polars.Series.dt.microseconds": [[743, "polars-series-dt-microseconds"]], "polars.Series.arr.get": [[681, "polars-series-arr-get"]], "polars.Series.arr.sort": [[692, "polars-series-arr-sort"]], "polars.Series.cumprod": [[717, "polars-series-cumprod"]], "polars.Series.dot": [[723, "polars-series-dot"]], "polars.Series.dt.is_leap_year": [[737, "polars-series-dt-is-leap-year"]], "polars.Series.arr.unique": [[697, "polars-series-arr-unique"]], "polars.Series.cast": [[703, "polars-series-cast"]], "polars.Series.cat.set_ordering": [[705, "polars-series-cat-set-ordering"]], "polars.Series.arr.tail": [[694, "polars-series-arr-tail"]], "polars.Series.cut": [[720, "polars-series-cut"]], "polars.Series.drop_nans": [[724, "polars-series-drop-nans"]], "polars.Series.dt.day": [[732, "polars-series-dt-day"]], "polars.Series.cat": [[704, "polars-series-cat"]], "polars.Series.dt.millisecond": [[744, "polars-series-dt-millisecond"]], "polars.Series.arr.shift": [[690, "polars-series-arr-shift"]], "polars.Series.drop_nulls": [[725, "polars-series-drop-nulls"]], "polars.Series.arr.join": [[683, "polars-series-arr-join"]], "polars.Series.bin.contains": [[698, "polars-series-bin-contains"]], "polars.Series.dt.hours": [[736, "polars-series-dt-hours"]], "polars.Series.cummin": [[716, "polars-series-cummin"]], "polars.Series.diff": [[722, "polars-series-diff"]], "polars.Series.arr.take": [[695, "polars-series-arr-take"]], "polars.Series.dt.min": [[746, "polars-series-dt-min"]], "polars.Series.cummax": [[715, "polars-series-cummax"]], "polars.Series.arr.last": [[684, "polars-series-arr-last"]], "polars.Series.dt.days": [[733, "polars-series-dt-days"]], "polars.Series.arr.lengths": [[685, "polars-series-arr-lengths"]], "polars.Series.arr.to_struct": [[696, "polars-series-arr-to-struct"]], "polars.Series.bin.ends_with": [[701, "polars-series-bin-ends-with"]], "polars.Series.bin.starts_with": [[702, "polars-series-bin-starts-with"]], "polars.Series.arr.min": [[688, "polars-series-arr-min"]], "polars.Series.ceil": [[706, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[707, "polars-series-chunk-lengths"]], "polars.Series.arr.first": [[680, "polars-series-arr-first"]], "polars.Series.dt.datetime": [[731, "polars-series-dt-datetime"]], "polars.Series.dt.iso_year": [[738, "polars-series-dt-iso-year"]], "polars.Series.bin.decode": [[699, "polars-series-bin-decode"]], "polars.Series.clip_min": [[711, "polars-series-clip-min"]], "polars.Series.bin.encode": [[700, "polars-series-bin-encode"]], "polars.Series.dt.convert_time_zone": [[729, "polars-series-dt-convert-time-zone"]], "polars.Series.clone": [[712, "polars-series-clone"]], "Computation": [[931, "computation"], [553, "computation"], [241, "computation"]], "polars.Series.top_k": [[919, "polars-series-top-k"]], "polars.Series.to_frame": [[913, "polars-series-to-frame"]], "Miscellaneous": [[936, "miscellaneous"], [650, "miscellaneous"], [564, "miscellaneous"], [558, "miscellaneous"], [246, "miscellaneous"]], "polars.Series.str.parse_int": [[885, "polars-series-str-parse-int"]], "polars.Series.take_every": [[907, "polars-series-take-every"]], "polars.Series.str.split": [[891, "polars-series-str-split"]], "Boolean": [[929, "boolean"], [550, "boolean"]], "Export": [[933, "export"], [243, "export"]], "polars.Series.str.replace": [[886, "polars-series-str-replace"]], "polars.Series.struct.unnest": [[903, "polars-series-struct-unnest"]], "polars.Series.unique": [[920, "polars-series-unique"]], "polars.Series.to_dummies": [[912, "polars-series-to-dummies"]], "polars.Series.unique_counts": [[921, "polars-series-unique-counts"]], "polars.Series.view": [[925, "polars-series-view"]], "polars.Series.value_counts": [[923, "polars-series-value-counts"]], "polars.Series.var": [[924, "polars-series-var"]], "polars.Series.zip_with": [[926, "polars-series-zip-with"]], "polars.Series.to_list": [[915, "polars-series-to-list"]], "polars.Series.take": [[906, "polars-series-take"]], "Categories": [[930, "categories"], [551, "categories"]], "polars.Series.struct.rename_fields": [[902, "polars-series-struct-rename-fields"]], "polars.Series.to_pandas": [[917, "polars-series-to-pandas"]], "polars.Series.time_unit": [[910, "polars-series-time-unit"]], "Testing": [[942, "testing"]], "Asserts": [[942, "asserts"]], "Property-based testing": [[942, "property-based-testing"]], "Strategies": [[942, "strategies"]], "Strategy helpers": [[942, "strategy-helpers"]], "SQL": [[941, "sql"]], "Methods": [[941, "methods"]], "polars.Series.upper_bound": [[922, "polars-series-upper-bound"]], "polars.Series.to_init_repr": [[914, "polars-series-to-init-repr"]], "polars.Series.struct.field": [[900, "polars-series-struct-field"]], "Descriptive": [[932, "descriptive"], [647, "descriptive"], [242, "descriptive"]], "polars.Series.str.split_exact": [[892, "polars-series-str-split-exact"]], "polars.Series.str.rstrip": [[889, "polars-series-str-rstrip"]], "polars.Series.str.splitn": [[893, "polars-series-str-splitn"]], "polars.Series.str.strip": [[895, "polars-series-str-strip"]], "polars.Series.str.replace_all": [[887, "polars-series-str-replace-all"]], "polars.Series.str.starts_with": [[894, "polars-series-str-starts-with"]], "polars.Series.to_physical": [[918, "polars-series-to-physical"]], "Attributes": [[927, "attributes"], [646, "attributes"], [240, "attributes"]], "polars.Series.str.strptime": [[896, "polars-series-str-strptime"]], "polars.Series.str.rjust": [[888, "polars-series-str-rjust"]], "polars.Series.str.n_chars": [[884, "polars-series-str-n-chars"]], "polars.Series.tanh": [[909, "polars-series-tanh"]], "Utils": [[943, "utils"]], "polars.Series.to_numpy": [[916, "polars-series-to-numpy"]], "Struct": [[939, "struct"], [561, "struct"]], "polars.Series.str.to_lowercase": [[897, "polars-series-str-to-lowercase"]], "Series": [[934, "series"]], "String": [[938, "string"], [560, "string"]], "polars.Series.tail": [[905, "polars-series-tail"]], "Temporal": [[940, "temporal"], [562, "temporal"], [248, "temporal"]], "polars.Series.to_arrow": [[911, "polars-series-to-arrow"]], "List": [[935, "list"], [556, "list"]], "polars.Series.tan": [[908, "polars-series-tan"]], "polars.Series.str.slice": [[890, "polars-series-str-slice"]], "polars.Series.str.to_uppercase": [[898, "polars-series-str-to-uppercase"]], "polars.Series.sum": [[904, "polars-series-sum"]], "Binary": [[928, "binary"], [549, "binary"]], "Manipulation/selection": [[937, "manipulation-selection"], [651, "manipulation-selection"], [559, "manipulation-selection"], [247, "manipulation-selection"]], "polars.Series.str.zfill": [[899, "polars-series-str-zfill"]], "polars.Series.struct.fields": [[901, "polars-series-struct-fields"]], "polars.LazyFrame.sum": [[618, "polars-lazyframe-sum"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[635, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[644, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.arccosh": [[660, "polars-series-arccosh"]], "polars.LazyFrame.sink_parquet": [[614, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.sort": [[616, "polars-lazyframe-sort"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[642, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.arg_sort": [[667, "polars-series-arg-sort"]], "GroupBy": [[648, "groupby"], [244, "groupby"]], "polars.LazyFrame.top_k": [[621, "polars-lazyframe-top-k"]], "polars.LazyFrame.with_row_count": [[629, "polars-lazyframe-with-row-count"]], "polars.Series.arr.diff": [[677, "polars-series-arr-diff"]], "polars.LazyFrame.unique": [[622, "polars-lazyframe-unique"]], "polars.Series.arr.eval": [[678, "polars-series-arr-eval"]], "polars.Series.any": [[656, "polars-series-any"]], "polars.Series.abs": [[653, "polars-series-abs"]], "polars.LazyFrame.slice": [[615, "polars-lazyframe-slice"]], "polars.Series.all": [[655, "polars-series-all"]], "polars.Series.arccos": [[659, "polars-series-arccos"]], "Read/write logical plan": [[650, "read-write-logical-plan"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[638, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[639, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.arr.explode": [[679, "polars-series-arr-explode"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[645, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.unnest": [[623, "polars-lazyframe-unnest"]], "polars.Series.arg_true": [[668, "polars-series-arg-true"]], "polars.Series.arr.count_match": [[676, "polars-series-arr-count-match"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[631, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[636, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[634, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.Series.arg_min": [[666, "polars-series-arg-min"]], "polars.LazyFrame.sink_ipc": [[613, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.std": [[617, "polars-lazyframe-std"]], "polars.LazyFrame.take_every": [[620, "polars-lazyframe-take-every"]], "polars.Series.apply": [[658, "polars-series-apply"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[640, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.tail": [[619, "polars-lazyframe-tail"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[641, "polars-lazyframe-groupby-lazygroupby-min"]], "LazyFrame": [[649, "lazyframe"]], "polars.Series.arg_max": [[665, "polars-series-arg-max"]], "polars.Series.arg_unique": [[669, "polars-series-arg-unique"]], "polars.Series.arctan": [[663, "polars-series-arctan"]], "polars.Series.argsort": [[670, "polars-series-argsort"]], "polars.Series.arctanh": [[664, "polars-series-arctanh"]], "polars.LazyFrame.show_graph": [[612, "polars-lazyframe-show-graph"]], "polars.LazyFrame.width": [[626, "polars-lazyframe-width"]], "polars.Series.arr": [[671, "polars-series-arr"]], "polars.LazyFrame.var": [[625, "polars-lazyframe-var"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[643, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.write_json": [[630, "polars-lazyframe-write-json"]], "polars.LazyFrame.with_context": [[628, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[637, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.Series.arr.arg_min": [[673, "polars-series-arr-arg-min"]], "polars.Series.arcsin": [[661, "polars-series-arcsin"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[632, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.Series.arcsinh": [[662, "polars-series-arcsinh"]], "polars.LazyFrame.with_columns": [[627, "polars-lazyframe-with-columns"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[633, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.arr.arg_max": [[672, "polars-series-arr-arg-max"]], "polars.Series.alias": [[654, "polars-series-alias"]], "polars.LazyFrame.update": [[624, "polars-lazyframe-update"]], "polars.Series.arr.concat": [[674, "polars-series-arr-concat"]], "polars.Series.arr.contains": [[675, "polars-series-arr-contains"]], "polars.Series.append": [[657, "polars-series-append"]], "polars.std": [[543, "polars-std"]], "polars.Expr.tail": [[489, "polars-expr-tail"]], "polars.from_epoch": [[526, "polars-from-epoch"]], "polars.pearson_corr": [[537, "polars-pearson-corr"]], "polars.cumfold": [[515, "polars-cumfold"]], "polars.Expr.value_counts": [[499, "polars-expr-value-counts"]], "polars.Expr.struct.field": [[485, "polars-expr-struct-field"]], "polars.Expr.upper_bound": [[498, "polars-expr-upper-bound"]], "polars.repeat": [[540, "polars-repeat"]], "polars.Expr.tan": [[492, "polars-expr-tan"]], "polars.Expr.struct.rename_fields": [[486, "polars-expr-struct-rename-fields"]], "polars.lit": [[530, "polars-lit"]], "polars.Expr.tanh": [[493, "polars-expr-tanh"]], "polars.reduce": [[539, "polars-reduce"]], "polars.all": [[502, "polars-all"]], "polars.Expr.unique_counts": [[497, "polars-expr-unique-counts"]], "polars.map": [[531, "polars-map"]], "polars.datetime": [[519, "polars-datetime"]], "polars.mean": [[533, "polars-mean"]], "polars.max": [[532, "polars-max"]], "polars.groups": [[527, "polars-groups"]], "polars.Expr.var": [[500, "polars-expr-var"]], "polars.Expr.str.to_lowercase": [[482, "polars-expr-str-to-lowercase"]], "polars.min": [[535, "polars-min"]], "polars.median": [[534, "polars-median"]], "polars.format": [[525, "polars-format"]], "polars.apply": [[504, "polars-apply"]], "polars.Expr.str.strptime": [[481, "polars-expr-str-strptime"]], "polars.spearman_rank_corr": [[542, "polars-spearman-rank-corr"]], "polars.avg": [[507, "polars-avg"]], "polars.concat_list": [[510, "polars-concat-list"]], "polars.Expr.take_every": [[491, "polars-expr-take-every"]], "polars.Expr.sum": [[488, "polars-expr-sum"]], "polars.Expr.str.splitn": [[478, "polars-expr-str-splitn"]], "polars.quantile": [[538, "polars-quantile"]], "polars.col": [[509, "polars-col"]], "polars.Expr.to_physical": [[494, "polars-expr-to-physical"]], "polars.cumsum": [[517, "polars-cumsum"]], "polars.element": [[521, "polars-element"]], "polars.first": [[523, "polars-first"]], "polars.Expr.unique": [[496, "polars-expr-unique"]], "polars.coalesce": [[508, "polars-coalesce"]], "polars.n_unique": [[536, "polars-n-unique"]], "polars.arg_sort_by": [[506, "polars-arg-sort-by"]], "polars.cumreduce": [[516, "polars-cumreduce"]], "polars.Expr.suffix": [[487, "polars-expr-suffix"]], "polars.corr": [[512, "polars-corr"]], "polars.any": [[503, "polars-any"]], "polars.list": [[529, "polars-list"]], "polars.select": [[541, "polars-select"]], "polars.Expr.str.strip": [[480, "polars-expr-str-strip"]], "polars.exclude": [[522, "polars-exclude"]], "polars.Expr.take": [[490, "polars-expr-take"]], "polars.Expr.str.split": [[476, "polars-expr-str-split"]], "polars.Expr.str.starts_with": [[479, "polars-expr-str-starts-with"]], "polars.arange": [[505, "polars-arange"]], "polars.Expr.str.split_exact": [[477, "polars-expr-str-split-exact"]], "polars.cov": [[514, "polars-cov"]], "polars.concat_str": [[511, "polars-concat-str"]], "polars.duration": [[520, "polars-duration"]], "polars.Expr.where": [[501, "polars-expr-where"]], "polars.count": [[513, "polars-count"]], "polars.fold": [[524, "polars-fold"]], "polars.Expr.str.to_uppercase": [[483, "polars-expr-str-to-uppercase"]], "polars.Expr.top_k": [[495, "polars-expr-top-k"]], "polars.date": [[518, "polars-date"]], "polars.Expr.str.zfill": [[484, "polars-expr-str-zfill"]], "polars.head": [[528, "polars-head"]], "polars.Expr.rolling_sum": [[436, "polars-expr-rolling-sum"]], "polars.Expr.reshape": [[426, "polars-expr-reshape"]], "polars.Expr.rolling_apply": [[428, "polars-expr-rolling-apply"]], "polars.Expr.sort_by": [[452, "polars-expr-sort-by"]], "polars.Expr.str.ends_with": [[460, "polars-expr-str-ends-with"]], "polars.Expr.sign": [[446, "polars-expr-sign"]], "polars.Expr.sort": [[451, "polars-expr-sort"]], "polars.Expr.str.lengths": [[466, "polars-expr-str-lengths"]], "polars.Expr.rank": [[422, "polars-expr-rank"]], "polars.Expr.rechunk": [[423, "polars-expr-rechunk"]], "polars.Expr.quantile": [[421, "polars-expr-quantile"]], "polars.Expr.rolling_median": [[431, "polars-expr-rolling-median"]], "polars.Expr.mode": [[410, "polars-expr-mode"]], "polars.Expr.str.decode": [[458, "polars-expr-str-decode"]], "polars.Expr.over": [[415, "polars-expr-over"]], "polars.Expr.str.rjust": [[473, "polars-expr-str-rjust"]], "polars.Expr.rolling_quantile": [[433, "polars-expr-rolling-quantile"]], "polars.Expr.round": [[438, "polars-expr-round"]], "polars.Expr.sinh": [[448, "polars-expr-sinh"]], "polars.Expr.repeat_by": [[425, "polars-expr-repeat-by"]], "polars.Expr.str.json_path_match": [[465, "polars-expr-str-json-path-match"]], "polars.Expr.sin": [[447, "polars-expr-sin"]], "polars.Expr.n_unique": [[411, "polars-expr-n-unique"]], "polars.Expr.reinterpret": [[424, "polars-expr-reinterpret"]], "polars.Expr.shift_and_fill": [[443, "polars-expr-shift-and-fill"]], "polars.Expr.skew": [[449, "polars-expr-skew"]], "polars.Expr.rolling_min": [[432, "polars-expr-rolling-min"]], "polars.Expr.str.concat": [[455, "polars-expr-str-concat"]], "polars.Expr.shift": [[442, "polars-expr-shift"]], "polars.Expr.str.json_extract": [[464, "polars-expr-str-json-extract"]], "polars.Expr.str.extract": [[462, "polars-expr-str-extract"]], "polars.Expr.sample": [[439, "polars-expr-sample"]], "polars.Expr.rolling_var": [[437, "polars-expr-rolling-var"]], "polars.Expr.str.parse_int": [[470, "polars-expr-str-parse-int"]], "polars.Expr.product": [[420, "polars-expr-product"]], "polars.Expr.str.replace": [[471, "polars-expr-str-replace"]], "polars.Expr.nan_max": [[412, "polars-expr-nan-max"]], "polars.Expr.pow": [[418, "polars-expr-pow"]], "polars.Expr.reverse": [[427, "polars-expr-reverse"]], "polars.Expr.null_count": [[414, "polars-expr-null-count"]], "polars.Expr.sqrt": [[453, "polars-expr-sqrt"]], "polars.Expr.rolling_mean": [[430, "polars-expr-rolling-mean"]], "polars.Expr.str.count_match": [[457, "polars-expr-str-count-match"]], "polars.Expr.str.lstrip": [[468, "polars-expr-str-lstrip"]], "polars.Expr.str.replace_all": [[472, "polars-expr-str-replace-all"]], "polars.Expr.str.extract_all": [[463, "polars-expr-str-extract-all"]], "polars.Expr.str.rstrip": [[474, "polars-expr-str-rstrip"]], "polars.Expr.pipe": [[417, "polars-expr-pipe"]], "polars.Expr.str.slice": [[475, "polars-expr-str-slice"]], "polars.Expr.rolling_skew": [[434, "polars-expr-rolling-skew"]], "polars.Expr.slice": [[450, "polars-expr-slice"]], "polars.Expr.nan_min": [[413, "polars-expr-nan-min"]], "polars.Expr.rolling_std": [[435, "polars-expr-rolling-std"]], "polars.Expr.shrink_dtype": [[444, "polars-expr-shrink-dtype"]], "polars.Expr.std": [[454, "polars-expr-std"]], "polars.Expr.str.encode": [[459, "polars-expr-str-encode"]], "polars.Expr.str.ljust": [[467, "polars-expr-str-ljust"]], "polars.Expr.str.explode": [[461, "polars-expr-str-explode"]], "polars.Expr.str.contains": [[456, "polars-expr-str-contains"]], "polars.Expr.str.n_chars": [[469, "polars-expr-str-n-chars"]], "polars.Expr.min": [[409, "polars-expr-min"]], "polars.Expr.meta.undo_aliases": [[408, "polars-expr-meta-undo-aliases"]], "polars.Expr.prefix": [[419, "polars-expr-prefix"]], "polars.Expr.pct_change": [[416, "polars-expr-pct-change"]], "polars.Expr.rolling_max": [[429, "polars-expr-rolling-max"]], "polars.Expr.shuffle": [[445, "polars-expr-shuffle"]], "polars.Expr.search_sorted": [[440, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[441, "polars-expr-set-sorted"]], "polars.Expr.floor": [[370, "polars-expr-floor"]], "polars.Expr.dt.seconds": [[348, "polars-expr-dt-seconds"]], "polars.Expr.dt.nanosecond": [[340, "polars-expr-dt-nanosecond"]], "polars.Expr.extend_constant": [[364, "polars-expr-extend-constant"]], "polars.Expr.ewm_var": [[360, "polars-expr-ewm-var"]], "polars.Expr.filter": [[367, "polars-expr-filter"]], "polars.Expr.inspect": [[374, "polars-expr-inspect"]], "polars.Expr.ewm_mean": [[358, "polars-expr-ewm-mean"]], "polars.Expr.map_dict": [[399, "polars-expr-map-dict"]], "polars.Expr.meta.root_names": [[407, "polars-expr-meta-root-names"]], "polars.Expr.meta.is_regex_projection": [[404, "polars-expr-meta-is-regex-projection"]], "polars.Expr.is_not": [[383, "polars-expr-is-not"]], "polars.Expr.is_not_nan": [[384, "polars-expr-is-not-nan"]], "polars.Expr.meta.has_multiple_outputs": [[403, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.dt.offset_by": [[342, "polars-expr-dt-offset-by"]], "polars.Expr.len": [[391, "polars-expr-len"]], "polars.Expr.dt.week": [[353, "polars-expr-dt-week"]], "polars.Expr.interpolate": [[375, "polars-expr-interpolate"]], "polars.Expr.is_not_null": [[385, "polars-expr-is-not-null"]], "polars.Expr.meta.pop": [[406, "polars-expr-meta-pop"]], "polars.Expr.is_first": [[379, "polars-expr-is-first"]], "polars.Expr.dt.nanoseconds": [[341, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.second": [[347, "polars-expr-dt-second"]], "polars.Expr.fill_null": [[366, "polars-expr-fill-null"]], "polars.Expr.dt.year": [[356, "polars-expr-dt-year"]], "polars.Expr.map": [[397, "polars-expr-map"]], "polars.Expr.meta.output_name": [[405, "polars-expr-meta-output-name"]], "polars.Expr.last": [[390, "polars-expr-last"]], "polars.Expr.exp": [[362, "polars-expr-exp"]], "polars.Expr.list": [[393, "polars-expr-list"]], "polars.Expr.is_null": [[386, "polars-expr-is-null"]], "polars.Expr.head": [[373, "polars-expr-head"]], "polars.Expr.is_duplicated": [[377, "polars-expr-is-duplicated"]], "polars.Expr.is_in": [[380, "polars-expr-is-in"]], "polars.Expr.is_infinite": [[381, "polars-expr-is-infinite"]], "polars.Expr.dt.ordinal_day": [[343, "polars-expr-dt-ordinal-day"]], "polars.Expr.flatten": [[369, "polars-expr-flatten"]], "polars.Expr.is_unique": [[387, "polars-expr-is-unique"]], "polars.Expr.hash": [[372, "polars-expr-hash"]], "polars.Expr.dt.with_time_unit": [[355, "polars-expr-dt-with-time-unit"]], "polars.Expr.is_between": [[376, "polars-expr-is-between"]], "polars.Expr.is_nan": [[382, "polars-expr-is-nan"]], "polars.Expr.dt.quarter": [[344, "polars-expr-dt-quarter"]], "polars.Expr.exclude": [[361, "polars-expr-exclude"]], "polars.Expr.log10": [[395, "polars-expr-log10"]], "polars.Expr.max": [[400, "polars-expr-max"]], "polars.Expr.explode": [[363, "polars-expr-explode"]], "polars.Expr.dt.replace_time_zone": [[345, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.weekday": [[354, "polars-expr-dt-weekday"]], "polars.Expr.dt.round": [[346, "polars-expr-dt-round"]], "polars.Expr.kurtosis": [[389, "polars-expr-kurtosis"]], "polars.Expr.limit": [[392, "polars-expr-limit"]], "polars.Expr.forward_fill": [[371, "polars-expr-forward-fill"]], "polars.Expr.dt.time": [[350, "polars-expr-dt-time"]], "polars.Expr.dt.timestamp": [[351, "polars-expr-dt-timestamp"]], "polars.Expr.fill_nan": [[365, "polars-expr-fill-nan"]], "polars.Expr.is_finite": [[378, "polars-expr-is-finite"]], "polars.Expr.log": [[394, "polars-expr-log"]], "polars.Expr.dt.truncate": [[352, "polars-expr-dt-truncate"]], "polars.Expr.first": [[368, "polars-expr-first"]], "polars.Expr.keep_name": [[388, "polars-expr-keep-name"]], "polars.Expr.dt.strftime": [[349, "polars-expr-dt-strftime"]], "polars.Expr.ewm_std": [[359, "polars-expr-ewm-std"]], "polars.Expr.lower_bound": [[396, "polars-expr-lower-bound"]], "polars.Expr.median": [[402, "polars-expr-median"]], "polars.Expr.map_alias": [[398, "polars-expr-map-alias"]], "polars.Expr.mean": [[401, "polars-expr-mean"]], "polars.Expr.entropy": [[357, "polars-expr-entropy"]], "polars.Expr.cat.set_ordering": [[303, "polars-expr-cat-set-ordering"]], "polars.Expr.bin.contains": [[297, "polars-expr-bin-contains"]], "polars.Expr.arr.explode": [[277, "polars-expr-arr-explode"]], "polars.Expr.cumulative_eval": [[316, "polars-expr-cumulative-eval"]], "polars.Expr.count": [[310, "polars-expr-count"]], "polars.Expr.cumsum": [[315, "polars-expr-cumsum"]], "polars.Expr.arr.concat": [[272, "polars-expr-arr-concat"]], "polars.Expr.arr.max": [[284, "polars-expr-arr-max"]], "polars.Expr.arr.join": [[281, "polars-expr-arr-join"]], "polars.Expr.cumprod": [[314, "polars-expr-cumprod"]], "polars.Expr.arr.shift": [[288, "polars-expr-arr-shift"]], "polars.Expr.cos": [[308, "polars-expr-cos"]], "polars.Expr.dt.day": [[326, "polars-expr-dt-day"]], "polars.Expr.arr.unique": [[295, "polars-expr-arr-unique"]], "polars.Expr.bin.starts_with": [[301, "polars-expr-bin-starts-with"]], "polars.Expr.dt.month": [[339, "polars-expr-dt-month"]], "polars.Expr.dt.combine": [[322, "polars-expr-dt-combine"]], "polars.Expr.dt.is_leap_year": [[331, "polars-expr-dt-is-leap-year"]], "polars.Expr.diff": [[317, "polars-expr-diff"]], "polars.Expr.arr.min": [[286, "polars-expr-arr-min"]], "polars.Expr.arr.last": [[282, "polars-expr-arr-last"]], "polars.Expr.backward_fill": [[296, "polars-expr-backward-fill"]], "polars.Expr.dt.millisecond": [[335, "polars-expr-dt-millisecond"]], "polars.Expr.arr.lengths": [[283, "polars-expr-arr-lengths"]], "polars.Expr.arr.reverse": [[287, "polars-expr-arr-reverse"]], "polars.Expr.arr.to_struct": [[294, "polars-expr-arr-to-struct"]], "polars.Expr.clip_min": [[307, "polars-expr-clip-min"]], "polars.Expr.arr.get": [[279, "polars-expr-arr-get"]], "polars.Expr.cosh": [[309, "polars-expr-cosh"]], "polars.Expr.cumcount": [[311, "polars-expr-cumcount"]], "polars.Expr.arr.tail": [[292, "polars-expr-arr-tail"]], "polars.Expr.dt.datetime": [[325, "polars-expr-dt-datetime"]], "polars.Expr.dt.microseconds": [[334, "polars-expr-dt-microseconds"]], "polars.Expr.cummax": [[312, "polars-expr-cummax"]], "polars.Expr.arr.mean": [[285, "polars-expr-arr-mean"]], "polars.Expr.dt.days": [[327, "polars-expr-dt-days"]], "polars.Expr.dt.epoch": [[328, "polars-expr-dt-epoch"]], "polars.Expr.dot": [[318, "polars-expr-dot"]], "polars.Expr.dt.milliseconds": [[336, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.minutes": [[338, "polars-expr-dt-minutes"]], "polars.Expr.cummin": [[313, "polars-expr-cummin"]], "polars.Expr.dt.minute": [[337, "polars-expr-dt-minute"]], "polars.Expr.dt.date": [[324, "polars-expr-dt-date"]], "polars.Expr.bin.decode": [[298, "polars-expr-bin-decode"]], "polars.Expr.arr.count_match": [[274, "polars-expr-arr-count-match"]], "polars.Expr.dt.microsecond": [[333, "polars-expr-dt-microsecond"]], "polars.Expr.arr.sort": [[290, "polars-expr-arr-sort"]], "polars.Expr.arr.eval": [[276, "polars-expr-arr-eval"]], "polars.Expr.arr.slice": [[289, "polars-expr-arr-slice"]], "polars.Expr.arr.sum": [[291, "polars-expr-arr-sum"]], "polars.Expr.ceil": [[304, "polars-expr-ceil"]], "polars.Expr.arr.first": [[278, "polars-expr-arr-first"]], "polars.Expr.clip_max": [[306, "polars-expr-clip-max"]], "polars.Expr.dt.iso_year": [[332, "polars-expr-dt-iso-year"]], "polars.Expr.arr.contains": [[273, "polars-expr-arr-contains"]], "polars.Expr.dt.cast_time_unit": [[321, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.head": [[280, "polars-expr-arr-head"]], "polars.Expr.bin.encode": [[299, "polars-expr-bin-encode"]], "polars.Expr.clip": [[305, "polars-expr-clip"]], "polars.Expr.drop_nans": [[319, "polars-expr-drop-nans"]], "polars.Expr.cast": [[302, "polars-expr-cast"]], "polars.Expr.arr.take": [[293, "polars-expr-arr-take"]], "polars.Expr.arr.diff": [[275, "polars-expr-arr-diff"]], "polars.Expr.dt.convert_time_zone": [[323, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.hour": [[329, "polars-expr-dt-hour"]], "polars.Expr.dt.hours": [[330, "polars-expr-dt-hours"]], "polars.Expr.bin.ends_with": [[300, "polars-expr-bin-ends-with"]], "polars.Expr.drop_nulls": [[320, "polars-expr-drop-nulls"]], "Expressions": [[555, "expressions"]], "Window": [[563, "window"]], "polars.LazyFrame.join_asof": [[591, "polars-lazyframe-join-asof"]], "polars.LazyFrame.limit": [[594, "polars-lazyframe-limit"]], "polars.LazyFrame.min": [[601, "polars-lazyframe-min"]], "polars.LazyFrame.profile": [[603, "polars-lazyframe-profile"]], "polars.LazyFrame.from_json": [[583, "polars-lazyframe-from-json"]], "polars.LazyFrame.explode": [[577, "polars-lazyframe-explode"]], "polars.LazyFrame.shift_and_fill": [[611, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.read_json": [[605, "polars-lazyframe-read-json"]], "polars.LazyFrame.head": [[587, "polars-lazyframe-head"]], "polars.LazyFrame.drop_nulls": [[574, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.melt": [[599, "polars-lazyframe-melt"]], "polars.LazyFrame.pipe": [[602, "polars-lazyframe-pipe"]], "Functions": [[564, "functions"], [554, "functions"]], "Conversion": [[564, "conversion"]], "Eager/Lazy functions": [[564, "eager-lazy-functions"]], "Parallelization": [[564, "parallelization"]], "StringCache": [[564, "stringcache"]], "polars.LazyFrame.last": [[592, "polars-lazyframe-last"]], "API reference": [[565, "api-reference"]], "polars.LazyFrame.groupby_dynamic": [[585, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.max": [[596, "polars-lazyframe-max"]], "polars.LazyFrame.groupby_rolling": [[586, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.lazy": [[593, "polars-lazyframe-lazy"]], "polars.LazyFrame.merge_sorted": [[600, "polars-lazyframe-merge-sorted"]], "polars.tail": [[546, "polars-tail"]], "polars.when": [[548, "polars-when"]], "polars.LazyFrame.interpolate": [[589, "polars-lazyframe-interpolate"]], "polars.LazyFrame.schema": [[608, "polars-lazyframe-schema"]], "polars.LazyFrame.drop": [[573, "polars-lazyframe-drop"]], "polars.LazyFrame.first": [[582, "polars-lazyframe-first"]], "polars.LazyFrame.fill_null": [[580, "polars-lazyframe-fill-null"]], "polars.LazyFrame.join": [[590, "polars-lazyframe-join"]], "polars.LazyFrame.quantile": [[604, "polars-lazyframe-quantile"]], "polars.LazyFrame.explain": [[576, "polars-lazyframe-explain"]], "polars.sum": [[545, "polars-sum"]], "polars.LazyFrame.clear": [[569, "polars-lazyframe-clear"]], "polars.LazyFrame.shift": [[610, "polars-lazyframe-shift"]], "Columns / names": [[552, "columns-names"]], "polars.LazyFrame.cache": [[568, "polars-lazyframe-cache"]], "polars.LazyFrame.reverse": [[607, "polars-lazyframe-reverse"]], "Meta": [[557, "meta"]], "polars.struct": [[544, "polars-struct"]], "Input/output": [[566, "input-output"]], "CSV": [[566, "csv"]], "Feather/ IPC": [[566, "feather-ipc"]], "Parquet": [[566, "parquet"]], "Database": [[566, "database"]], "JSON": [[566, "json"]], "AVRO": [[566, "avro"]], "Excel": [[566, "excel"]], "Delta Lake": [[566, "delta-lake"]], "Datasets": [[566, "datasets"]], "BatchedCsvReader": [[566, "batchedcsvreader"]], "polars.LazyFrame.fetch": [[578, "polars-lazyframe-fetch"]], "polars.LazyFrame.median": [[598, "polars-lazyframe-median"]], "polars.LazyFrame.map": [[595, "polars-lazyframe-map"]], "polars.var": [[547, "polars-var"]], "polars.LazyFrame.rename": [[606, "polars-lazyframe-rename"]], "polars.LazyFrame.clone": [[570, "polars-lazyframe-clone"]], "polars.LazyFrame.fill_nan": [[579, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.dtypes": [[575, "polars-lazyframe-dtypes"]], "polars.LazyFrame.filter": [[581, "polars-lazyframe-filter"]], "polars.LazyFrame.groupby": [[584, "polars-lazyframe-groupby"]], "polars.LazyFrame.select": [[609, "polars-lazyframe-select"]], "polars.LazyFrame.collect": [[571, "polars-lazyframe-collect"]], "polars.LazyFrame.columns": [[572, "polars-lazyframe-columns"]], "polars.LazyFrame.inspect": [[588, "polars-lazyframe-inspect"]], "polars.LazyFrame.mean": [[597, "polars-lazyframe-mean"]], "polars.DataFrame.mean": [[170, "polars-dataframe-mean"]], "polars.DataFrame.partition_by": [[178, "polars-dataframe-partition-by"]], "polars.DataFrame.hash_rows": [[153, "polars-dataframe-hash-rows"]], "polars.DataFrame.shape": [[193, "polars-dataframe-shape"]], "polars.DataFrame.pipe": [[179, "polars-dataframe-pipe"]], "polars.DataFrame.item": [[162, "polars-dataframe-item"]], "polars.DataFrame.get_column": [[147, "polars-dataframe-get-column"]], "polars.DataFrame.replace": [[185, "polars-dataframe-replace"]], "polars.DataFrame.max": [[169, "polars-dataframe-max"]], "polars.DataFrame.groupby_dynamic": [[151, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.row": [[188, "polars-dataframe-row"]], "polars.DataFrame.median": [[171, "polars-dataframe-median"]], "polars.DataFrame.merge_sorted": [[173, "polars-dataframe-merge-sorted"]], "polars.DataFrame.select": [[192, "polars-dataframe-select"]], "polars.DataFrame.glimpse": [[149, "polars-dataframe-glimpse"]], "polars.DataFrame.drop_nulls": [[136, "polars-dataframe-drop-nulls"]], "polars.DataFrame.groupby": [[150, "polars-dataframe-groupby"]], "polars.DataFrame.interpolate": [[158, "polars-dataframe-interpolate"]], "polars.DataFrame.fold": [[145, "polars-dataframe-fold"]], "polars.DataFrame.join": [[165, "polars-dataframe-join"]], "polars.DataFrame.join_asof": [[166, "polars-dataframe-join-asof"]], "polars.DataFrame.product": [[181, "polars-dataframe-product"]], "polars.DataFrame.is_empty": [[160, "polars-dataframe-is-empty"]], "polars.DataFrame.sum": [[200, "polars-dataframe-sum"]], "polars.DataFrame.rows": [[189, "polars-dataframe-rows"]], "polars.DataFrame.lazy": [[167, "polars-dataframe-lazy"]], "polars.DataFrame.extend": [[140, "polars-dataframe-extend"]], "polars.DataFrame.n_unique": [[176, "polars-dataframe-n-unique"]], "polars.DataFrame.sort": [[198, "polars-dataframe-sort"]], "polars.DataFrame.is_duplicated": [[159, "polars-dataframe-is-duplicated"]], "polars.DataFrame.fill_nan": [[141, "polars-dataframe-fill-nan"]], "polars.DataFrame.replace_at_idx": [[186, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.tail": [[201, "polars-dataframe-tail"]], "polars.DataFrame.estimated_size": [[138, "polars-dataframe-estimated-size"]], "polars.DataFrame.filter": [[143, "polars-dataframe-filter"]], "polars.DataFrame.groupby_rolling": [[152, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.get_columns": [[148, "polars-dataframe-get-columns"]], "polars.DataFrame.pivot": [[180, "polars-dataframe-pivot"]], "polars.DataFrame.limit": [[168, "polars-dataframe-limit"]], "polars.DataFrame.null_count": [[177, "polars-dataframe-null-count"]], "polars.DataFrame.rename": [[184, "polars-dataframe-rename"]], "polars.DataFrame.shrink_to_fit": [[196, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.std": [[199, "polars-dataframe-std"]], "polars.DataFrame.dtypes": [[137, "polars-dataframe-dtypes"]], "polars.DataFrame.frame_equal": [[146, "polars-dataframe-frame-equal"]], "polars.DataFrame.head": [[154, "polars-dataframe-head"]], "polars.DataFrame.iter_slices": [[164, "polars-dataframe-iter-slices"]], "polars.DataFrame.explode": [[139, "polars-dataframe-explode"]], "polars.DataFrame.shift_and_fill": [[195, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.take_every": [[202, "polars-dataframe-take-every"]], "polars.DataFrame.sample": [[190, "polars-dataframe-sample"]], "polars.DataFrame.fill_null": [[142, "polars-dataframe-fill-null"]], "polars.DataFrame.height": [[155, "polars-dataframe-height"]], "polars.DataFrame.is_unique": [[161, "polars-dataframe-is-unique"]], "polars.DataFrame.iter_rows": [[163, "polars-dataframe-iter-rows"]], "polars.DataFrame.quantile": [[182, "polars-dataframe-quantile"]], "polars.DataFrame.min": [[174, "polars-dataframe-min"]], "polars.DataFrame.rechunk": [[183, "polars-dataframe-rechunk"]], "polars.DataFrame.n_chunks": [[175, "polars-dataframe-n-chunks"]], "polars.DataFrame.reverse": [[187, "polars-dataframe-reverse"]], "polars.DataFrame.slice": [[197, "polars-dataframe-slice"]], "polars.DataFrame.to_arrow": [[203, "polars-dataframe-to-arrow"]], "polars.DataFrame.hstack": [[156, "polars-dataframe-hstack"]], "polars.DataFrame.shift": [[194, "polars-dataframe-shift"]], "polars.DataFrame.schema": [[191, "polars-dataframe-schema"]], "polars.DataFrame.insert_at_idx": [[157, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.find_idx_by_name": [[144, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.melt": [[172, "polars-dataframe-melt"]], "polars.dataframe.groupby.GroupBy.__iter__": [[224, "polars-dataframe-groupby-groupby-iter"]], "polars.dataframe.groupby.GroupBy.sum": [[238, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.arg_unique": [[268, "polars-expr-arg-unique"]], "polars.dataframe.groupby.GroupBy.max": [[232, "polars-dataframe-groupby-groupby-max"]], "polars.DataFrame.to_pandas": [[209, "polars-dataframe-to-pandas"]], "polars.dataframe.groupby.GroupBy.min": [[235, "polars-dataframe-groupby-groupby-min"]], "Exceptions": [[249, "exceptions"]], "polars.Expr.arg_max": [[264, "polars-expr-arg-max"]], "polars.DataFrame.with_columns": [[222, "polars-dataframe-with-columns"]], "polars.DataFrame.to_dummies": [[206, "polars-dataframe-to-dummies"]], "polars.dataframe.groupby.GroupBy.n_unique": [[236, "polars-dataframe-groupby-groupby-n-unique"]], "polars.dataframe.groupby.GroupBy.first": [[229, "polars-dataframe-groupby-groupby-first"]], "polars.dataframe.groupby.GroupBy.tail": [[239, "polars-dataframe-groupby-groupby-tail"]], "Data types": [[248, "data-types"]], "Numeric": [[248, "numeric"]], "Nested": [[248, "nested"]], "Other": [[248, "other"]], "polars.DataFrame.with_row_count": [[223, "polars-dataframe-with-row-count"]], "polars.Expr.arcsin": [[260, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[261, "polars-expr-arcsinh"]], "polars.Expr.arg_min": [[265, "polars-expr-arg-min"]], "polars.dataframe.groupby.GroupBy.agg": [[225, "polars-dataframe-groupby-groupby-agg"]], "polars.dataframe.groupby.GroupBy.all": [[226, "polars-dataframe-groupby-groupby-all"]], "polars.DataFrame.to_struct": [[211, "polars-dataframe-to-struct"]], "polars.dataframe.groupby.GroupBy.quantile": [[237, "polars-dataframe-groupby-groupby-quantile"]], "polars.DataFrame.var": [[219, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.last": [[231, "polars-dataframe-groupby-groupby-last"]], "polars.DataFrame.to_dicts": [[205, "polars-dataframe-to-dicts"]], "polars.DataFrame.width": [[221, "polars-dataframe-width"]], "polars.DataFrame.top_k": [[212, "polars-dataframe-top-k"]], "polars.dataframe.groupby.GroupBy.count": [[228, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.agg_groups": [[252, "polars-expr-agg-groups"]], "polars.Expr.arr.arg_min": [[271, "polars-expr-arr-arg-min"]], "polars.dataframe.groupby.GroupBy.head": [[230, "polars-dataframe-groupby-groupby-head"]], "polars.dataframe.groupby.GroupBy.median": [[234, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.append": [[256, "polars-expr-append"]], "polars.Expr.arr.arg_max": [[270, "polars-expr-arr-arg-max"]], "polars.DataFrame.to_series": [[210, "polars-dataframe-to-series"]], "polars.DataFrame.transpose": [[213, "polars-dataframe-transpose"]], "polars.dataframe.groupby.GroupBy.mean": [[233, "polars-dataframe-groupby-groupby-mean"]], "DataFrame": [[245, "dataframe"]], "polars.DataFrame.vstack": [[220, "polars-dataframe-vstack"]], "polars.Expr.arctan": [[262, "polars-expr-arctan"]], "polars.Expr.argsort": [[269, "polars-expr-argsort"]], "polars.DataFrame.to_dict": [[204, "polars-dataframe-to-dict"]], "polars.DataFrame.unnest": [[215, "polars-dataframe-unnest"]], "polars.Expr.arctanh": [[263, "polars-expr-arctanh"]], "polars.Expr.arg_true": [[267, "polars-expr-arg-true"]], "polars.Expr.alias": [[253, "polars-expr-alias"]], "polars.Expr.apply": [[257, "polars-expr-apply"]], "polars.Expr.all": [[254, "polars-expr-all"]], "polars.DataFrame.unstack": [[216, "polars-dataframe-unstack"]], "polars.DataFrame.upsample": [[218, "polars-dataframe-upsample"]], "polars.Expr.any": [[255, "polars-expr-any"]], "polars.DataFrame.update": [[217, "polars-dataframe-update"]], "polars.Expr.arccosh": [[259, "polars-expr-arccosh"]], "polars.DataFrame.unique": [[214, "polars-dataframe-unique"]], "polars.dataframe.groupby.GroupBy.apply": [[227, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.abs": [[251, "polars-expr-abs"]], "polars.DataFrame.to_numpy": [[208, "polars-dataframe-to-numpy"]], "polars.Expr.arg_sort": [[266, "polars-expr-arg-sort"]], "polars.DataFrame.to_init_repr": [[207, "polars-dataframe-to-init-repr"]], "polars.Expr.arccos": [[258, "polars-expr-arccos"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "stringcache (class in polars)": [[51, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__"]], "struct (class in polars)": [[52, "polars.Struct"]], "__init__() (polars.struct method)": [[52, "polars.Struct.__init__"]], "time (class in polars)": [[53, "polars.Time"]], "__init__() (polars.time method)": [[53, "polars.Time.__init__"]], "uint16 (class in polars)": [[54, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[54, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[55, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[55, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[56, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[56, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[57, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[57, "polars.UInt8.__init__"]], "unknown (class in polars)": [[58, "polars.Unknown"]], "__init__() (polars.unknown method)": [[58, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[59, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[59, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[60, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[61, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[62, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[63, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[64, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[65, "polars.arg_where"]], "build_info() (in module polars)": [[66, "polars.build_info"]], "collect_all() (in module polars)": [[67, "polars.collect_all"]], "concat() (in module polars)": [[68, "polars.concat"]], "cut() (in module polars)": [[69, "polars.cut"]], "date_range() (in module polars)": [[70, "polars.date_range"]], "arrowerror": [[71, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[72, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[73, "polars.exceptions.ComputeError"]], "duplicateerror": [[74, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[75, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[76, "polars.exceptions.NoDataError"]], "norowsreturned": [[77, "polars.exceptions.NoRowsReturned"]], "panicexception": [[78, "polars.exceptions.PanicException"]], "rowsexception": [[79, "polars.exceptions.RowsException"]], "schemaerror": [[80, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[81, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[82, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[83, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[84, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[85, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[86, "polars.from_dataframe"]], "from_dict() (in module polars)": [[87, "polars.from_dict"]], "from_dicts() (in module polars)": [[88, "polars.from_dicts"]], "from_numpy() (in module polars)": [[89, "polars.from_numpy"]], "from_pandas() (in module polars)": [[90, "polars.from_pandas"]], "from_records() (in module polars)": [[91, "polars.from_records"]], "from_repr() (in module polars)": [[92, "polars.from_repr"]], "get_dummies() (in module polars)": [[93, "polars.get_dummies"]], "get_index_type() (in module polars)": [[94, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[95, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[96, "polars.ones"]], "read_avro() (in module polars)": [[97, "polars.read_avro"]], "read_csv() (in module polars)": [[98, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[99, "polars.read_csv_batched"]], "read_database() (in module polars)": [[100, "polars.read_database"]], "read_delta() (in module polars)": [[101, "polars.read_delta"]], "read_excel() (in module polars)": [[102, "polars.read_excel"]], "read_ipc() (in module polars)": [[103, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[104, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[105, "polars.read_json"]], "read_ndjson() (in module polars)": [[106, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[107, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[108, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[109, "polars.scan_csv"]], "scan_delta() (in module polars)": [[110, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[111, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[112, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[113, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[114, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[115, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[116, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[117, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[118, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[118, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[119, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[122, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[123, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[124, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[127, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[128, "polars.DataFrame.apply"]], "clear() (polars.dataframe method)": [[129, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[130, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[131, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[132, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[133, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[134, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[135, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[136, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[137, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[138, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[139, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[140, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[141, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[142, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[143, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[144, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[145, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[146, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[147, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[148, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[149, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[150, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[151, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[152, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[153, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[154, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[155, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[156, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[157, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[158, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[159, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[160, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[161, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[162, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[163, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[164, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[165, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[166, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[167, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[168, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[169, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[170, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[171, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[172, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[173, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[174, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[175, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[176, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[177, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[178, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[179, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[180, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[181, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[182, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[183, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[184, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[185, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[186, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[187, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[188, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[189, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[190, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[191, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[192, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[193, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[194, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[195, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[196, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[197, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[198, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[199, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[200, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[201, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[202, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[203, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[204, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[205, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[206, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[207, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[208, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[209, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[210, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[211, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[212, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[213, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[214, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[215, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[216, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[217, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[218, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[219, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[220, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[221, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[222, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[223, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[224, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[225, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[226, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[227, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[228, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[251, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[252, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[253, "polars.Expr.alias"]], "all() (polars.expr method)": [[254, "polars.Expr.all"]], "any() (polars.expr method)": [[255, "polars.Expr.any"]], "append() (polars.expr method)": [[256, "polars.Expr.append"]], "apply() (polars.expr method)": [[257, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[258, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[259, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[260, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[261, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[262, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[263, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[264, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[265, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[266, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[267, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[268, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[269, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[270, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[271, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[272, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[273, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[274, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[275, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[276, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[277, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[278, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[279, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[280, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[281, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[282, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[283, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[284, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[285, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[286, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[287, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[288, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[289, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[290, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[291, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[292, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[293, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[294, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[295, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[296, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[297, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[298, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[299, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[300, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[301, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[302, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[303, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[304, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[305, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[306, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[307, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[308, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[309, "polars.Expr.cosh"]], "count() (polars.expr method)": [[310, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[311, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[312, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[313, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[314, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[315, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[316, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[317, "polars.Expr.diff"]], "dot() (polars.expr method)": [[318, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[319, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[320, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[321, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[322, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[323, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[324, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[325, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[326, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[327, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[328, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[329, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[330, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[331, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[332, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[333, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[334, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[335, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[336, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[337, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[338, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[339, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[340, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[341, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[342, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[343, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[344, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[345, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[346, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[347, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[348, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[349, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[350, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[351, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[352, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[353, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[354, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[355, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[356, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[357, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[358, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[359, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[360, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[361, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[362, "polars.Expr.exp"]], "explode() (polars.expr method)": [[363, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[364, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[365, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[366, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[367, "polars.Expr.filter"]], "first() (polars.expr method)": [[368, "polars.Expr.first"]], "flatten() (polars.expr method)": [[369, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[370, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[371, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[372, "polars.Expr.hash"]], "head() (polars.expr method)": [[373, "polars.Expr.head"]], "inspect() (polars.expr method)": [[374, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[375, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[376, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[377, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[378, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[379, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[380, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[381, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[382, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[383, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[384, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[385, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[386, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[387, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[388, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[389, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[390, "polars.Expr.last"]], "len() (polars.expr method)": [[391, "polars.Expr.len"]], "limit() (polars.expr method)": [[392, "polars.Expr.limit"]], "list() (polars.expr method)": [[393, "polars.Expr.list"]], "log() (polars.expr method)": [[394, "polars.Expr.log"]], "log10() (polars.expr method)": [[395, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[396, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[397, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[398, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[399, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[400, "polars.Expr.max"]], "mean() (polars.expr method)": [[401, "polars.Expr.mean"]], "median() (polars.expr method)": [[402, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[403, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[404, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[405, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[406, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[407, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[408, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[409, "polars.Expr.min"]], "mode() (polars.expr method)": [[410, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[411, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[412, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[413, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[414, "polars.Expr.null_count"]], "over() (polars.expr method)": [[415, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[416, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[417, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[418, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[419, "polars.Expr.prefix"]], "product() (polars.expr method)": [[420, "polars.Expr.product"]], "quantile() (polars.expr method)": [[421, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[422, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[423, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[424, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[425, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[426, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[427, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[428, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[429, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[430, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[431, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[432, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[433, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[434, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[435, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[436, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[437, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[438, "polars.Expr.round"]], "sample() (polars.expr method)": [[439, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[440, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[441, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[442, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[443, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[444, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[445, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[446, "polars.Expr.sign"]], "sin() (polars.expr method)": [[447, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[448, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[449, "polars.Expr.skew"]], "slice() (polars.expr method)": [[450, "polars.Expr.slice"]], "sort() (polars.expr method)": [[451, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[452, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[453, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[454, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[455, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[456, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[457, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[458, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[459, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[460, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[461, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[462, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[463, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[464, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[465, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[466, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[467, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[468, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[469, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[470, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[471, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[472, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[473, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[474, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[475, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[476, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[477, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[478, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[479, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[480, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[481, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[482, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[483, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[484, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[485, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[486, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[487, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[488, "polars.Expr.sum"]], "tail() (polars.expr method)": [[489, "polars.Expr.tail"]], "take() (polars.expr method)": [[490, "polars.Expr.take"]], "take_every() (polars.expr method)": [[491, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[492, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[493, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[494, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[495, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[496, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[497, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[498, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[499, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[500, "polars.Expr.var"]], "where() (polars.expr method)": [[501, "polars.Expr.where"]], "all() (in module polars)": [[502, "polars.all"]], "any() (in module polars)": [[503, "polars.any"]], "apply() (in module polars)": [[504, "polars.apply"]], "arange() (in module polars)": [[505, "polars.arange"]], "arg_sort_by() (in module polars)": [[506, "polars.arg_sort_by"]], "avg() (in module polars)": [[507, "polars.avg"]], "coalesce() (in module polars)": [[508, "polars.coalesce"]], "col() (in module polars)": [[509, "polars.col"]], "concat_list() (in module polars)": [[510, "polars.concat_list"]], "concat_str() (in module polars)": [[511, "polars.concat_str"]], "corr() (in module polars)": [[512, "polars.corr"]], "count() (in module polars)": [[513, "polars.count"]], "cov() (in module polars)": [[514, "polars.cov"]], "cumfold() (in module polars)": [[515, "polars.cumfold"]], "cumreduce() (in module polars)": [[516, "polars.cumreduce"]], "cumsum() (in module polars)": [[517, "polars.cumsum"]], "date() (in module polars)": [[518, "polars.date"]], "datetime() (in module polars)": [[519, "polars.datetime"]], "duration() (in module polars)": [[520, "polars.duration"]], "element() (in module polars)": [[521, "polars.element"]], "exclude() (in module polars)": [[522, "polars.exclude"]], "first() (in module polars)": [[523, "polars.first"]], "fold() (in module polars)": [[524, "polars.fold"]], "format() (in module polars)": [[525, "polars.format"]], "from_epoch() (in module polars)": [[526, "polars.from_epoch"]], "groups() (in module polars)": [[527, "polars.groups"]], "head() (in module polars)": [[528, "polars.head"]], "list() (in module polars)": [[529, "polars.list"]], "lit() (in module polars)": [[530, "polars.lit"]], "map() (in module polars)": [[531, "polars.map"]], "max() (in module polars)": [[532, "polars.max"]], "mean() (in module polars)": [[533, "polars.mean"]], "median() (in module polars)": [[534, "polars.median"]], "min() (in module polars)": [[535, "polars.min"]], "n_unique() (in module polars)": [[536, "polars.n_unique"]], "pearson_corr() (in module polars)": [[537, "polars.pearson_corr"]], "quantile() (in module polars)": [[538, "polars.quantile"]], "reduce() (in module polars)": [[539, "polars.reduce"]], "repeat() (in module polars)": [[540, "polars.repeat"]], "select() (in module polars)": [[541, "polars.select"]], "spearman_rank_corr() (in module polars)": [[542, "polars.spearman_rank_corr"]], "std() (in module polars)": [[543, "polars.std"]], "struct() (in module polars)": [[544, "polars.struct"]], "sum() (in module polars)": [[545, "polars.sum"]], "tail() (in module polars)": [[546, "polars.tail"]], "var() (in module polars)": [[547, "polars.var"]], "when() (in module polars)": [[548, "polars.when"]], "cache() (polars.lazyframe method)": [[568, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[569, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[570, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[571, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[572, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[573, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[574, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[575, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[576, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[577, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[578, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[579, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[580, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[581, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[582, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[583, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[584, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[585, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[586, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[587, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[588, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[589, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[590, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[591, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[592, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[593, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[594, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[595, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[596, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[597, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[598, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[599, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[600, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[601, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[602, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[603, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[604, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[605, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[606, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[607, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[608, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[609, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[610, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[611, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[612, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[613, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[614, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[615, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[616, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[617, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[618, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[619, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[620, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[621, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[622, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[623, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[624, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[625, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[626, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[627, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[628, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[629, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[630, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[631, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[632, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[633, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[634, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[635, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[636, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[637, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[638, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[639, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[640, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[641, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[642, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[643, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[644, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[645, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[653, "polars.Series.abs"]], "alias() (polars.series method)": [[654, "polars.Series.alias"]], "all() (polars.series method)": [[655, "polars.Series.all"]], "any() (polars.series method)": [[656, "polars.Series.any"]], "append() (polars.series method)": [[657, "polars.Series.append"]], "apply() (polars.series method)": [[658, "polars.Series.apply"]], "arccos() (polars.series method)": [[659, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[660, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[661, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[662, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[663, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[664, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[665, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[666, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[667, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[668, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[669, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[670, "polars.Series.argsort"]], "arr (polars.series attribute)": [[671, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[672, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[673, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[674, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[675, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[676, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[677, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[678, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[679, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[680, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[681, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[682, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[683, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[684, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[685, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[686, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[687, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[688, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[689, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[690, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[691, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[692, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[693, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[694, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[695, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[696, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[697, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[698, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[699, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[700, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[701, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[702, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[703, "polars.Series.cast"]], "cat (polars.series attribute)": [[704, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[705, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[706, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[707, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[708, "polars.Series.clear"]], "clip() (polars.series method)": [[709, "polars.Series.clip"]], "clip_max() (polars.series method)": [[710, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[711, "polars.Series.clip_min"]], "clone() (polars.series method)": [[712, "polars.Series.clone"]], "cos() (polars.series method)": [[713, "polars.Series.cos"]], "cosh() (polars.series method)": [[714, "polars.Series.cosh"]], "cummax() (polars.series method)": [[715, "polars.Series.cummax"]], "cummin() (polars.series method)": [[716, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[717, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[718, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[719, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[720, "polars.Series.cut"]], "describe() (polars.series method)": [[721, "polars.Series.describe"]], "diff() (polars.series method)": [[722, "polars.Series.diff"]], "dot() (polars.series method)": [[723, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[724, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[725, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[726, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[727, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[728, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[729, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[730, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[731, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[732, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[733, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[734, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[735, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[736, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[737, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[738, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[739, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[740, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[741, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[742, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[743, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[744, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[745, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[746, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[747, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[748, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[749, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[750, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[751, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[752, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[753, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[754, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[755, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[756, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[757, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[758, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[759, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[760, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[761, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[762, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[763, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[764, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[765, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[766, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[767, "polars.Series.dtype"]], "entropy() (polars.series method)": [[768, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[769, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[770, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[771, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[772, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[773, "polars.Series.exp"]], "explode() (polars.series method)": [[774, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[775, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[776, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[777, "polars.Series.fill_null"]], "filter() (polars.series method)": [[778, "polars.Series.filter"]], "flags (polars.series attribute)": [[779, "polars.Series.flags"]], "floor() (polars.series method)": [[780, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[781, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[782, "polars.Series.has_validity"]], "hash() (polars.series method)": [[783, "polars.Series.hash"]], "head() (polars.series method)": [[784, "polars.Series.head"]], "hist() (polars.series method)": [[785, "polars.Series.hist"]], "inner_dtype (polars.series attribute)": [[786, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[787, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[788, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[789, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[790, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[791, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[792, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[793, "polars.Series.is_first"]], "is_float() (polars.series method)": [[794, "polars.Series.is_float"]], "is_in() (polars.series method)": [[795, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[796, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[797, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[798, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[799, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[800, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[801, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[802, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[803, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[804, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[805, "polars.Series.is_utf8"]], "item() (polars.series method)": [[806, "polars.Series.item"]], "kurtosis() (polars.series method)": [[807, "polars.Series.kurtosis"]], "len() (polars.series method)": [[808, "polars.Series.len"]], "limit() (polars.series method)": [[809, "polars.Series.limit"]], "log() (polars.series method)": [[810, "polars.Series.log"]], "log10() (polars.series method)": [[811, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[812, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[813, "polars.Series.map_dict"]], "max() (polars.series method)": [[814, "polars.Series.max"]], "mean() (polars.series method)": [[815, "polars.Series.mean"]], "median() (polars.series method)": [[816, "polars.Series.median"]], "min() (polars.series method)": [[817, "polars.Series.min"]], "mode() (polars.series method)": [[818, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[819, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[820, "polars.Series.n_unique"]], "name (polars.series attribute)": [[821, "polars.Series.name"]], "nan_max() (polars.series method)": [[822, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[823, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[824, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[825, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[826, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[827, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[828, "polars.Series.peak_min"]], "product() (polars.series method)": [[829, "polars.Series.product"]], "qcut() (polars.series method)": [[830, "polars.Series.qcut"]], "quantile() (polars.series method)": [[831, "polars.Series.quantile"]], "rank() (polars.series method)": [[832, "polars.Series.rank"]], "rechunk() (polars.series method)": [[833, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[834, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[835, "polars.Series.rename"]], "reshape() (polars.series method)": [[836, "polars.Series.reshape"]], "reverse() (polars.series method)": [[837, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[838, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[839, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[840, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[841, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[842, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[843, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[844, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[845, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[846, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[847, "polars.Series.rolling_var"]], "round() (polars.series method)": [[848, "polars.Series.round"]], "sample() (polars.series method)": [[849, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[850, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[851, "polars.Series.series_equal"]], "set() (polars.series method)": [[852, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[853, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[854, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[855, "polars.Series.shape"]], "shift() (polars.series method)": [[856, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[857, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[858, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[859, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[860, "polars.Series.shuffle"]], "sign() (polars.series method)": [[861, "polars.Series.sign"]], "sin() (polars.series method)": [[862, "polars.Series.sin"]], "sinh() (polars.series method)": [[863, "polars.Series.sinh"]], "skew() (polars.series method)": [[864, "polars.Series.skew"]], "slice() (polars.series method)": [[865, "polars.Series.slice"]], "sort() (polars.series method)": [[866, "polars.Series.sort"]], "sqrt() (polars.series method)": [[867, "polars.Series.sqrt"]], "std() (polars.series method)": [[868, "polars.Series.std"]], "str (polars.series attribute)": [[869, "polars.Series.str"]], "concat() (polars.series.str method)": [[870, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[871, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[872, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[873, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[874, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[875, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[876, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[877, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[878, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[879, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[880, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[881, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[882, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[883, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[884, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[885, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[886, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[887, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[888, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[889, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[890, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[891, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[892, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[893, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[894, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[895, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[896, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[897, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[898, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[899, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[900, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[901, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[902, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[903, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[904, "polars.Series.sum"]], "tail() (polars.series method)": [[905, "polars.Series.tail"]], "take() (polars.series method)": [[906, "polars.Series.take"]], "take_every() (polars.series method)": [[907, "polars.Series.take_every"]], "tan() (polars.series method)": [[908, "polars.Series.tan"]], "tanh() (polars.series method)": [[909, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[910, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[911, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[912, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[913, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[914, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[915, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[916, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[917, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[918, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[919, "polars.Series.top_k"]], "unique() (polars.series method)": [[920, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[921, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[922, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[923, "polars.Series.value_counts"]], "var() (polars.series method)": [[924, "polars.Series.var"]], "view() (polars.series method)": [[925, "polars.Series.view"]], "zip_with() (polars.series method)": [[926, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[941, "polars.SQLContext"]]}})
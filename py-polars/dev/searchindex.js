Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 95, 113, 123, 126, 127, 225, 243, 255, 550, 628, 653, 925], "refer": [0, 29, 97, 98, 101, 131, 243, 394, 417, 476, 550, 824, 888, 925], "input": [0, 60, 88, 97, 98, 101, 127, 138, 149, 177, 191, 197, 210, 220, 223, 243, 255, 356, 390, 401, 410, 447, 499, 501, 503, 504, 506, 517, 518, 526, 527, 530, 539, 550, 560, 572, 579, 604, 611, 616, 622, 626, 644, 653, 803, 805, 925], "output": [0, 25, 27, 29, 31, 32, 70, 101, 117, 127, 150, 151, 162, 172, 179, 188, 191, 216, 220, 243, 251, 255, 392, 393, 400, 494, 499, 507, 526, 537, 550, 560, 580, 581, 590, 594, 595, 604, 622, 625, 628, 644, 653, 914, 925], "seri": [0, 1, 22, 51, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 90, 95, 116, 117, 119, 123, 127, 134, 142, 144, 146, 147, 152, 155, 156, 158, 160, 168, 169, 173, 184, 185, 199, 203, 208, 209, 224, 243, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 270, 275, 278, 279, 286, 287, 290, 291, 292, 295, 301, 302, 306, 307, 319, 321, 323, 326, 330, 332, 334, 337, 341, 342, 344, 347, 350, 358, 359, 365, 369, 371, 373, 374, 375, 376, 377, 379, 380, 381, 391, 392, 413, 417, 418, 419, 420, 421, 423, 435, 436, 439, 442, 443, 450, 465, 470, 476, 480, 485, 486, 487, 488, 493, 499, 500, 502, 505, 508, 510, 511, 512, 518, 519, 521, 523, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 538, 539, 540, 541, 542, 543, 550, 560, 576, 622, 627, 644, 919, 921, 924, 926, 929, 930, 931], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 51, 60, 61, 62, 63, 64, 65, 67, 68, 69, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 112, 115, 117, 118, 241, 242, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 288, 289, 292, 293, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 523, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 550, 560, 566, 568, 572, 573, 576, 577, 580, 581, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 598, 599, 602, 604, 608, 609, 610, 611, 612, 613, 617, 618, 619, 620, 622, 623, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 652, 653, 673, 691, 700, 715, 716, 777, 822, 869, 872, 884, 885, 895, 904, 905, 914, 925], "lazyfram": [0, 1, 48, 50, 60, 61, 62, 63, 64, 67, 68, 108, 109, 110, 111, 112, 113, 115, 119, 166, 178, 243, 292, 362, 550, 560, 643, 932], "express": [0, 65, 67, 70, 117, 119, 120, 127, 138, 140, 142, 149, 175, 179, 187, 191, 197, 210, 220, 223, 225, 243, 251, 252, 254, 255, 265, 272, 274, 292, 303, 304, 305, 308, 314, 316, 320, 338, 356, 359, 362, 369, 371, 375, 378, 383, 386, 391, 392, 393, 394, 398, 399, 400, 401, 410, 412, 413, 414, 415, 420, 434, 435, 436, 438, 440, 445, 447, 451, 459, 460, 476, 482, 485, 491, 493, 496, 500, 501, 503, 504, 506, 507, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 525, 526, 527, 530, 532, 534, 535, 536, 537, 539, 540, 543, 549, 560, 566, 571, 572, 573, 576, 579, 598, 604, 606, 607, 608, 609, 611, 616, 622, 623, 626, 628, 644, 653, 671, 673, 704, 705, 706, 714, 723, 745, 767, 780, 842, 849, 863, 871, 872, 925], "extend": [0, 88, 243, 359, 550, 560, 652, 767, 925], "function": [0, 29, 61, 62, 63, 64, 69, 86, 97, 98, 101, 108, 118, 127, 131, 137, 144, 171, 178, 179, 207, 211, 214, 215, 225, 243, 252, 255, 292, 314, 342, 353, 354, 355, 392, 393, 410, 412, 423, 424, 425, 426, 427, 428, 430, 431, 432, 444, 489, 497, 499, 510, 511, 518, 519, 521, 526, 534, 550, 560, 590, 594, 597, 619, 628, 644, 653, 691, 714, 749, 761, 762, 763, 764, 777, 822, 830, 844, 845, 851, 856, 908, 925], "data": [0, 1, 5, 15, 18, 28, 29, 34, 51, 60, 61, 63, 68, 75, 76, 80, 82, 85, 86, 87, 88, 89, 90, 91, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 115, 116, 118, 119, 120, 126, 127, 128, 129, 139, 148, 149, 150, 162, 163, 164, 166, 177, 178, 182, 187, 188, 195, 202, 206, 207, 220, 222, 241, 243, 255, 293, 300, 319, 343, 350, 370, 377, 379, 417, 433, 434, 444, 476, 489, 491, 504, 537, 550, 560, 564, 565, 573, 579, 580, 597, 608, 609, 622, 644, 652, 653, 692, 698, 703, 707, 720, 722, 757, 777, 824, 840, 841, 851, 856, 888, 906, 907, 908, 909, 911, 916, 924, 925], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 70, 75, 85, 87, 88, 89, 90, 91, 95, 97, 98, 100, 101, 108, 109, 114, 115, 116, 119, 122, 123, 127, 144, 148, 150, 151, 152, 163, 202, 206, 207, 209, 212, 243, 255, 279, 292, 300, 301, 303, 304, 305, 321, 323, 326, 330, 332, 334, 337, 341, 344, 356, 367, 373, 375, 376, 394, 420, 471, 472, 473, 476, 489, 499, 504, 513, 514, 515, 517, 518, 525, 550, 560, 566, 571, 573, 580, 581, 598, 607, 608, 609, 617, 644, 678, 691, 698, 700, 704, 705, 706, 724, 726, 729, 736, 738, 741, 744, 748, 751, 775, 851, 883, 884, 885, 906, 907, 909, 917, 925], "config": [0, 60, 191, 220, 243, 560, 604, 622, 644], "except": [0, 153, 165, 167, 200, 243, 517, 560, 586, 644, 776, 801, 897, 907, 916, 925], "test": [0, 101, 560, 582, 589, 644], "util": [0, 521, 560, 573, 644], "sql": [0, 28, 48, 99, 164, 243, 560], "These": [1, 29, 124, 243, 347, 549, 754], "allow": [1, 29, 51, 75, 86, 108, 110, 111, 112, 113, 119, 120, 126, 162, 165, 166, 187, 188, 189, 207, 222, 243, 338, 419, 434, 476, 550, 585, 586, 590, 594, 608, 609, 623, 644, 745, 826, 841, 843, 888, 908, 925], "you": [1, 12, 29, 33, 60, 85, 87, 88, 89, 91, 95, 97, 98, 101, 102, 106, 108, 115, 123, 127, 135, 139, 162, 165, 175, 187, 188, 204, 206, 211, 225, 243, 255, 274, 303, 304, 305, 362, 371, 392, 394, 419, 424, 425, 426, 427, 428, 430, 431, 432, 461, 464, 476, 500, 510, 519, 550, 566, 569, 582, 586, 589, 607, 609, 628, 644, 652, 653, 673, 704, 705, 706, 780, 826, 873, 876, 888, 907, 916, 925], "regist": [1, 61, 62, 63, 64], "custom": [1, 29, 61, 62, 63, 64, 127, 225, 243, 255, 292, 392, 423, 499, 526, 550, 590, 628, 644, 653, 691, 830, 925], "dedic": [1, 86, 162, 188, 243], "namespac": [1, 242, 549, 560, 643], "underli": [1, 71, 78, 85, 87, 88, 89, 91, 106, 119, 120, 139, 162, 163, 188, 202, 243, 296, 319, 320, 322, 325, 327, 328, 329, 331, 333, 335, 336, 339, 340, 341, 343, 348, 349, 350, 351, 419, 433, 451, 453, 550, 644, 652, 694, 722, 723, 725, 728, 730, 731, 735, 737, 740, 742, 743, 746, 747, 748, 750, 755, 756, 757, 758, 826, 840, 851, 863, 865, 903, 907, 925], "polar": [1, 243, 549, 550, 560, 644, 925, 932, 933], "class": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 90, 117, 118, 206, 207, 243, 550, 560, 644, 906, 907, 925, 932], "without": [1, 5, 69, 100, 103, 107, 109, 113, 214, 215, 243, 255, 314, 342, 424, 425, 426, 427, 428, 430, 431, 432, 536, 550, 619, 644, 714, 720, 749, 777, 822, 925], "requir": [1, 29, 33, 90, 115, 116, 131, 187, 207, 243, 293, 353, 354, 355, 439, 476, 491, 550, 609, 644, 692, 762, 763, 764, 850, 888, 907, 908, 911, 925], "subclass": [1, 243], "mixin": 1, "expr": [1, 60, 61, 62, 63, 64, 65, 68, 70, 138, 140, 142, 164, 165, 175, 179, 187, 191, 220, 243, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 550, 551, 552, 555, 556, 557, 572, 574, 576, 585, 586, 599, 604, 606, 622, 644, 671, 673, 714, 723, 768, 780, 849, 863, 867, 886, 898, 925], "ar": [1, 5, 10, 14, 17, 25, 29, 33, 51, 70, 77, 84, 85, 86, 87, 88, 89, 90, 91, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 113, 115, 116, 118, 119, 122, 124, 126, 127, 131, 135, 137, 140, 144, 149, 150, 151, 162, 165, 166, 171, 172, 177, 187, 188, 191, 197, 203, 207, 210, 215, 216, 220, 223, 243, 252, 292, 310, 312, 313, 317, 318, 342, 347, 352, 353, 354, 355, 371, 373, 375, 376, 377, 379, 380, 381, 384, 394, 410, 417, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 441, 444, 446, 447, 461, 464, 465, 483, 500, 501, 503, 506, 507, 537, 539, 544, 546, 549, 550, 551, 552, 555, 556, 557, 560, 569, 574, 579, 580, 581, 582, 586, 589, 590, 594, 595, 598, 601, 604, 608, 609, 611, 616, 619, 622, 623, 626, 644, 650, 652, 691, 712, 713, 749, 754, 760, 761, 762, 763, 764, 774, 780, 784, 787, 788, 789, 790, 791, 792, 799, 824, 828, 830, 836, 853, 856, 873, 876, 877, 896, 907, 908, 916, 919, 921, 925, 926, 929, 930, 931], "all": [1, 7, 14, 17, 22, 25, 29, 34, 67, 68, 70, 85, 88, 90, 91, 92, 97, 98, 100, 101, 102, 106, 108, 110, 111, 117, 118, 120, 135, 141, 153, 158, 160, 162, 163, 166, 167, 171, 174, 175, 182, 187, 188, 196, 200, 205, 212, 214, 216, 243, 253, 254, 274, 279, 289, 292, 294, 308, 314, 318, 356, 366, 367, 370, 373, 376, 380, 381, 383, 386, 388, 392, 393, 405, 409, 414, 417, 422, 439, 445, 447, 452, 458, 460, 463, 466, 467, 469, 475, 482, 494, 504, 517, 519, 534, 539, 550, 560, 566, 569, 571, 573, 575, 590, 594, 598, 607, 610, 617, 623, 644, 673, 678, 688, 691, 714, 720, 776, 782, 796, 801, 824, 857, 864, 870, 872, 875, 878, 879, 881, 887, 897, 925], "support": [1, 29, 33, 68, 85, 86, 87, 88, 89, 90, 91, 99, 100, 101, 109, 117, 120, 124, 126, 162, 163, 188, 196, 197, 204, 207, 243, 287, 410, 445, 447, 470, 504, 550, 610, 611, 644, 686, 857, 882, 908, 925], "target": [1, 29, 66, 243, 457, 476, 869, 888], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 60, 67, 68, 69, 85, 87, 88, 89, 90, 91, 94, 95, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 126, 127, 131, 135, 136, 137, 139, 144, 149, 150, 151, 152, 156, 158, 160, 162, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 180, 181, 182, 187, 188, 189, 191, 194, 196, 198, 199, 202, 204, 206, 207, 211, 212, 214, 215, 216, 217, 218, 220, 221, 225, 242, 243, 252, 254, 255, 264, 267, 274, 275, 279, 288, 292, 293, 301, 308, 314, 319, 328, 338, 341, 342, 350, 358, 369, 370, 371, 375, 386, 391, 392, 398, 399, 400, 401, 407, 408, 410, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 436, 438, 439, 440, 445, 446, 447, 462, 463, 468, 469, 475, 476, 479, 490, 491, 492, 493, 494, 497, 500, 505, 508, 510, 512, 518, 519, 521, 536, 540, 550, 560, 561, 563, 566, 569, 571, 573, 579, 580, 581, 583, 586, 590, 594, 595, 598, 601, 604, 606, 607, 608, 609, 610, 617, 619, 622, 623, 624, 625, 628, 643, 644, 652, 653, 662, 665, 673, 674, 678, 687, 692, 700, 714, 720, 722, 723, 731, 745, 748, 749, 757, 761, 766, 773, 774, 777, 781, 786, 787, 793, 795, 797, 800, 804, 806, 807, 808, 809, 811, 812, 814, 815, 817, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 834, 837, 838, 839, 841, 844, 845, 846, 849, 850, 851, 852, 857, 858, 860, 874, 875, 880, 881, 887, 888, 891, 892, 895, 896, 903, 905, 906, 907, 908, 910, 911, 913, 915, 916, 925], "featur": [1, 33, 37, 51, 66, 243], "i": [1, 5, 12, 14, 27, 29, 31, 32, 37, 51, 60, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 81, 83, 85, 86, 87, 88, 89, 90, 91, 94, 97, 98, 99, 100, 102, 106, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 126, 127, 135, 137, 145, 148, 149, 150, 151, 152, 153, 156, 157, 159, 161, 162, 163, 165, 166, 167, 169, 171, 172, 175, 177, 178, 179, 187, 188, 189, 196, 197, 199, 200, 202, 207, 211, 212, 214, 215, 216, 225, 242, 243, 252, 253, 254, 255, 265, 274, 277, 287, 291, 292, 314, 320, 327, 338, 342, 347, 353, 354, 355, 358, 367, 369, 371, 384, 392, 394, 401, 410, 417, 419, 421, 424, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 440, 441, 444, 445, 446, 447, 451, 452, 457, 458, 460, 462, 463, 465, 468, 469, 470, 473, 475, 476, 479, 494, 498, 500, 504, 505, 508, 510, 511, 512, 519, 525, 536, 540, 550, 566, 569, 571, 573, 579, 580, 581, 584, 586, 588, 590, 594, 595, 598, 607, 608, 609, 610, 611, 617, 619, 625, 628, 644, 651, 652, 653, 673, 676, 686, 690, 714, 723, 730, 745, 749, 754, 761, 762, 763, 764, 766, 774, 775, 776, 777, 779, 781, 783, 793, 794, 795, 797, 798, 799, 801, 822, 824, 826, 828, 841, 842, 843, 844, 845, 846, 852, 853, 856, 857, 860, 863, 864, 869, 870, 872, 874, 875, 877, 880, 881, 882, 885, 887, 891, 897, 903, 907, 908, 914, 915, 916, 925], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 51, 60, 69, 70, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 123, 127, 133, 135, 140, 141, 144, 149, 150, 151, 158, 160, 162, 163, 165, 169, 171, 174, 175, 178, 179, 187, 189, 191, 197, 199, 205, 207, 211, 212, 214, 215, 216, 220, 223, 225, 243, 250, 255, 265, 274, 292, 296, 297, 301, 314, 317, 318, 350, 352, 353, 354, 355, 361, 362, 370, 371, 384, 392, 394, 397, 410, 417, 419, 421, 424, 425, 426, 427, 428, 430, 431, 432, 434, 436, 439, 440, 444, 446, 447, 453, 454, 455, 461, 462, 468, 470, 472, 474, 476, 499, 500, 504, 506, 510, 512, 519, 521, 525, 527, 530, 535, 536, 539, 540, 549, 550, 560, 566, 568, 569, 574, 575, 579, 580, 581, 582, 586, 588, 589, 594, 604, 609, 611, 617, 619, 622, 626, 628, 644, 653, 673, 691, 694, 695, 700, 714, 757, 760, 762, 763, 764, 768, 769, 774, 777, 780, 799, 805, 824, 826, 828, 841, 844, 845, 846, 850, 852, 856, 860, 865, 866, 873, 874, 880, 882, 884, 888, 898, 904, 906, 907, 908, 915, 916, 925], "librari": [1, 71, 78, 392, 550, 933], "author": 1, "domain": 1, "specif": [1, 25, 29, 85, 87, 89, 91, 97, 99, 100, 109, 119, 162, 243, 423, 476, 550, 644, 830, 888, 925], "capabl": [1, 29, 243], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 88, 97, 98, 99, 100, 101, 108, 109, 115, 135, 139, 150, 151, 212, 243, 252, 292, 359, 371, 373, 376, 377, 379, 380, 381, 401, 424, 425, 426, 427, 428, 430, 431, 432, 465, 550, 569, 571, 580, 581, 608, 609, 617, 625, 644, 652, 767, 780, 784, 788, 789, 790, 791, 792, 844, 877, 925], "mai": [1, 33, 37, 68, 69, 85, 87, 88, 89, 91, 97, 100, 102, 109, 110, 113, 127, 137, 139, 165, 193, 194, 207, 214, 215, 243, 255, 286, 291, 292, 314, 319, 328, 342, 424, 425, 426, 427, 428, 430, 431, 432, 437, 438, 476, 510, 511, 519, 534, 550, 586, 590, 605, 606, 609, 619, 624, 628, 644, 652, 653, 685, 690, 714, 722, 731, 749, 761, 777, 822, 848, 849, 888, 925], "exist": [1, 28, 29, 100, 109, 119, 220, 243, 320, 622, 644, 723], "belong": [1, 150, 243, 580, 644], "core": [1, 207, 243], "cannot": [1, 86, 97, 98, 102, 115, 127, 189, 225, 243, 296, 394, 434, 453, 472, 481, 550, 607, 628, 644, 653, 694, 841, 865, 884, 925], "overrid": [1, 29, 85, 87, 88, 89, 90, 91, 97, 117, 118, 120, 243, 644], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 60, 61, 62, 63, 64, 66, 69, 70, 85, 87, 88, 89, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 118, 119, 120, 130, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 146, 148, 149, 150, 151, 153, 155, 158, 160, 162, 164, 165, 168, 169, 170, 171, 172, 173, 175, 177, 179, 181, 183, 184, 185, 186, 187, 188, 189, 193, 194, 196, 197, 198, 199, 200, 203, 204, 205, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 250, 251, 255, 270, 271, 272, 277, 278, 279, 287, 290, 292, 316, 321, 338, 341, 342, 345, 347, 356, 358, 360, 362, 364, 369, 371, 378, 393, 394, 400, 402, 410, 412, 414, 420, 422, 424, 425, 426, 427, 428, 430, 431, 432, 438, 439, 446, 447, 480, 481, 482, 485, 496, 497, 498, 499, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 550, 555, 566, 567, 568, 569, 571, 572, 573, 576, 578, 579, 580, 581, 583, 585, 586, 594, 595, 598, 600, 601, 602, 606, 607, 608, 609, 610, 611, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 649, 670, 671, 678, 691, 698, 715, 716, 724, 745, 748, 749, 752, 754, 766, 769, 780, 805, 806, 809, 814, 815, 822, 827, 844, 845, 892, 894, 904, 905, 925, 929], "dt": [1, 60, 151, 243, 557, 581, 644, 931], "attempt": [1, 206, 243], "do": [1, 29, 60, 67, 108, 139, 165, 202, 211, 214, 243, 274, 314, 463, 469, 475, 497, 550, 566, 571, 586, 590, 598, 607, 608, 609, 644, 652, 673, 714, 875, 881, 887, 907, 916, 925], "so": [1, 51, 99, 108, 148, 150, 151, 179, 243, 265, 277, 371, 463, 469, 475, 550, 580, 581, 644, 676, 875, 881, 887], "rais": [1, 13, 17, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 115, 116, 187, 243, 291, 296, 400, 413, 451, 453, 465, 476, 525, 550, 690, 694, 863, 865, 877, 888, 907, 916, 925], "an": [1, 25, 28, 29, 37, 61, 63, 64, 65, 67, 70, 71, 75, 76, 78, 85, 97, 98, 99, 100, 101, 103, 106, 108, 110, 118, 119, 120, 127, 128, 129, 137, 140, 142, 144, 150, 151, 162, 163, 165, 175, 179, 185, 187, 202, 206, 214, 220, 225, 243, 251, 252, 255, 272, 274, 277, 291, 292, 296, 300, 303, 304, 305, 309, 310, 311, 312, 313, 314, 320, 350, 359, 362, 371, 383, 392, 393, 401, 415, 423, 424, 425, 426, 427, 428, 430, 431, 432, 451, 453, 458, 476, 485, 500, 504, 516, 521, 525, 534, 535, 536, 539, 550, 560, 564, 565, 566, 571, 573, 576, 580, 581, 586, 590, 598, 607, 622, 623, 628, 644, 653, 671, 673, 676, 690, 694, 698, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 723, 757, 761, 767, 780, 830, 831, 832, 833, 834, 835, 837, 838, 839, 844, 845, 863, 865, 870, 888, 907, 916, 925], "attributeerror": 1, "howev": [1, 88, 137, 243, 761, 925], "can": [1, 12, 29, 60, 70, 76, 88, 97, 98, 101, 102, 106, 108, 110, 112, 113, 118, 119, 120, 127, 136, 144, 150, 158, 160, 175, 179, 191, 197, 210, 211, 214, 220, 225, 243, 255, 274, 292, 310, 313, 314, 338, 347, 359, 370, 371, 405, 419, 424, 425, 426, 427, 428, 430, 431, 432, 436, 439, 441, 444, 447, 460, 463, 469, 475, 494, 497, 500, 501, 504, 512, 519, 521, 527, 540, 549, 550, 566, 571, 580, 604, 611, 616, 622, 624, 628, 644, 653, 673, 691, 714, 745, 754, 767, 780, 810, 826, 844, 845, 846, 850, 853, 856, 872, 875, 881, 887, 925], "other": [1, 17, 29, 70, 97, 98, 101, 108, 115, 116, 135, 139, 145, 164, 165, 171, 172, 187, 191, 215, 220, 241, 243, 254, 265, 270, 303, 304, 305, 316, 375, 394, 447, 489, 503, 506, 539, 550, 560, 569, 585, 586, 594, 595, 604, 619, 622, 623, 644, 652, 669, 704, 705, 706, 718, 787, 843, 909, 917, 924, 925], "onli": [1, 17, 25, 29, 51, 60, 66, 68, 97, 98, 100, 101, 102, 106, 108, 109, 110, 111, 112, 119, 120, 124, 127, 135, 162, 165, 169, 188, 199, 204, 243, 250, 255, 265, 302, 303, 304, 305, 338, 356, 365, 419, 492, 535, 550, 566, 569, 582, 586, 589, 644, 701, 704, 705, 706, 745, 772, 826, 903, 925], "gener": [1, 92, 99, 117, 118, 119, 120, 131, 179, 189, 205, 211, 243, 292, 434, 440, 550, 644, 691, 841, 852, 904, 925], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 550, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 677, 678, 680, 685, 686, 687, 689, 691, 698, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 763, 764, 767, 768, 769, 770, 772, 775, 776, 777, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 852, 853, 854, 855, 857, 858, 859, 860, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 925], "register_expr_namespac": [1, 61, 63, 64], "greet": 1, "def": [1, 61, 62, 63, 64, 118, 119, 120, 178, 211, 243, 412, 526, 550, 597, 644], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 117], "self": [1, 61, 62, 63, 64, 67, 127, 128, 129, 131, 132, 133, 135, 138, 139, 140, 141, 142, 149, 150, 151, 153, 155, 156, 157, 164, 165, 167, 168, 169, 170, 171, 172, 173, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 294, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 550, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 644, 652, 653, 698, 707, 770, 804, 805, 816, 819, 820, 825, 844, 845, 846, 858, 913, 917, 925], "_expr": [1, 62], "hello": [1, 463, 469, 475, 497, 678, 875, 881, 887], "return": [1, 25, 27, 31, 32, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 77, 79, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 106, 107, 108, 109, 123, 127, 128, 131, 134, 135, 136, 137, 138, 140, 141, 144, 148, 149, 153, 155, 161, 162, 163, 164, 166, 167, 174, 175, 177, 178, 179, 187, 188, 189, 200, 201, 207, 210, 211, 212, 220, 222, 225, 228, 232, 237, 243, 252, 253, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 271, 275, 277, 278, 279, 290, 291, 295, 297, 306, 307, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 348, 349, 351, 358, 368, 371, 373, 374, 375, 376, 377, 379, 380, 381, 387, 391, 401, 405, 412, 420, 421, 434, 435, 441, 442, 443, 450, 452, 454, 456, 457, 458, 460, 461, 462, 464, 465, 468, 470, 471, 472, 473, 479, 484, 485, 486, 487, 488, 490, 492, 493, 494, 498, 499, 500, 501, 504, 513, 514, 515, 521, 523, 525, 526, 535, 536, 539, 541, 543, 550, 564, 566, 569, 570, 571, 573, 582, 588, 589, 590, 597, 598, 607, 608, 609, 614, 615, 616, 617, 622, 625, 631, 635, 640, 644, 649, 650, 651, 653, 660, 661, 663, 664, 667, 668, 670, 674, 676, 677, 678, 689, 690, 693, 695, 703, 715, 716, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 761, 766, 774, 776, 777, 782, 784, 785, 787, 788, 789, 790, 791, 792, 796, 798, 801, 804, 810, 822, 828, 829, 841, 842, 843, 845, 853, 862, 863, 864, 866, 868, 869, 870, 872, 873, 874, 876, 877, 880, 882, 883, 884, 885, 888, 891, 897, 899, 910, 912, 913, 917, 925], "lit": [1, 95, 123, 295, 371, 383, 510, 512, 519, 540, 543, 550, 693, 769, 925], "alia": [1, 60, 62, 64, 150, 151, 167, 213, 220, 243, 255, 267, 272, 274, 303, 304, 305, 309, 310, 311, 312, 313, 315, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 332, 334, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 350, 362, 364, 369, 371, 374, 375, 383, 386, 387, 394, 403, 411, 419, 435, 451, 452, 455, 458, 461, 464, 470, 472, 473, 474, 480, 481, 489, 490, 496, 499, 502, 503, 505, 506, 510, 511, 512, 515, 516, 519, 520, 526, 534, 535, 539, 540, 550, 580, 581, 583, 589, 618, 622, 644, 665, 673, 722, 724, 727, 745, 748, 753, 757, 801, 884, 885, 925], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 463, 469, 475, 678, 875, 881, 887], "select": [1, 28, 60, 61, 62, 63, 65, 96, 97, 98, 99, 100, 102, 106, 108, 113, 127, 161, 165, 175, 178, 187, 196, 208, 213, 216, 243, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 288, 289, 292, 293, 294, 302, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 363, 365, 366, 367, 369, 370, 372, 373, 375, 376, 378, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 460, 462, 463, 465, 468, 469, 471, 472, 473, 475, 477, 478, 480, 481, 482, 483, 486, 487, 488, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 510, 511, 512, 515, 517, 518, 519, 520, 521, 523, 527, 528, 529, 530, 531, 532, 534, 537, 538, 539, 540, 541, 542, 550, 567, 583, 586, 597, 610, 618, 623, 625, 644, 673, 691, 844, 845, 857, 869, 872, 898, 925], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 82, 85, 87, 88, 89, 90, 91, 92, 95, 108, 113, 119, 120, 123, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 165, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 189, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 205, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 523, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 550, 564, 566, 568, 569, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 604, 605, 606, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 672, 673, 674, 677, 678, 680, 685, 686, 687, 689, 691, 698, 700, 701, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 763, 764, 767, 768, 769, 770, 772, 775, 776, 777, 779, 780, 782, 784, 787, 788, 789, 790, 791, 792, 796, 798, 804, 805, 810, 818, 819, 820, 822, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 845, 848, 852, 853, 854, 855, 857, 858, 859, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 895, 897, 898, 899, 900, 901, 904, 905, 909, 911, 912, 913, 914, 917, 925], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 99, 101, 108, 113, 114, 115, 116, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 250, 251, 252, 255, 264, 265, 266, 267, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 300, 301, 302, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 333, 335, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 390, 391, 393, 394, 405, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 444, 446, 447, 448, 451, 454, 455, 457, 459, 461, 464, 470, 471, 472, 473, 474, 480, 481, 482, 484, 485, 486, 490, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 516, 517, 518, 519, 520, 523, 525, 526, 527, 528, 529, 530, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 550, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 649, 652, 653, 654, 656, 657, 658, 660, 661, 662, 663, 664, 672, 673, 674, 677, 680, 685, 686, 687, 689, 691, 698, 700, 701, 702, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 722, 723, 724, 725, 726, 727, 728, 730, 732, 733, 734, 736, 738, 739, 740, 742, 744, 746, 748, 749, 750, 753, 754, 756, 757, 761, 763, 764, 767, 768, 769, 770, 772, 775, 776, 777, 779, 780, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 799, 800, 804, 806, 807, 808, 809, 810, 811, 812, 818, 819, 820, 822, 823, 824, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 852, 854, 855, 856, 857, 858, 860, 866, 867, 869, 871, 873, 876, 882, 886, 895, 896, 897, 898, 899, 900, 901, 903, 904, 906, 907, 908, 911, 912, 913, 914, 915, 917, 925], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 102, 108, 109, 113, 114, 115, 116, 117, 119, 120, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 550, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 676, 677, 680, 685, 686, 687, 689, 691, 698, 700, 701, 702, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 763, 764, 767, 768, 769, 770, 772, 775, 776, 777, 779, 780, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 800, 804, 806, 807, 808, 809, 810, 811, 812, 818, 819, 820, 822, 823, 824, 827, 828, 829, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 869, 871, 872, 878, 884, 885, 888, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 925], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 85, 87, 88, 89, 90, 91, 92, 99, 108, 113, 114, 115, 116, 119, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 166, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 249, 250, 251, 253, 254, 255, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 323, 325, 326, 328, 329, 330, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 350, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 444, 445, 446, 447, 448, 450, 452, 455, 458, 459, 460, 461, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 550, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 649, 652, 653, 655, 659, 660, 661, 662, 663, 664, 672, 673, 674, 677, 678, 680, 685, 686, 687, 689, 691, 700, 701, 702, 703, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 723, 728, 733, 734, 740, 742, 747, 749, 750, 754, 756, 758, 760, 761, 762, 763, 764, 767, 768, 769, 770, 772, 775, 776, 777, 779, 780, 782, 784, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 800, 802, 804, 806, 807, 808, 809, 810, 811, 812, 818, 819, 820, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 852, 854, 856, 857, 858, 859, 860, 862, 864, 870, 871, 872, 875, 876, 877, 878, 879, 881, 884, 885, 887, 888, 895, 896, 897, 898, 899, 900, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 917, 925], "column_0": [1, 127, 211, 243], "register_dataframe_namespac": [1, 62, 63, 64], "split": [1, 61, 163, 243, 472, 473, 884, 885], "splitfram": [1, 61], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 61, 62, 65, 85, 86, 87, 88, 89, 90, 91, 92, 98, 108, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 288, 289, 292, 293, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 523, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 550, 581, 618, 619, 625, 628, 631, 640, 644, 673, 691, 700, 869, 872, 879, 884, 885, 905, 925], "_df": [1, 61], "by_alternate_row": 1, "list": [1, 29, 36, 60, 61, 63, 67, 69, 85, 87, 88, 89, 91, 94, 96, 97, 98, 99, 100, 102, 106, 108, 109, 118, 119, 120, 130, 133, 136, 137, 138, 142, 147, 149, 150, 155, 162, 174, 177, 187, 188, 191, 197, 203, 204, 211, 212, 213, 214, 220, 223, 224, 243, 250, 270, 273, 274, 275, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 358, 364, 392, 401, 402, 410, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 438, 446, 447, 458, 471, 480, 481, 485, 501, 504, 505, 512, 516, 527, 530, 539, 540, 550, 567, 568, 570, 572, 576, 579, 580, 594, 604, 611, 617, 618, 622, 623, 626, 627, 644, 666, 669, 672, 673, 674, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 702, 715, 761, 766, 770, 773, 777, 787, 822, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 842, 870, 883, 898, 906, 925], "with_row_count": [1, 243, 394, 550, 644, 845, 925], "name": [1, 15, 19, 21, 28, 29, 31, 50, 61, 62, 63, 64, 69, 70, 74, 85, 87, 88, 89, 90, 91, 92, 96, 97, 98, 100, 101, 102, 103, 106, 107, 108, 110, 111, 112, 116, 117, 118, 119, 120, 127, 130, 133, 134, 135, 138, 143, 146, 148, 149, 162, 164, 165, 171, 177, 179, 183, 187, 188, 190, 191, 197, 203, 205, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 243, 251, 255, 292, 342, 347, 356, 371, 383, 393, 400, 402, 410, 414, 447, 480, 481, 482, 497, 498, 501, 503, 504, 506, 507, 509, 512, 517, 523, 524, 527, 530, 532, 533, 535, 537, 539, 540, 541, 550, 567, 568, 569, 572, 579, 585, 586, 594, 601, 603, 604, 611, 616, 617, 618, 619, 622, 624, 625, 626, 644, 649, 691, 703, 715, 749, 754, 822, 827, 892, 894, 904, 905, 908, 925], "n": [1, 11, 14, 22, 32, 36, 38, 61, 62, 63, 64, 70, 94, 95, 97, 98, 108, 123, 127, 128, 139, 150, 153, 162, 163, 167, 188, 189, 200, 201, 204, 228, 237, 243, 273, 278, 290, 314, 315, 319, 320, 324, 346, 350, 359, 368, 387, 411, 420, 434, 444, 466, 472, 473, 484, 486, 490, 521, 523, 535, 541, 550, 564, 566, 580, 582, 589, 614, 615, 631, 640, 644, 652, 672, 677, 689, 703, 714, 717, 722, 723, 727, 753, 757, 767, 776, 801, 818, 841, 856, 860, 878, 884, 885, 897, 899, 910, 915, 925], "filter": [1, 61, 100, 108, 109, 113, 135, 158, 159, 160, 225, 243, 455, 474, 496, 500, 519, 550, 569, 573, 583, 628, 644, 844, 925], "col": [1, 27, 29, 60, 61, 62, 63, 65, 89, 91, 108, 118, 119, 127, 138, 142, 149, 150, 151, 159, 161, 175, 178, 187, 191, 197, 213, 220, 223, 243, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 288, 289, 292, 293, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 362, 363, 364, 365, 369, 370, 371, 372, 374, 375, 377, 378, 379, 382, 383, 384, 385, 389, 390, 391, 394, 395, 396, 397, 404, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 503, 505, 506, 510, 511, 512, 515, 518, 519, 520, 521, 522, 527, 530, 533, 534, 540, 543, 550, 572, 576, 579, 580, 581, 583, 597, 604, 611, 618, 622, 623, 626, 644, 673, 691, 700, 745, 828, 844, 845, 869, 872, 888, 925], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 60, 61, 62, 64, 65, 69, 92, 97, 98, 99, 101, 102, 106, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 123, 127, 128, 129, 131, 132, 133, 136, 140, 141, 144, 145, 147, 148, 149, 150, 152, 156, 161, 162, 163, 164, 166, 168, 169, 170, 173, 174, 175, 176, 180, 181, 185, 189, 190, 191, 194, 196, 197, 198, 199, 205, 207, 208, 211, 214, 216, 217, 220, 221, 223, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 243, 249, 250, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 272, 274, 277, 283, 292, 300, 302, 304, 305, 306, 307, 309, 314, 317, 318, 325, 329, 330, 332, 333, 337, 343, 344, 353, 354, 355, 357, 358, 359, 360, 361, 365, 367, 370, 373, 376, 377, 379, 380, 381, 383, 384, 389, 390, 392, 394, 395, 396, 397, 404, 407, 408, 409, 411, 412, 413, 416, 417, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 439, 441, 442, 443, 444, 448, 449, 457, 479, 483, 487, 488, 489, 495, 500, 501, 502, 503, 505, 507, 509, 510, 512, 516, 519, 528, 529, 532, 533, 534, 537, 540, 542, 543, 550, 564, 565, 568, 570, 574, 575, 579, 580, 585, 588, 593, 598, 599, 603, 604, 606, 607, 609, 611, 612, 620, 622, 623, 624, 626, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 644, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 673, 676, 698, 701, 703, 708, 709, 714, 715, 716, 718, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 750, 751, 760, 762, 763, 764, 766, 768, 772, 775, 777, 784, 786, 788, 789, 790, 791, 792, 798, 799, 804, 807, 808, 818, 822, 823, 824, 830, 832, 833, 835, 836, 837, 839, 841, 853, 854, 855, 859, 860, 862, 869, 872, 891, 900, 901, 904, 908, 909, 913, 915, 916, 925], "drop": [1, 88, 127, 134, 135, 212, 220, 243, 273, 315, 317, 318, 550, 569, 617, 622, 644, 672, 717, 719, 720, 925], "aaa": [1, 29, 243, 480, 481], "bbb": [1, 29, 243, 480, 481], "ccc": [1, 29, 243, 480, 481], "ddd": [1, 29, 243, 480, 481], "eee": [1, 29, 243], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 51, 60, 61, 68, 69, 70, 72, 74, 85, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 111, 112, 115, 119, 126, 127, 133, 134, 135, 136, 138, 143, 146, 148, 149, 150, 151, 155, 156, 162, 164, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 197, 198, 199, 203, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 223, 243, 252, 253, 255, 264, 267, 270, 275, 288, 291, 292, 320, 322, 325, 327, 328, 329, 331, 333, 335, 336, 339, 340, 343, 348, 349, 351, 356, 358, 362, 364, 371, 383, 394, 399, 400, 402, 410, 414, 418, 420, 421, 424, 425, 426, 427, 428, 430, 431, 432, 439, 446, 447, 456, 472, 473, 476, 482, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 550, 568, 569, 570, 572, 579, 580, 581, 585, 586, 590, 591, 592, 593, 594, 596, 597, 599, 601, 603, 604, 611, 612, 613, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 644, 650, 651, 669, 674, 687, 690, 715, 725, 728, 730, 731, 735, 737, 740, 742, 743, 746, 747, 750, 755, 756, 758, 766, 822, 828, 850, 868, 884, 885, 895, 904, 905, 925], "txt": [1, 108], "utf8": [1, 9, 17, 51, 88, 97, 98, 108, 117, 136, 137, 138, 144, 190, 206, 243, 279, 358, 394, 450, 454, 457, 458, 460, 461, 470, 471, 472, 473, 476, 504, 506, 550, 570, 572, 603, 644, 678, 752, 766, 797, 862, 866, 869, 870, 872, 873, 882, 883, 884, 885, 888, 925], "register_lazyframe_namespac": [1, 61, 62, 64], "dtypeoper": [1, 63], "ldf": [1, 63, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "_ldf": [1, 63], "upcast_integer_typ": [1, 63], "with_column": [1, 63, 151, 178, 243, 255, 265, 274, 300, 301, 303, 304, 305, 310, 313, 315, 367, 370, 371, 374, 377, 379, 380, 381, 383, 394, 410, 411, 412, 455, 461, 464, 466, 467, 470, 472, 473, 474, 476, 479, 489, 499, 500, 503, 505, 506, 512, 516, 526, 540, 543, 550, 581, 597, 644, 673, 700, 888], "tp": [1, 63], "cast": [1, 62, 63, 85, 122, 144, 150, 151, 178, 207, 220, 243, 254, 301, 312, 313, 319, 394, 412, 419, 459, 460, 479, 483, 489, 506, 550, 580, 581, 597, 622, 644, 700, 712, 713, 722, 826, 871, 872, 896, 905, 909, 925], "int64": [1, 31, 62, 63, 95, 97, 123, 136, 144, 150, 151, 178, 190, 202, 207, 243, 312, 313, 323, 326, 330, 332, 334, 337, 344, 356, 412, 419, 459, 483, 489, 500, 504, 517, 539, 550, 570, 580, 581, 597, 603, 625, 644, 712, 713, 726, 729, 736, 738, 741, 744, 751, 826, 843, 896, 907, 908, 909, 925], "int8": [1, 63, 144, 243, 312, 313, 483, 550, 712, 713, 717, 829, 896, 913, 925], "int16": [1, 63, 312, 313, 483, 550, 712, 713, 896, 925], "int32": [1, 63, 88, 119, 120, 150, 151, 163, 243, 300, 328, 351, 489, 550, 580, 581, 644, 731, 758, 804, 909, 925], "b": [1, 26, 27, 30, 33, 51, 63, 68, 85, 87, 88, 89, 90, 91, 92, 101, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 155, 156, 158, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 251, 254, 255, 266, 270, 274, 279, 281, 294, 300, 301, 308, 316, 317, 318, 356, 360, 361, 362, 364, 366, 367, 370, 371, 373, 376, 377, 378, 379, 380, 381, 383, 386, 388, 393, 405, 409, 410, 412, 414, 422, 439, 445, 447, 456, 459, 466, 482, 492, 494, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 516, 517, 518, 519, 520, 523, 526, 527, 528, 529, 530, 531, 532, 534, 537, 538, 539, 540, 541, 542, 550, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 582, 585, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 622, 623, 624, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 652, 673, 700, 716, 718, 760, 761, 769, 780, 787, 797, 827, 843, 868, 871, 878, 895, 908, 912, 925], "4": [1, 14, 22, 26, 27, 29, 30, 33, 51, 60, 61, 62, 63, 64, 65, 68, 70, 85, 87, 88, 89, 90, 91, 92, 108, 115, 116, 120, 127, 128, 129, 132, 135, 138, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 169, 171, 174, 175, 177, 178, 179, 180, 184, 188, 192, 197, 200, 201, 202, 203, 204, 205, 209, 211, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 249, 250, 254, 255, 266, 272, 273, 274, 275, 278, 286, 287, 290, 294, 300, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 320, 322, 326, 333, 334, 335, 339, 340, 342, 343, 344, 347, 348, 349, 351, 357, 360, 361, 364, 365, 366, 368, 369, 370, 371, 380, 381, 383, 386, 388, 390, 393, 394, 410, 413, 414, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 435, 437, 438, 441, 445, 446, 447, 448, 451, 461, 462, 464, 465, 468, 470, 472, 473, 476, 480, 481, 482, 484, 485, 486, 489, 490, 499, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 516, 518, 519, 523, 526, 527, 528, 529, 530, 531, 532, 537, 538, 539, 540, 541, 542, 543, 550, 564, 565, 566, 569, 571, 572, 573, 574, 575, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 605, 606, 607, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 652, 655, 662, 672, 673, 674, 677, 685, 686, 689, 701, 702, 704, 714, 716, 718, 728, 729, 735, 737, 740, 741, 742, 743, 747, 749, 750, 751, 752, 754, 755, 756, 768, 769, 776, 777, 779, 780, 782, 787, 789, 790, 791, 792, 796, 805, 811, 818, 819, 820, 822, 824, 828, 833, 835, 836, 837, 838, 839, 841, 843, 853, 857, 858, 863, 873, 874, 876, 877, 880, 882, 884, 885, 888, 895, 897, 898, 899, 908, 909, 917, 925], "c": [1, 26, 27, 30, 33, 51, 61, 63, 88, 90, 101, 108, 118, 128, 129, 130, 132, 133, 134, 135, 136, 138, 142, 143, 144, 145, 147, 148, 149, 150, 153, 155, 156, 163, 164, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 183, 185, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 206, 207, 208, 211, 214, 215, 217, 218, 220, 223, 226, 227, 228, 229, 230, 231, 233, 236, 237, 243, 255, 270, 279, 281, 371, 383, 410, 412, 439, 472, 476, 492, 494, 497, 498, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 518, 519, 520, 523, 526, 527, 528, 529, 530, 531, 532, 537, 538, 540, 541, 542, 550, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 579, 580, 585, 588, 594, 598, 601, 602, 603, 604, 607, 610, 611, 619, 622, 623, 626, 629, 630, 631, 632, 633, 634, 636, 639, 640, 644, 716, 780, 797, 884, 888, 912, 925], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 60, 61, 63, 64, 65, 68, 69, 85, 88, 89, 90, 91, 94, 95, 98, 114, 119, 120, 123, 127, 128, 129, 132, 138, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 159, 161, 162, 165, 166, 167, 169, 171, 174, 175, 177, 179, 180, 181, 184, 188, 192, 197, 200, 201, 202, 203, 204, 209, 214, 216, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 250, 267, 272, 274, 275, 278, 283, 289, 290, 300, 301, 302, 303, 304, 305, 314, 315, 316, 320, 321, 323, 341, 343, 344, 345, 348, 355, 356, 359, 365, 368, 371, 374, 377, 379, 380, 381, 383, 388, 410, 411, 414, 416, 417, 421, 422, 423, 424, 425, 427, 431, 433, 435, 441, 447, 452, 460, 461, 464, 465, 479, 482, 484, 486, 490, 499, 502, 503, 505, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 523, 526, 527, 528, 529, 530, 531, 532, 534, 537, 538, 540, 541, 542, 550, 564, 565, 566, 571, 572, 573, 574, 575, 577, 579, 580, 581, 582, 584, 586, 587, 588, 589, 592, 593, 594, 598, 605, 606, 607, 610, 611, 612, 613, 614, 615, 621, 622, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 652, 655, 659, 662, 665, 673, 674, 677, 680, 689, 700, 702, 704, 710, 714, 715, 716, 717, 718, 723, 724, 725, 726, 748, 750, 751, 755, 756, 764, 767, 776, 777, 779, 780, 804, 811, 818, 819, 820, 822, 823, 824, 828, 830, 831, 832, 834, 835, 838, 841, 843, 853, 859, 864, 872, 873, 877, 897, 910, 913, 917, 925], "6": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 85, 88, 89, 90, 91, 92, 127, 130, 133, 134, 135, 136, 138, 139, 142, 143, 145, 146, 147, 148, 150, 151, 153, 155, 156, 157, 159, 161, 162, 164, 168, 169, 170, 171, 173, 176, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 213, 214, 215, 216, 217, 218, 220, 221, 228, 236, 237, 243, 255, 275, 294, 300, 312, 313, 316, 320, 338, 340, 343, 352, 360, 361, 366, 368, 370, 388, 415, 417, 418, 421, 424, 425, 426, 427, 428, 430, 431, 432, 435, 447, 452, 456, 461, 464, 465, 484, 486, 497, 499, 510, 511, 512, 516, 519, 526, 540, 550, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 580, 581, 582, 584, 585, 587, 589, 590, 594, 598, 601, 603, 604, 605, 606, 607, 610, 611, 614, 615, 618, 619, 621, 622, 624, 625, 631, 639, 640, 644, 652, 674, 702, 708, 712, 713, 716, 718, 745, 756, 777, 811, 824, 828, 833, 835, 836, 837, 839, 843, 864, 868, 873, 877, 896, 925], "7": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 70, 130, 131, 132, 133, 134, 136, 138, 142, 143, 145, 150, 151, 153, 155, 157, 164, 168, 169, 170, 173, 176, 181, 183, 185, 187, 189, 190, 191, 193, 194, 196, 198, 199, 200, 201, 206, 207, 208, 214, 215, 216, 217, 218, 243, 313, 320, 322, 339, 341, 342, 347, 349, 351, 357, 368, 370, 421, 425, 431, 447, 484, 486, 499, 510, 511, 519, 526, 540, 550, 567, 568, 570, 572, 576, 580, 581, 582, 584, 585, 589, 599, 601, 603, 604, 614, 615, 619, 625, 644, 659, 723, 725, 731, 749, 754, 756, 828, 838, 925], "float32": [1, 27, 63, 144, 243, 644, 783, 804, 925], "lazi": [1, 63, 68, 70, 95, 108, 119, 123, 165, 178, 243, 255, 292, 500, 521, 550, 560, 585, 586, 623, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 644], "i16": [1, 63, 439, 550], "i32": [1, 63, 88, 119, 191, 243, 300, 328, 351, 439, 465, 543, 550, 604, 644, 731, 758, 804, 877, 925], "f32": [1, 63, 243, 274, 417, 439, 516, 550, 644, 673, 804, 824, 925], "i64": [1, 14, 18, 61, 62, 63, 64, 68, 85, 87, 88, 89, 90, 91, 95, 108, 120, 123, 127, 128, 129, 130, 133, 135, 136, 138, 139, 141, 142, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 160, 161, 164, 165, 168, 171, 173, 177, 178, 179, 180, 183, 184, 185, 186, 189, 191, 193, 194, 196, 197, 199, 200, 201, 203, 208, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 233, 236, 237, 243, 251, 254, 255, 273, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 287, 288, 289, 290, 293, 294, 301, 303, 304, 305, 310, 311, 312, 313, 315, 316, 323, 324, 326, 330, 332, 334, 337, 344, 346, 356, 359, 361, 362, 363, 364, 366, 368, 369, 370, 371, 374, 377, 379, 380, 381, 383, 385, 388, 391, 392, 393, 405, 410, 411, 412, 414, 415, 418, 419, 421, 422, 434, 436, 437, 439, 440, 441, 445, 446, 447, 466, 467, 480, 481, 482, 483, 484, 485, 486, 490, 491, 493, 496, 497, 499, 503, 504, 506, 510, 511, 512, 516, 517, 518, 519, 523, 526, 527, 530, 534, 536, 540, 541, 543, 550, 564, 566, 568, 569, 572, 573, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 589, 590, 591, 594, 596, 597, 598, 601, 602, 604, 605, 606, 610, 611, 613, 614, 615, 617, 618, 619, 622, 624, 626, 627, 628, 630, 631, 632, 633, 636, 639, 640, 644, 652, 653, 672, 673, 674, 677, 685, 686, 687, 689, 700, 704, 707, 710, 711, 712, 713, 716, 726, 727, 729, 736, 738, 741, 744, 748, 751, 753, 767, 769, 770, 776, 779, 787, 810, 827, 828, 831, 834, 838, 841, 844, 845, 848, 852, 853, 857, 858, 895, 897, 898, 899, 905, 911, 914, 917, 925], "register_series_namespac": [1, 61, 62, 63], "math": [1, 64, 708, 854, 900, 925], "mathshortcut": [1, 64], "": [1, 27, 29, 64, 69, 92, 97, 98, 109, 120, 133, 135, 137, 138, 149, 150, 156, 164, 165, 177, 179, 184, 185, 191, 197, 201, 205, 210, 212, 213, 214, 243, 278, 279, 286, 287, 290, 324, 345, 356, 384, 401, 405, 407, 408, 410, 411, 419, 423, 447, 461, 462, 464, 468, 470, 471, 473, 476, 479, 480, 481, 501, 504, 507, 512, 515, 517, 520, 521, 527, 530, 532, 539, 540, 550, 568, 569, 572, 579, 580, 586, 604, 611, 616, 617, 618, 628, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 672, 674, 677, 678, 680, 685, 686, 687, 689, 698, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 723, 727, 748, 749, 754, 761, 763, 764, 767, 768, 769, 770, 772, 775, 776, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 818, 819, 820, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 852, 853, 854, 855, 857, 858, 860, 863, 864, 866, 867, 868, 870, 871, 873, 874, 875, 876, 877, 878, 880, 881, 882, 885, 886, 887, 888, 891, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 909, 911, 912, 913, 914, 915, 916, 925], "_": [1, 60, 64, 92, 179, 205, 243, 472, 884, 904, 925], "squar": [1, 64, 225, 384, 448, 550, 628, 799, 859, 925], "cube": [1, 64], "s2": [1, 116, 144, 243, 652, 702, 718, 787, 811, 843, 908, 917, 925], "renam": [1, 88, 97, 98, 191, 220, 223, 243, 251, 393, 403, 481, 536, 539, 550, 604, 622, 626, 644, 805, 894, 905, 925], "n2": 1, "in_plac": [1, 155, 195, 218, 243, 825, 827, 851, 858, 925], "true": [1, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 65, 67, 68, 70, 85, 86, 90, 94, 97, 98, 100, 101, 102, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 124, 126, 128, 129, 132, 141, 144, 145, 147, 148, 149, 150, 156, 158, 159, 160, 162, 165, 166, 169, 174, 175, 177, 179, 180, 187, 188, 189, 191, 197, 203, 207, 210, 211, 212, 213, 214, 216, 220, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 243, 250, 252, 253, 254, 255, 265, 271, 288, 291, 296, 300, 309, 310, 311, 312, 313, 327, 342, 343, 347, 352, 353, 354, 355, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 419, 429, 434, 439, 444, 446, 447, 451, 453, 455, 459, 460, 465, 471, 472, 474, 476, 480, 481, 485, 490, 491, 494, 498, 499, 500, 501, 507, 508, 519, 535, 537, 539, 543, 550, 564, 565, 566, 571, 573, 575, 579, 580, 585, 586, 588, 590, 594, 598, 604, 607, 608, 609, 611, 616, 617, 618, 622, 627, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 644, 650, 651, 652, 653, 663, 687, 690, 694, 698, 702, 703, 730, 749, 750, 754, 760, 762, 763, 764, 770, 774, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 799, 811, 819, 820, 826, 836, 843, 856, 858, 863, 865, 867, 871, 872, 877, 883, 884, 886, 888, 907, 908, 910, 916, 917, 925], "s3": [1, 100, 109, 113, 925], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 57, 59, 60, 61, 63, 64, 68, 69, 92, 114, 118, 119, 127, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 145, 148, 153, 155, 164, 168, 169, 170, 173, 181, 183, 185, 187, 189, 190, 191, 193, 194, 196, 198, 199, 200, 201, 206, 207, 208, 214, 215, 217, 218, 220, 243, 254, 266, 273, 274, 308, 310, 313, 314, 317, 318, 320, 370, 386, 413, 414, 421, 422, 425, 426, 428, 430, 432, 439, 445, 447, 462, 468, 476, 482, 486, 502, 507, 508, 509, 511, 512, 516, 518, 523, 526, 527, 528, 529, 530, 531, 532, 537, 538, 540, 541, 542, 550, 567, 568, 569, 570, 572, 576, 582, 585, 589, 590, 598, 601, 603, 604, 614, 615, 619, 622, 625, 644, 672, 673, 714, 731, 777, 818, 822, 828, 830, 833, 835, 836, 837, 839, 874, 880, 888, 925], "9": [1, 26, 27, 30, 33, 60, 68, 127, 131, 144, 151, 153, 157, 191, 200, 214, 215, 218, 220, 236, 243, 254, 266, 273, 285, 288, 308, 310, 313, 317, 318, 320, 322, 339, 348, 349, 370, 375, 383, 386, 421, 423, 425, 431, 441, 445, 486, 499, 505, 510, 511, 550, 581, 582, 584, 589, 604, 614, 619, 622, 639, 644, 672, 687, 725, 735, 737, 743, 749, 750, 754, 755, 787, 828, 830, 838, 840, 853, 925], "27": [1, 64, 236, 313, 328, 340, 351, 413, 550, 639], "16": [1, 29, 41, 54, 62, 69, 92, 114, 150, 151, 220, 243, 267, 310, 313, 358, 370, 425, 465, 499, 510, 515, 516, 519, 532, 537, 550, 580, 581, 607, 622, 644, 665, 749, 754, 766, 818, 854, 877, 900, 925], "64": [1, 33, 40, 43, 56, 62, 64, 243, 413, 550, 609, 644, 818, 925], "25": [1, 29, 64, 70, 150, 151, 165, 216, 220, 243, 315, 328, 342, 347, 351, 521, 550, 580, 581, 586, 592, 620, 622, 644, 717, 749, 754, 760, 777, 818, 822, 925], "125": [1, 29, 64, 243, 818, 925], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 178, 207, 243, 412, 501, 520, 550, 597, 644, 653, 907, 908, 925], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 66, 85, 86, 87, 88, 89, 90, 91, 97, 98, 100, 101, 102, 106, 108, 109, 110, 112, 117, 119, 120, 124, 127, 131, 135, 139, 141, 142, 144, 161, 162, 163, 177, 178, 187, 188, 203, 204, 206, 207, 214, 243, 255, 270, 274, 300, 343, 361, 375, 392, 394, 403, 412, 421, 423, 435, 438, 465, 476, 485, 499, 507, 518, 525, 537, 550, 569, 575, 597, 644, 652, 653, 669, 673, 718, 750, 769, 787, 798, 805, 828, 830, 842, 845, 877, 888, 898, 906, 907, 908, 925], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 131, 178, 207, 243, 412, 550, 597, 644, 908, 925], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 925, 932], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 86, 97, 98, 101, 117, 135, 149, 157, 162, 175, 181, 187, 188, 212, 220, 235, 243, 252, 359, 370, 416, 417, 424, 425, 426, 427, 428, 430, 431, 432, 492, 507, 532, 533, 537, 544, 546, 550, 551, 552, 555, 556, 557, 560, 569, 584, 599, 617, 622, 638, 644, 653, 767, 779, 823, 824, 835, 909, 919, 921, 925, 926, 929, 930, 931], "A": [4, 27, 29, 48, 67, 70, 97, 98, 99, 106, 108, 144, 150, 165, 179, 188, 203, 214, 215, 216, 220, 243, 249, 292, 320, 323, 326, 330, 332, 334, 337, 344, 359, 373, 376, 377, 379, 392, 393, 401, 414, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 451, 452, 457, 458, 460, 479, 482, 505, 516, 520, 550, 580, 586, 601, 619, 622, 644, 691, 723, 726, 729, 736, 738, 741, 744, 751, 767, 830, 831, 832, 834, 837, 838, 839, 863, 864, 869, 870, 872, 878, 879, 888, 891, 925], "encod": [4, 59, 97, 98, 108, 296, 453, 694, 865], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 31, 32, 61, 65, 70, 86, 88, 91, 92, 97, 98, 101, 102, 106, 108, 110, 111, 112, 115, 116, 118, 119, 120, 124, 126, 130, 135, 149, 152, 162, 165, 171, 189, 191, 196, 205, 211, 212, 214, 220, 243, 255, 287, 291, 292, 350, 367, 375, 394, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 440, 444, 445, 463, 469, 470, 475, 500, 535, 539, 550, 567, 569, 571, 579, 585, 586, 590, 594, 604, 608, 609, 610, 617, 622, 625, 628, 644, 652, 653, 686, 690, 691, 757, 775, 787, 805, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 845, 852, 856, 857, 875, 881, 882, 887, 907, 925], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 51, 59, 70, 97, 98, 108, 117, 118, 120, 122, 144, 148, 149, 150, 151, 165, 191, 197, 210, 214, 216, 220, 223, 243, 279, 298, 301, 338, 342, 347, 358, 364, 371, 394, 410, 424, 425, 426, 427, 428, 430, 431, 432, 447, 450, 451, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 501, 503, 506, 520, 527, 530, 539, 550, 571, 578, 579, 580, 581, 586, 604, 611, 616, 622, 625, 626, 644, 678, 696, 700, 745, 749, 754, 766, 780, 861, 862, 863, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 925], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 578, 600, 644], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 274, 673], "decim": [5, 27, 29, 243, 433, 550, 840, 925], "temporari": 5, "remov": [5, 7, 133, 215, 243, 255, 267, 356, 358, 463, 469, 475, 517, 532, 537, 550, 568, 619, 644, 665, 766, 875, 881, 887, 925], "later": 5, "onc": [5, 97, 98, 101, 126, 127, 189, 223, 243, 255, 434, 550, 563, 626, 644, 653, 841, 925], "stabil": 5, "happen": 5, "being": [5, 69, 97, 98, 108, 113, 214, 215, 243, 255, 314, 342, 424, 425, 426, 427, 428, 430, 431, 432, 516, 543, 550, 619, 644, 714, 749, 777, 822, 925], "consid": [5, 69, 97, 98, 108, 113, 127, 135, 145, 171, 212, 214, 215, 243, 255, 303, 304, 305, 314, 342, 424, 425, 426, 427, 428, 430, 431, 432, 510, 519, 550, 569, 582, 589, 594, 617, 619, 644, 653, 704, 705, 706, 714, 749, 777, 822, 843, 844, 845, 925], "break": [5, 69, 113, 214, 215, 243, 255, 314, 342, 424, 425, 426, 427, 428, 430, 431, 432, 550, 619, 644, 714, 749, 777, 822, 925], "chang": [5, 25, 60, 69, 97, 98, 113, 214, 215, 216, 243, 255, 314, 315, 342, 411, 424, 425, 426, 427, 428, 430, 431, 432, 550, 619, 644, 714, 748, 749, 777, 818, 822, 851, 925], "current": [5, 8, 25, 86, 99, 126, 128, 129, 243, 292, 342, 411, 550, 560, 564, 565, 644, 703, 707, 749, 818, 925], "alpha": [5, 67, 255, 353, 354, 355, 550, 566, 571, 573, 598, 607, 644, 762, 763, 764, 925], "stage": [5, 255, 550], "cfg": [6, 7, 8, 14, 124, 191, 220, 243, 604, 622, 644], "previous": 6, "save": [6, 560], "share": [6, 51, 137, 243, 761, 925], "option": [6, 7, 8, 25, 29, 37, 60, 70, 97, 100, 101, 102, 106, 109, 110, 112, 114, 117, 118, 119, 120, 165, 171, 203, 211, 243, 384, 423, 424, 425, 426, 427, 428, 430, 431, 432, 444, 470, 525, 539, 550, 560, 585, 586, 594, 644, 795, 799, 830, 831, 832, 833, 834, 835, 837, 838, 839, 845, 856, 882, 905, 925], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 50, 52, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 123, 126, 127, 128, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 162, 163, 164, 165, 167, 169, 171, 172, 174, 175, 177, 178, 179, 181, 183, 184, 185, 187, 188, 189, 191, 193, 194, 196, 197, 198, 199, 200, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 223, 225, 228, 235, 237, 243, 251, 254, 255, 264, 267, 270, 271, 272, 273, 274, 277, 278, 279, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 324, 338, 341, 342, 346, 347, 350, 352, 353, 354, 355, 356, 359, 361, 362, 366, 367, 368, 370, 371, 375, 384, 387, 389, 392, 393, 394, 410, 411, 412, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 484, 485, 490, 491, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 519, 520, 521, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 539, 540, 541, 550, 564, 566, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 585, 586, 589, 590, 594, 595, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 628, 631, 638, 640, 644, 649, 652, 653, 662, 665, 669, 670, 671, 672, 673, 676, 677, 678, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 703, 704, 705, 706, 710, 711, 712, 713, 714, 715, 717, 718, 722, 723, 724, 727, 745, 748, 749, 753, 754, 757, 760, 761, 762, 763, 764, 767, 768, 769, 770, 775, 776, 777, 779, 780, 794, 795, 799, 801, 805, 818, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 852, 856, 857, 858, 860, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 891, 892, 894, 897, 898, 904, 905, 906, 907, 908, 910, 911, 914, 915, 916, 917, 925], "json": [6, 8, 31, 32, 104, 105, 111, 243, 459, 460, 560, 578, 600, 625, 644, 871, 872], "produc": [6, 119, 120, 272, 400, 526, 590, 644, 671], "reset": [7, 124], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 65, 85, 87, 88, 89, 90, 91, 92, 95, 97, 98, 106, 108, 117, 118, 119, 120, 123, 135, 137, 149, 151, 152, 162, 165, 171, 177, 179, 187, 188, 189, 205, 212, 214, 221, 243, 287, 291, 292, 301, 352, 353, 354, 355, 367, 389, 394, 407, 408, 411, 417, 434, 440, 457, 463, 465, 469, 470, 475, 476, 500, 507, 521, 525, 535, 537, 539, 550, 569, 571, 579, 581, 586, 594, 609, 617, 625, 644, 686, 690, 691, 700, 760, 761, 762, 763, 764, 775, 805, 814, 815, 818, 824, 841, 852, 860, 869, 875, 877, 881, 882, 887, 915, 925], "state": [7, 67, 78, 510, 560, 566, 571, 573, 598, 607, 644], "note": [7, 17, 29, 37, 60, 70, 85, 86, 87, 89, 91, 95, 97, 99, 100, 106, 108, 109, 118, 119, 120, 123, 124, 126, 127, 131, 140, 150, 151, 162, 164, 165, 175, 178, 187, 188, 204, 206, 211, 215, 216, 220, 243, 255, 274, 291, 312, 313, 317, 318, 338, 342, 347, 371, 377, 379, 424, 425, 426, 427, 428, 430, 431, 432, 444, 461, 463, 464, 469, 475, 476, 483, 510, 519, 534, 550, 566, 573, 574, 580, 581, 582, 586, 589, 601, 607, 619, 622, 644, 653, 673, 690, 712, 713, 745, 754, 844, 845, 851, 856, 873, 875, 876, 881, 887, 896, 925], "oper": [7, 29, 51, 68, 75, 76, 85, 87, 88, 89, 90, 91, 97, 106, 127, 139, 144, 149, 156, 166, 172, 175, 177, 178, 182, 202, 206, 207, 211, 214, 222, 223, 243, 250, 292, 309, 310, 311, 312, 313, 314, 383, 403, 419, 497, 498, 506, 516, 550, 573, 579, 582, 585, 589, 594, 595, 626, 644, 652, 710, 711, 712, 713, 714, 826, 903, 906, 907, 908, 916, 925], "from": [7, 27, 29, 60, 70, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 132, 133, 137, 139, 148, 150, 151, 162, 163, 165, 166, 171, 183, 187, 189, 191, 211, 212, 214, 216, 243, 309, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 356, 370, 384, 407, 408, 411, 434, 447, 457, 459, 465, 476, 492, 494, 503, 513, 514, 515, 525, 537, 549, 550, 568, 573, 578, 580, 581, 586, 594, 600, 601, 604, 617, 623, 644, 652, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 761, 795, 799, 814, 815, 816, 818, 841, 869, 871, 877, 914, 917, 925], "environ": [7, 25], "local": [7, 100, 109, 819, 820, 925], "non": [7, 29, 37, 60, 90, 163, 171, 191, 215, 220, 243, 411, 423, 424, 425, 426, 427, 428, 430, 431, 432, 452, 458, 503, 506, 539, 550, 594, 604, 619, 622, 644, 691, 818, 830, 831, 832, 833, 834, 835, 837, 838, 839, 864, 870, 907, 925], "env": 7, "back": [7, 60, 139, 207, 243, 410, 550, 652, 908, 925], "valu": [7, 10, 11, 25, 27, 29, 31, 45, 46, 58, 60, 68, 69, 88, 90, 97, 98, 99, 108, 113, 115, 116, 117, 118, 119, 120, 122, 124, 126, 127, 135, 139, 140, 141, 145, 148, 150, 151, 152, 153, 157, 162, 167, 168, 169, 170, 171, 173, 175, 177, 179, 180, 181, 183, 187, 188, 189, 193, 194, 197, 198, 199, 200, 203, 204, 207, 210, 214, 215, 216, 217, 226, 227, 229, 230, 231, 233, 234, 243, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 272, 273, 276, 277, 278, 280, 282, 283, 284, 286, 289, 290, 292, 293, 294, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 313, 314, 315, 317, 318, 320, 322, 335, 339, 348, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 376, 377, 379, 380, 381, 382, 385, 386, 390, 391, 392, 394, 395, 396, 397, 404, 405, 406, 407, 408, 409, 411, 416, 417, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 437, 438, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 466, 467, 470, 472, 473, 474, 479, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 498, 503, 506, 508, 510, 511, 512, 518, 519, 525, 527, 528, 529, 530, 531, 534, 535, 540, 543, 550, 569, 574, 575, 580, 581, 583, 584, 591, 592, 593, 594, 596, 599, 601, 605, 606, 611, 612, 613, 616, 619, 620, 625, 629, 630, 632, 633, 634, 636, 637, 644, 648, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 667, 668, 671, 672, 675, 676, 677, 679, 681, 682, 683, 685, 689, 692, 694, 695, 696, 697, 700, 701, 704, 705, 706, 708, 709, 714, 715, 716, 717, 719, 720, 723, 725, 742, 746, 755, 761, 762, 763, 764, 767, 768, 769, 772, 774, 775, 776, 777, 779, 780, 782, 784, 785, 787, 788, 789, 790, 791, 792, 796, 801, 805, 806, 807, 809, 810, 812, 814, 815, 816, 817, 818, 821, 822, 823, 824, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 843, 844, 845, 848, 849, 853, 854, 855, 856, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 876, 878, 879, 882, 884, 885, 886, 891, 896, 897, 898, 899, 900, 901, 908, 909, 912, 914, 916, 917, 925], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 123, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 550, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 677, 678, 680, 685, 686, 687, 689, 691, 698, 700, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 767, 768, 769, 770, 772, 775, 776, 777, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 800, 804, 805, 806, 807, 808, 809, 810, 811, 812, 818, 819, 820, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 852, 853, 854, 855, 857, 858, 860, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 925], "bool": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 60, 65, 67, 68, 85, 86, 90, 97, 98, 102, 106, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 126, 128, 129, 141, 142, 144, 145, 147, 148, 149, 150, 155, 156, 158, 159, 160, 165, 177, 179, 189, 195, 197, 203, 207, 210, 211, 212, 213, 216, 218, 220, 227, 229, 230, 233, 243, 252, 253, 254, 255, 264, 267, 271, 272, 274, 288, 291, 293, 296, 300, 309, 310, 311, 312, 313, 314, 327, 343, 352, 353, 354, 355, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 392, 398, 399, 417, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 438, 439, 444, 446, 447, 451, 453, 455, 465, 466, 467, 471, 472, 474, 476, 481, 490, 491, 494, 498, 499, 500, 501, 507, 510, 525, 535, 537, 539, 543, 550, 564, 566, 571, 573, 575, 576, 579, 580, 585, 586, 590, 594, 598, 607, 608, 609, 611, 616, 617, 618, 622, 630, 632, 633, 636, 644, 650, 651, 652, 653, 662, 665, 670, 671, 673, 687, 690, 692, 694, 698, 703, 710, 711, 712, 713, 714, 715, 730, 750, 760, 762, 763, 764, 770, 774, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 819, 820, 822, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 845, 846, 851, 856, 858, 863, 865, 867, 877, 878, 879, 883, 884, 886, 888, 906, 907, 908, 910, 911, 914, 916, 925], "ascii": [9, 17, 462, 464, 468, 479, 874, 876, 880, 891], "charact": [9, 11, 17, 23, 27, 97, 98, 108, 243, 338, 456, 461, 462, 463, 468, 469, 471, 472, 475, 479, 598, 644, 745, 868, 873, 874, 875, 880, 881, 883, 884, 887, 891], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 243], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 85, 97, 98, 100, 108, 109, 179, 202, 207, 214, 215, 243, 619, 644, 908, 925], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 60, 65, 67, 70, 86, 90, 97, 98, 101, 102, 106, 108, 111, 112, 115, 116, 117, 118, 119, 120, 126, 128, 129, 132, 144, 145, 147, 148, 149, 150, 155, 156, 158, 159, 160, 162, 165, 166, 169, 174, 175, 177, 179, 180, 187, 188, 189, 195, 197, 203, 207, 210, 211, 216, 218, 220, 226, 227, 229, 230, 231, 233, 236, 243, 252, 253, 255, 264, 267, 271, 274, 288, 291, 293, 309, 310, 311, 312, 313, 314, 327, 343, 352, 353, 354, 355, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 392, 417, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 439, 444, 446, 447, 451, 455, 459, 465, 466, 467, 471, 472, 474, 476, 490, 491, 494, 498, 500, 501, 507, 510, 525, 535, 537, 539, 543, 550, 564, 565, 566, 571, 573, 579, 580, 585, 586, 588, 590, 598, 607, 608, 609, 611, 616, 622, 629, 630, 632, 633, 634, 636, 639, 644, 652, 662, 665, 673, 687, 690, 692, 698, 702, 703, 710, 711, 712, 713, 714, 715, 730, 750, 760, 762, 763, 764, 770, 780, 781, 782, 784, 787, 788, 789, 790, 791, 792, 794, 795, 796, 799, 811, 819, 820, 822, 824, 825, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 846, 851, 856, 858, 863, 867, 871, 877, 878, 879, 883, 884, 886, 888, 906, 907, 908, 910, 911, 914, 916, 917, 925], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 466, 878], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 452, 458, 864, 870, 905, 925], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 60, 62, 64, 69, 88, 113, 119, 128, 129, 131, 132, 133, 135, 136, 140, 141, 144, 147, 148, 149, 156, 164, 165, 169, 170, 180, 181, 196, 197, 198, 217, 220, 223, 227, 229, 230, 231, 232, 233, 235, 236, 243, 249, 256, 257, 258, 259, 260, 261, 283, 300, 302, 306, 307, 314, 317, 318, 343, 352, 353, 354, 355, 356, 357, 365, 370, 377, 379, 380, 381, 383, 384, 389, 390, 395, 396, 397, 404, 407, 408, 411, 413, 416, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 442, 443, 444, 448, 449, 487, 488, 495, 502, 503, 505, 507, 509, 517, 528, 529, 532, 537, 538, 542, 550, 564, 568, 569, 574, 575, 579, 585, 586, 592, 593, 599, 611, 612, 620, 622, 623, 626, 630, 632, 633, 634, 635, 636, 638, 639, 644, 654, 655, 656, 657, 658, 659, 701, 708, 709, 714, 715, 716, 750, 763, 764, 768, 772, 777, 818, 822, 830, 832, 833, 835, 836, 837, 839, 840, 854, 855, 859, 900, 901, 913, 925], "fmt": [10, 345, 369, 476, 520, 550, 583, 644, 752, 888], "floatfmt": 10, "mix": [10, 476, 716, 888, 925], "control": [10, 29, 118, 243, 571, 644], "how": [10, 29, 51, 68, 88, 91, 99, 135, 164, 214, 215, 243, 272, 273, 301, 315, 370, 410, 420, 550, 569, 585, 619, 644, 671, 672, 700, 717, 925], "float": [10, 29, 39, 40, 69, 113, 115, 116, 117, 119, 120, 137, 140, 165, 181, 189, 194, 235, 243, 271, 272, 302, 303, 304, 305, 317, 318, 343, 352, 353, 354, 355, 360, 365, 370, 371, 373, 376, 377, 379, 380, 381, 389, 395, 404, 407, 408, 413, 416, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 438, 502, 512, 527, 528, 529, 530, 533, 535, 538, 540, 542, 550, 574, 586, 599, 606, 607, 638, 644, 670, 671, 698, 701, 704, 705, 706, 715, 718, 750, 760, 761, 762, 763, 764, 768, 772, 777, 780, 786, 799, 802, 806, 807, 808, 809, 814, 815, 821, 822, 823, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 856, 860, 896, 915, 925], "point": [10, 29, 39, 40, 119, 120, 140, 150, 166, 243, 302, 317, 318, 343, 360, 365, 377, 379, 433, 434, 550, 574, 580, 590, 601, 644, 701, 750, 768, 772, 786, 840, 841, 925], "full": [10, 36, 66, 97, 98, 100, 108, 109, 590, 644], "format": [10, 13, 17, 27, 29, 96, 97, 98, 108, 113, 138, 148, 162, 171, 188, 204, 241, 243, 342, 345, 465, 476, 498, 572, 578, 594, 625, 644, 752, 877, 888, 924], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 60, 79, 85, 87, 89, 91, 94, 95, 97, 98, 101, 108, 111, 118, 119, 121, 123, 128, 137, 138, 140, 141, 153, 162, 163, 166, 167, 174, 175, 189, 193, 194, 200, 210, 214, 226, 228, 237, 243, 265, 273, 278, 286, 290, 292, 294, 308, 314, 315, 325, 328, 333, 335, 343, 348, 349, 351, 353, 354, 355, 359, 361, 366, 368, 377, 379, 386, 387, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 437, 438, 440, 461, 464, 466, 472, 473, 484, 490, 507, 508, 523, 537, 541, 550, 564, 572, 573, 574, 575, 582, 589, 598, 605, 606, 609, 614, 616, 629, 631, 640, 644, 672, 677, 685, 689, 691, 703, 714, 717, 728, 731, 740, 742, 750, 755, 756, 758, 761, 762, 763, 764, 767, 769, 776, 786, 801, 811, 812, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 848, 849, 852, 860, 873, 876, 878, 884, 885, 897, 910, 915, 925], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 62, 88, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 117, 118, 119, 120, 121, 123, 127, 128, 137, 140, 141, 143, 152, 153, 154, 156, 162, 163, 165, 167, 168, 169, 173, 174, 175, 185, 187, 189, 192, 193, 194, 196, 198, 199, 200, 201, 208, 210, 214, 217, 219, 221, 228, 237, 243, 271, 272, 273, 277, 278, 286, 287, 290, 291, 292, 294, 303, 304, 305, 314, 315, 353, 354, 355, 359, 360, 361, 366, 367, 368, 371, 387, 411, 413, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 445, 449, 457, 462, 465, 466, 468, 470, 472, 473, 479, 484, 485, 486, 490, 495, 500, 507, 508, 512, 513, 514, 515, 521, 523, 527, 529, 530, 531, 532, 535, 537, 538, 539, 540, 541, 542, 550, 564, 573, 574, 575, 582, 586, 589, 598, 605, 606, 609, 610, 612, 614, 615, 616, 620, 621, 624, 631, 640, 644, 660, 661, 670, 671, 672, 676, 677, 685, 686, 689, 690, 691, 698, 702, 703, 704, 705, 706, 714, 717, 761, 762, 763, 764, 767, 768, 769, 775, 776, 777, 780, 800, 801, 806, 807, 809, 811, 812, 814, 815, 816, 817, 818, 821, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 848, 849, 852, 857, 860, 869, 874, 877, 878, 880, 882, 884, 885, 891, 896, 897, 898, 899, 910, 915, 925], "size": [12, 33, 97, 98, 118, 119, 120, 137, 150, 214, 243, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 500, 550, 580, 609, 644, 761, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 925], "overwrit": [12, 28, 85, 87, 88, 89, 91, 97, 98, 108, 126, 243, 573, 644], "chunk": [12, 33, 94, 97, 98, 106, 108, 110, 111, 112, 119, 120, 139, 163, 174, 243, 254, 418, 550, 609, 644, 652, 702, 773, 811, 825, 903, 925], "stream": [12, 30, 67, 149, 212, 243, 566, 571, 573, 579, 590, 594, 598, 607, 608, 609, 617, 644], "engin": [12, 28, 99, 127, 149, 212, 225, 243, 579, 590, 594, 617, 628, 644, 653, 925], "By": [12, 97, 98, 101, 108, 165, 243, 465, 525, 586, 644, 860, 877, 907, 915, 925], "determin": [12, 29, 58, 60, 68, 88, 91, 97, 98, 101, 106, 108, 112, 127, 144, 150, 151, 162, 163, 211, 216, 243, 292, 301, 327, 400, 420, 424, 425, 426, 427, 428, 430, 431, 432, 444, 550, 580, 581, 644, 691, 700, 730, 777, 856, 925], "schema": [12, 61, 62, 63, 68, 80, 81, 83, 85, 87, 88, 89, 91, 97, 98, 103, 107, 108, 111, 118, 119, 127, 128, 129, 136, 137, 172, 175, 243, 292, 400, 539, 564, 565, 570, 590, 595, 625, 628, 644, 707, 925], "thread": [12, 27, 94, 97, 98, 99, 121, 243, 255, 274, 550, 673], "pool": [12, 121], "For": [12, 29, 99, 100, 101, 109, 139, 151, 164, 165, 225, 243, 292, 300, 353, 354, 355, 401, 419, 444, 510, 519, 520, 550, 581, 586, 628, 644, 652, 762, 763, 764, 826, 856, 907, 925], "some": [12, 25, 29, 88, 97, 98, 108, 135, 243, 569, 644, 787, 925], "dataset": [12, 97, 98, 108, 113, 384, 550, 560, 590, 644, 799, 925], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 97, 98, 99, 102, 106, 108, 109, 110, 111, 119, 120, 122, 127, 136, 137, 139, 141, 144, 150, 178, 187, 191, 197, 205, 212, 243, 303, 304, 305, 353, 354, 355, 361, 392, 394, 401, 446, 447, 463, 469, 475, 476, 501, 510, 519, 550, 575, 580, 590, 604, 609, 611, 617, 644, 652, 704, 705, 706, 761, 762, 763, 764, 769, 805, 844, 845, 875, 881, 887, 904, 925], "have": [12, 25, 29, 60, 86, 97, 98, 101, 119, 120, 122, 139, 162, 182, 188, 204, 243, 314, 353, 354, 355, 401, 417, 476, 550, 594, 607, 624, 644, 652, 714, 748, 762, 763, 764, 774, 824, 888, 925], "larg": 12, "element": [12, 22, 95, 120, 123, 210, 243, 255, 256, 257, 258, 259, 260, 261, 272, 274, 275, 306, 307, 309, 310, 311, 312, 313, 314, 357, 367, 375, 390, 411, 417, 420, 435, 441, 442, 443, 448, 472, 473, 487, 488, 490, 550, 616, 644, 653, 654, 655, 656, 657, 658, 659, 671, 673, 674, 703, 708, 709, 710, 711, 712, 713, 714, 765, 770, 776, 787, 801, 803, 818, 824, 842, 853, 854, 855, 859, 860, 884, 885, 897, 900, 901, 910, 911, 915, 925], "too": 12, "optimist": 12, "lead": [12, 113, 243, 436, 463, 475, 479, 485, 494, 507, 527, 530, 537, 550, 590, 628, 644, 846, 875, 887, 891, 925], "out": [12, 114, 151, 243, 277, 291, 296, 373, 376, 451, 453, 550, 581, 608, 609, 644, 676, 690, 694, 863, 865], "memori": [12, 33, 68, 85, 86, 89, 90, 91, 97, 98, 102, 106, 108, 110, 111, 112, 126, 127, 139, 195, 225, 243, 418, 439, 550, 609, 628, 644, 652, 653, 825, 850, 851, 925], "error": [12, 71, 97, 98, 108, 187, 243, 279, 291, 296, 300, 383, 451, 453, 459, 460, 476, 550, 628, 678, 690, 694, 698, 863, 865, 871, 872, 888, 925], "row": [12, 17, 22, 27, 29, 31, 33, 60, 61, 63, 77, 79, 84, 88, 89, 91, 97, 98, 101, 102, 106, 108, 110, 111, 112, 115, 118, 119, 127, 128, 135, 139, 142, 144, 148, 150, 152, 153, 158, 160, 162, 163, 165, 166, 167, 171, 175, 189, 196, 200, 201, 204, 210, 212, 214, 215, 221, 225, 228, 237, 243, 255, 265, 275, 358, 368, 387, 411, 421, 445, 447, 456, 484, 501, 510, 511, 519, 523, 527, 530, 534, 541, 550, 564, 566, 569, 573, 576, 577, 580, 582, 586, 587, 589, 590, 594, 609, 610, 614, 615, 616, 617, 619, 624, 628, 631, 640, 644, 652, 674, 766, 776, 818, 828, 857, 868, 897, 925], "per": [12, 27, 29, 118, 119, 148, 175, 176, 197, 210, 232, 234, 235, 243, 255, 274, 277, 291, 447, 501, 550, 611, 616, 635, 637, 638, 644, 673, 676, 690], "everi": [12, 97, 98, 108, 150, 201, 204, 216, 243, 268, 269, 273, 275, 277, 278, 287, 290, 309, 310, 311, 312, 313, 314, 342, 347, 358, 456, 486, 510, 511, 550, 573, 580, 615, 644, 667, 668, 672, 674, 676, 677, 686, 689, 710, 711, 712, 713, 714, 749, 754, 766, 868, 899, 925], "process": [12, 27, 243, 608, 609, 644], "liter": [13, 17, 65, 70, 101, 120, 148, 162, 168, 169, 173, 174, 177, 187, 188, 191, 199, 203, 220, 243, 252, 253, 320, 359, 371, 383, 418, 451, 466, 467, 500, 503, 506, 513, 514, 525, 535, 539, 543, 550, 575, 604, 622, 644, 650, 651, 723, 767, 780, 844, 845, 863, 878, 879, 925], "left": [13, 70, 115, 116, 150, 151, 164, 165, 215, 243, 353, 354, 355, 370, 371, 424, 425, 426, 427, 428, 430, 431, 432, 435, 462, 479, 489, 503, 510, 511, 519, 534, 550, 580, 581, 585, 586, 619, 644, 762, 763, 764, 780, 842, 874, 891, 909, 925], "center": [13, 353, 354, 355, 423, 424, 425, 426, 427, 428, 430, 431, 432, 550, 762, 763, 764, 830, 831, 832, 833, 834, 835, 837, 838, 839, 925], "right": [13, 15, 29, 70, 97, 98, 115, 116, 150, 151, 164, 165, 243, 353, 354, 355, 371, 424, 425, 426, 427, 428, 430, 431, 432, 435, 444, 468, 503, 550, 580, 581, 585, 586, 644, 762, 763, 764, 780, 842, 856, 880, 925], "cell": 13, "align": [13, 60, 479, 891], "keyerror": [13, 17], "recognis": [13, 17, 117], "column_abc": 13, "column_xyz": 13, "visibl": [14, 137, 243, 761, 925], "eg": [14, 22, 29, 243, 342, 476], "rang": [14, 29, 69, 70, 99, 137, 150, 163, 243, 322, 335, 339, 340, 342, 347, 348, 370, 500, 505, 513, 514, 550, 580, 644, 715, 725, 742, 746, 747, 749, 754, 755, 761, 818, 822, 925], "100": [14, 29, 88, 91, 97, 98, 108, 111, 243, 479, 500, 644, 831, 832, 834, 925], "98": [14, 156, 243, 446, 485, 490, 550], "99": [14, 140, 141, 156, 159, 243, 250, 359, 361, 446, 485, 490, 550, 574, 575, 644, 760, 767, 925], "10": [14, 26, 27, 29, 30, 33, 60, 68, 69, 70, 99, 108, 119, 120, 129, 139, 147, 150, 151, 153, 155, 156, 157, 174, 178, 180, 184, 185, 191, 200, 220, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 243, 254, 262, 263, 264, 266, 267, 273, 278, 286, 287, 290, 303, 308, 310, 313, 315, 317, 318, 320, 342, 347, 350, 367, 368, 370, 375, 383, 386, 387, 390, 411, 425, 445, 479, 484, 503, 510, 516, 519, 521, 523, 526, 532, 537, 541, 550, 566, 580, 581, 582, 584, 589, 597, 598, 604, 609, 613, 614, 622, 626, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 644, 653, 672, 677, 685, 686, 689, 704, 715, 717, 723, 754, 757, 760, 776, 787, 801, 803, 818, 844, 845, 897, 925], "95": [14, 250, 550], "96": [14, 250, 550], "97": [14, 156, 243, 250, 550], "move": [15, 353, 354, 355, 424, 425, 427, 431, 550, 762, 763, 764, 831, 832, 834, 838, 925], "inlin": 15, "parenthes": 15, "print": [16, 98, 114, 136, 148, 149, 163, 166, 222, 243, 369, 550, 583, 644, 787, 830, 925], "below": [16, 29, 100, 109, 135, 243, 370, 543, 550, 569, 644], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 60], "utf8_full_condens": 17, "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 452, 457, 458, 460, 864, 869, 870, 872], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 60, 69, 70, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 127, 128, 132, 135, 140, 141, 148, 150, 151, 152, 157, 164, 165, 166, 169, 171, 175, 176, 187, 189, 191, 194, 196, 197, 203, 205, 207, 211, 212, 213, 214, 215, 216, 220, 223, 243, 251, 254, 255, 266, 277, 287, 292, 294, 303, 304, 305, 308, 310, 313, 317, 318, 341, 342, 347, 353, 354, 355, 356, 359, 360, 361, 366, 367, 370, 371, 377, 378, 379, 380, 381, 386, 392, 394, 409, 411, 418, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 438, 439, 440, 441, 445, 446, 450, 451, 454, 455, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 472, 473, 474, 475, 476, 479, 480, 481, 489, 497, 499, 500, 503, 506, 508, 514, 515, 517, 518, 525, 526, 535, 536, 538, 539, 542, 550, 564, 565, 569, 574, 575, 580, 581, 584, 585, 586, 588, 590, 594, 604, 606, 607, 608, 609, 610, 611, 617, 618, 619, 622, 623, 625, 626, 628, 644, 653, 660, 661, 676, 686, 691, 703, 704, 715, 716, 718, 732, 733, 734, 739, 748, 749, 754, 759, 760, 762, 763, 764, 767, 768, 769, 771, 774, 775, 777, 778, 779, 780, 791, 792, 795, 799, 805, 806, 807, 808, 809, 813, 822, 823, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 847, 849, 852, 853, 856, 857, 860, 862, 863, 866, 867, 871, 872, 873, 874, 875, 876, 877, 880, 881, 882, 884, 885, 886, 887, 888, 902, 905, 908, 909, 915, 916, 925], "rounded_corn": 17, "style": [17, 29, 179, 243], "border": 17, "line": [17, 29, 97, 98, 101, 108, 148, 158, 160, 243], "includ": [17, 25, 27, 29, 66, 100, 109, 119, 137, 150, 210, 211, 214, 243, 343, 371, 471, 472, 510, 550, 580, 616, 644, 750, 761, 780, 883, 884, 916, 925], "divid": [17, 342, 347, 353, 354, 355, 384, 550, 749, 754, 762, 763, 764, 799, 925], "same": [17, 29, 51, 60, 67, 102, 108, 118, 127, 133, 149, 197, 212, 220, 223, 225, 243, 249, 254, 358, 410, 423, 424, 425, 426, 427, 428, 430, 431, 432, 447, 481, 504, 550, 568, 579, 590, 611, 617, 622, 626, 628, 644, 648, 652, 653, 723, 766, 830, 831, 832, 833, 834, 835, 837, 838, 839, 917, 925], "dens": [17, 148, 243, 417, 550, 824, 925], "space": 17, "horizont": [17, 68, 144, 155, 214, 243, 506, 510, 511, 512, 516, 519, 527, 530, 534, 540], "markdown": 17, "compat": [17, 29, 33, 99, 243, 609, 644], "No": 17, "appli": [17, 27, 29, 68, 108, 117, 119, 120, 144, 178, 243, 322, 325, 327, 328, 329, 331, 333, 335, 336, 339, 340, 343, 348, 349, 351, 354, 355, 392, 412, 423, 424, 425, 427, 431, 476, 497, 500, 510, 511, 519, 526, 534, 550, 582, 589, 590, 597, 644, 725, 728, 730, 731, 735, 737, 740, 742, 743, 746, 747, 750, 755, 756, 758, 763, 764, 830, 831, 832, 834, 838, 888, 925], "round": [17, 29, 62, 243, 302, 365, 487, 550, 701, 772, 925], "corner": 17, "op": [17, 120, 243, 420, 550, 644, 925], "The": [17, 28, 29, 33, 45, 52, 60, 66, 85, 87, 88, 89, 91, 94, 97, 99, 106, 108, 127, 134, 136, 148, 149, 150, 151, 152, 157, 162, 165, 172, 177, 187, 188, 191, 213, 216, 220, 223, 225, 243, 291, 292, 294, 295, 296, 297, 322, 335, 338, 339, 342, 347, 348, 356, 359, 366, 367, 392, 410, 417, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 441, 444, 450, 453, 454, 459, 461, 462, 463, 468, 469, 475, 479, 504, 517, 521, 536, 539, 544, 546, 550, 551, 552, 555, 556, 557, 580, 581, 582, 584, 586, 589, 590, 595, 598, 604, 609, 618, 622, 626, 628, 644, 653, 690, 693, 694, 695, 703, 725, 742, 745, 746, 749, 754, 755, 767, 775, 779, 824, 830, 831, 832, 833, 834, 835, 837, 838, 839, 853, 856, 862, 865, 866, 871, 873, 874, 875, 880, 881, 887, 891, 919, 921, 925, 926, 929, 930, 931], "one": [17, 28, 29, 60, 77, 85, 87, 88, 89, 90, 91, 120, 141, 142, 148, 149, 150, 151, 162, 171, 179, 187, 188, 209, 224, 243, 250, 361, 383, 423, 446, 485, 497, 527, 530, 540, 550, 575, 576, 579, 580, 581, 594, 623, 627, 644, 652, 769, 795, 830, 892, 925], "more": [17, 29, 31, 33, 60, 84, 85, 86, 87, 88, 89, 90, 91, 100, 106, 109, 119, 120, 127, 131, 162, 166, 171, 175, 187, 188, 189, 212, 225, 243, 255, 293, 303, 304, 305, 383, 384, 392, 434, 444, 491, 527, 530, 540, 550, 594, 609, 617, 628, 644, 653, 692, 704, 705, 706, 795, 799, 841, 856, 911, 925, 933], "semigraph": 17, "box": [17, 127, 243], "draw": [17, 22, 23], "found": [17, 27, 72, 81, 83, 88, 136, 215, 243, 435, 460, 476, 550, 619, 644, 842, 872, 925], "unicod": 17, "block": [17, 149, 212, 243, 579, 601, 617, 624, 644, 844, 845, 925], "http": [17, 29, 86, 99, 126, 131, 243, 457, 869, 933], "en": 17, "wikipedia": 17, "org": [17, 86, 99, 126, 131, 243], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 243], "etc": [18, 29, 97, 100, 102, 106, 109, 110, 112, 243, 500, 844, 845, 925], "inform": [20, 66, 100, 109, 131, 243, 303, 304, 305, 384, 444, 550, 598, 644, 704, 705, 706, 799, 856, 925], "separ": [21, 27, 92, 94, 97, 98, 108, 177, 179, 205, 211, 213, 243, 255, 275, 279, 456, 506, 510, 511, 550, 618, 644, 674, 678, 868, 895, 904, 925], "between": [21, 68, 117, 118, 119, 120, 181, 235, 243, 279, 300, 316, 371, 411, 416, 428, 450, 507, 509, 532, 533, 537, 550, 599, 638, 644, 678, 698, 718, 780, 818, 823, 835, 862, 925], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 119, 120, 132, 141, 149, 150, 151, 179, 243, 303, 304, 310, 361, 410, 417, 424, 436, 473, 550, 575, 579, 580, 581, 609, 644, 691, 704, 705, 710, 716, 769, 824, 831, 846, 885, 925], "both": [22, 27, 51, 70, 99, 150, 151, 164, 165, 172, 187, 243, 254, 371, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 585, 586, 595, 644, 780, 925], "width": [23, 29, 97, 98, 243, 462, 468, 479, 644, 874, 880, 891], "char": [23, 51, 464, 876], "enabl": [24, 191, 220, 243, 436, 550, 604, 622, 644, 846, 925], "addit": [24, 29, 88, 100, 109, 117, 118, 133, 138, 149, 177, 191, 197, 213, 220, 223, 243, 356, 359, 410, 447, 503, 504, 517, 536, 539, 550, 568, 572, 579, 604, 611, 618, 622, 626, 644, 767, 925], "verbos": 24, "debug": [24, 566, 573, 590, 644], "log": [24, 62, 352, 490, 550, 760, 910, 925], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 61, 63, 66, 85, 87, 88, 89, 90, 91, 97, 98, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 119, 162, 177, 183, 187, 188, 190, 203, 204, 243, 394, 550, 601, 603, 644, 805, 925], "show": [25, 135, 148, 166, 176, 243, 569, 598, 607, 644], "variabl": [25, 92, 171, 205, 243, 594, 644, 904, 925], "restrict": [25, 473, 885], "dictionari": [25, 29, 85, 87, 88, 89, 91, 97, 98, 103, 107, 108, 162, 177, 187, 188, 203, 204, 243, 394, 550, 644, 716, 805, 925], "those": [25, 29, 97, 243, 417, 550, 824, 925], "been": [25, 29, 69, 92, 243, 417, 550, 824, 925], "set_fmt_float": 25, "directli": [25, 119, 120, 353, 354, 355, 550, 644, 762, 763, 764, 925], "via": [25, 97, 98, 101, 108, 110, 111, 112, 162, 188, 243, 255, 550], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 139, 243, 573, 600, 608, 609, 625, 644, 652, 925], "binaryio": [26, 30, 96, 97, 101, 102, 103, 106, 107, 243], "bytesio": [26, 27, 29, 30, 33, 96, 97, 98, 101, 102, 106, 243], "path": [26, 27, 29, 30, 31, 32, 33, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 243, 436, 460, 550, 600, 608, 609, 625, 644, 846, 872, 925], "compress": [26, 30, 33, 243, 608, 609, 644], "avrocompress": [26, 243], "uncompress": [26, 30, 33, 102, 110, 243, 609, 644], "write": [26, 27, 28, 29, 30, 31, 33, 98, 102, 243, 303, 304, 305, 550, 588, 607, 609, 625, 644, 704, 705, 706, 925], "apach": [26, 33, 96, 99, 243], "avro": [26, 96, 243, 560], "should": [26, 27, 29, 30, 31, 32, 33, 85, 87, 89, 91, 92, 95, 100, 108, 117, 118, 120, 123, 126, 127, 133, 150, 162, 165, 187, 188, 204, 205, 213, 225, 243, 250, 255, 274, 301, 314, 350, 356, 377, 379, 423, 424, 425, 426, 427, 428, 430, 431, 432, 435, 444, 504, 517, 524, 525, 550, 568, 580, 585, 586, 590, 607, 608, 609, 618, 625, 628, 644, 653, 673, 700, 714, 757, 830, 831, 832, 833, 834, 835, 837, 838, 839, 842, 856, 925], "written": [26, 27, 29, 30, 31, 32, 33, 243, 608, 609, 625, 644], "snappi": [26, 33, 243, 609, 644], "deflat": [26, 243], "import": [26, 27, 29, 30, 33, 36, 60, 70, 85, 89, 90, 108, 113, 115, 116, 117, 118, 119, 120, 132, 148, 150, 163, 165, 207, 214, 216, 243, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 515, 525, 580, 586, 590, 644, 708, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 784, 788, 789, 790, 795, 830, 854, 900, 925], "pathlib": [26, 27, 30, 33, 108, 243], "foo": [26, 27, 30, 31, 32, 33, 92, 127, 130, 131, 133, 134, 135, 136, 139, 142, 143, 144, 145, 146, 147, 152, 153, 154, 155, 156, 157, 159, 164, 168, 169, 170, 173, 176, 179, 181, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 211, 212, 213, 217, 218, 219, 222, 243, 251, 271, 276, 277, 280, 281, 303, 304, 305, 338, 368, 369, 413, 421, 437, 438, 450, 452, 454, 456, 458, 463, 469, 471, 473, 475, 477, 478, 484, 486, 497, 500, 502, 504, 507, 508, 509, 518, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 541, 542, 543, 550, 567, 568, 569, 570, 576, 583, 584, 585, 601, 603, 604, 617, 618, 621, 623, 625, 644, 678, 704, 745, 828, 864, 866, 868, 870, 885, 925], "bar": [26, 27, 30, 31, 32, 33, 92, 127, 130, 131, 133, 134, 135, 136, 139, 142, 143, 144, 145, 146, 147, 153, 155, 156, 157, 159, 164, 168, 169, 170, 173, 176, 179, 181, 183, 184, 185, 187, 189, 190, 191, 193, 194, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 212, 213, 217, 218, 222, 243, 251, 281, 369, 444, 454, 456, 471, 473, 497, 502, 504, 507, 508, 509, 518, 523, 527, 528, 529, 530, 531, 532, 536, 537, 538, 541, 542, 543, 550, 567, 568, 569, 570, 576, 583, 584, 585, 601, 603, 604, 617, 618, 621, 625, 644, 678, 856, 866, 868, 885, 925], "ham": [26, 27, 30, 33, 92, 130, 131, 133, 134, 135, 136, 142, 143, 145, 152, 153, 155, 164, 168, 169, 170, 173, 176, 181, 183, 185, 187, 189, 190, 191, 193, 194, 196, 198, 199, 200, 205, 206, 207, 208, 212, 217, 218, 243, 504, 567, 568, 569, 570, 576, 585, 601, 603, 604, 617, 623, 644], "d": [26, 27, 30, 33, 51, 68, 88, 113, 132, 148, 152, 153, 156, 164, 200, 202, 214, 218, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 243, 324, 345, 371, 412, 439, 452, 458, 472, 476, 503, 521, 550, 585, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 644, 727, 752, 780, 864, 870, 884, 888, 925], "e": [26, 27, 30, 33, 51, 86, 97, 98, 101, 102, 106, 110, 112, 132, 148, 153, 200, 202, 214, 243, 255, 352, 356, 371, 389, 394, 439, 444, 517, 550, 588, 601, 644, 760, 780, 843, 856, 907, 925], "dirpath": [26, 27, 30, 33, 108, 243], "new_fil": [26, 27, 30, 33, 243], "has_head": [27, 29, 97, 98, 101, 108, 243], "quot": [27, 97, 98, 108, 243], "batch_siz": [27, 97, 98, 111, 243], "1024": [27, 33, 97, 98, 111, 243, 609, 644], "datetime_format": [27, 243], "date_format": [27, 243, 345], "time_format": [27, 243], "float_precis": [27, 29, 243], "null_valu": [27, 97, 98, 108, 243], "comma": [27, 243], "csv": [27, 97, 98, 101, 108, 243, 560, 608, 609, 644], "result": [27, 31, 32, 60, 89, 91, 99, 100, 108, 110, 112, 113, 120, 139, 150, 161, 175, 194, 207, 223, 243, 353, 354, 355, 359, 384, 410, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 436, 438, 471, 472, 500, 510, 511, 512, 526, 540, 550, 563, 580, 590, 598, 606, 608, 609, 625, 626, 644, 652, 762, 763, 764, 799, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 846, 849, 883, 884, 907, 925], "If": [27, 29, 31, 32, 33, 51, 65, 66, 69, 70, 85, 86, 87, 88, 89, 90, 91, 92, 97, 98, 100, 101, 102, 106, 108, 109, 110, 111, 112, 126, 127, 135, 139, 148, 150, 151, 153, 162, 165, 167, 171, 175, 188, 189, 196, 200, 204, 205, 206, 210, 211, 212, 214, 215, 243, 255, 287, 292, 303, 304, 305, 320, 362, 384, 392, 394, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 440, 444, 445, 459, 461, 463, 464, 469, 470, 471, 472, 473, 475, 476, 490, 497, 499, 500, 507, 508, 510, 519, 525, 535, 537, 539, 550, 569, 571, 580, 581, 585, 586, 590, 594, 601, 609, 610, 616, 617, 619, 625, 628, 644, 652, 653, 686, 704, 705, 706, 715, 723, 774, 776, 777, 799, 801, 822, 826, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 846, 852, 856, 857, 871, 873, 875, 876, 881, 882, 883, 884, 885, 887, 888, 897, 903, 907, 910, 916, 925], "instead": [27, 31, 32, 65, 95, 97, 106, 119, 123, 127, 150, 162, 175, 177, 187, 188, 191, 207, 220, 243, 264, 267, 461, 463, 469, 475, 500, 535, 539, 550, 574, 580, 604, 622, 625, 644, 662, 665, 844, 845, 873, 875, 881, 887, 908, 925], "whether": [27, 70, 89, 91, 120, 243, 327, 398, 399, 436, 550, 590, 644, 730], "header": [27, 29, 33, 97, 98, 101, 108, 136, 179, 211, 243, 609, 644], "field": [27, 52, 81, 83, 88, 213, 243, 292, 394, 459, 472, 473, 481, 510, 511, 526, 539, 550, 618, 644, 691, 884, 885, 894, 895], "symbol": [27, 243], "byte": [27, 97, 98, 101, 102, 103, 106, 107, 108, 137, 243, 295, 298, 299, 461, 464, 609, 644, 693, 696, 697, 761, 873, 876, 925], "specifi": [27, 29, 60, 70, 72, 81, 83, 119, 133, 137, 138, 141, 149, 177, 187, 191, 197, 210, 213, 220, 223, 243, 353, 354, 355, 356, 361, 394, 410, 420, 447, 462, 468, 501, 503, 504, 517, 536, 539, 550, 568, 572, 575, 579, 604, 611, 616, 618, 622, 626, 644, 761, 762, 763, 764, 769, 874, 880, 925], "defin": [27, 29, 36, 70, 117, 118, 119, 127, 150, 151, 175, 178, 225, 243, 255, 291, 371, 412, 424, 425, 426, 427, 428, 430, 431, 432, 499, 525, 539, 550, 580, 581, 597, 628, 644, 653, 690, 780, 925], "chrono": [27, 243, 345, 476, 752, 888], "rust": [27, 33, 78, 102, 106, 127, 225, 243, 628, 653, 925], "crate": [27, 243], "fraction": [27, 115, 116, 189, 243, 343, 411, 434, 476, 550, 750, 818, 841, 925], "second": [27, 70, 150, 151, 165, 216, 243, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 476, 514, 515, 550, 580, 581, 586, 644, 745, 749, 754], "precis": [27, 29, 37, 162, 188, 204, 243, 319, 476, 722], "infer": [27, 85, 87, 88, 89, 90, 91, 97, 98, 101, 108, 111, 117, 127, 243, 421, 459, 476, 550, 644, 828, 871, 925], "maximum": [27, 97, 98, 108, 118, 119, 120, 168, 243, 268, 303, 304, 395, 407, 417, 527, 550, 591, 644, 667, 704, 705, 732, 806, 814, 819, 824, 925], "timeunit": [27, 36, 38, 70, 243, 319, 320, 346, 350, 722, 723, 753, 757], "frame": [27, 28, 29, 60, 88, 115, 119, 127, 128, 162, 163, 172, 175, 178, 187, 188, 207, 214, 243, 564, 595, 597, 644, 703, 925], "datetim": [27, 29, 60, 70, 132, 148, 150, 151, 163, 165, 216, 243, 271, 272, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 371, 424, 425, 426, 427, 428, 430, 431, 432, 476, 489, 515, 521, 525, 530, 550, 580, 581, 586, 644, 670, 671, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 780, 795, 806, 809, 814, 815, 845, 888, 909, 925], "place": [27, 134, 155, 156, 184, 193, 194, 197, 210, 218, 243, 264, 267, 279, 286, 437, 438, 446, 550, 605, 606, 611, 616, 644, 662, 665, 678, 685, 825, 827, 848, 849, 858, 925], "float64": [27, 88, 95, 97, 119, 123, 136, 137, 144, 190, 207, 220, 243, 256, 257, 258, 259, 260, 261, 300, 306, 307, 343, 356, 377, 379, 442, 443, 487, 488, 504, 517, 550, 570, 603, 622, 644, 750, 908, 913, 925], "datatyp": [27, 31, 45, 58, 85, 87, 88, 89, 91, 93, 95, 101, 103, 107, 120, 123, 136, 138, 144, 190, 243, 275, 300, 356, 439, 456, 476, 489, 504, 517, 550, 560, 572, 603, 625, 644, 653, 674, 698, 716, 793, 795, 797, 850, 868, 888, 909, 925], "repres": [27, 46, 58, 70, 85, 87, 89, 90, 91, 243, 377, 379, 504, 517, 525, 550, 845, 860, 915, 925], "null": [27, 60, 68, 88, 97, 98, 108, 113, 126, 128, 132, 135, 141, 144, 145, 157, 164, 169, 170, 176, 181, 193, 194, 197, 198, 199, 203, 207, 210, 213, 215, 217, 220, 243, 251, 254, 255, 264, 267, 273, 276, 277, 280, 286, 291, 292, 294, 296, 303, 304, 305, 308, 310, 313, 315, 317, 318, 323, 326, 330, 332, 334, 337, 344, 353, 354, 355, 356, 359, 360, 361, 362, 366, 370, 377, 378, 379, 380, 381, 386, 394, 409, 411, 418, 423, 424, 425, 426, 427, 428, 430, 431, 432, 437, 438, 439, 441, 446, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 468, 470, 472, 473, 474, 479, 480, 481, 489, 496, 497, 503, 505, 506, 517, 525, 539, 550, 564, 569, 575, 584, 585, 605, 606, 611, 616, 618, 619, 622, 623, 625, 644, 653, 662, 665, 672, 685, 690, 691, 694, 703, 704, 717, 720, 726, 729, 736, 738, 741, 744, 751, 762, 763, 764, 767, 769, 774, 791, 792, 817, 818, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 843, 848, 849, 853, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 876, 877, 880, 882, 884, 885, 886, 907, 908, 909, 916, 925], "empti": [27, 76, 88, 97, 98, 101, 108, 128, 129, 159, 171, 243, 536, 564, 565, 594, 644, 703, 707, 783, 925], "table_nam": [28, 29, 243], "connection_uri": [28, 99, 243], "if_exist": [28, 243], "dbwritemod": [28, 243], "fail": [28, 86, 100, 102, 109, 126, 212, 243, 265, 292, 476, 550, 617, 644, 653, 888, 925], "dbwriteengin": [28, 243], "sqlalchemi": [28, 243], "databas": [28, 99, 243, 560], "append": [28, 119, 139, 164, 165, 243, 418, 550, 585, 586, 644, 925], "creat": [28, 29, 69, 70, 85, 89, 91, 109, 118, 119, 120, 128, 129, 150, 151, 176, 179, 216, 220, 243, 320, 342, 347, 418, 470, 494, 500, 505, 513, 514, 515, 550, 564, 565, 571, 580, 581, 622, 644, 703, 707, 715, 720, 723, 749, 754, 816, 822, 825, 882, 907, 925], "connect": [28, 97, 99, 102, 106, 110, 112, 113, 243, 561], "uri": [28, 99, 100, 109, 243], "postgresql": [28, 99, 243, 410, 550], "usernam": [28, 97, 99, 102, 106, 110, 112, 243], "password": [28, 97, 99, 102, 106, 110, 112, 243], "server": [28, 99, 243], "port": [28, 97, 99, 102, 106, 110, 112, 243], "replac": [28, 97, 98, 108, 140, 141, 185, 211, 220, 243, 320, 341, 394, 467, 550, 574, 622, 644, 723, 748, 805, 844, 845, 879, 925], "insert": [28, 97, 98, 102, 106, 108, 110, 111, 112, 156, 184, 211, 213, 243, 435, 450, 479, 550, 618, 644, 842, 862, 891, 925], "mode": [28, 243, 535, 550, 644, 925], "new": [28, 29, 95, 108, 123, 124, 127, 135, 155, 156, 175, 176, 183, 184, 201, 213, 214, 220, 243, 251, 320, 358, 370, 393, 466, 467, 472, 473, 480, 481, 486, 550, 560, 569, 601, 615, 618, 622, 628, 644, 649, 720, 723, 766, 816, 827, 878, 879, 884, 885, 892, 894, 899, 905, 917, 925], "alreadi": [28, 243, 274, 314, 550, 673, 714, 925], "adbc": [28, 99, 243], "workbook": [29, 243], "worksheet": [29, 243], "posit": [29, 133, 138, 149, 177, 191, 197, 213, 220, 223, 243, 353, 354, 355, 356, 410, 447, 465, 503, 504, 517, 536, 550, 568, 572, 579, 604, 611, 618, 622, 626, 644, 762, 763, 764, 877, 925], "tupl": [29, 99, 127, 162, 187, 188, 192, 222, 243, 421, 550, 598, 607, 644, 828, 925], "a1": [29, 61, 63, 243], "table_styl": [29, 243], "column_format": [29, 243], "dtype_format": [29, 243], "oneormoredatatyp": [29, 118, 243, 795, 925], "conditional_format": [29, 243], "conditionalformatdict": [29, 243], "column_tot": [29, 243], "columntotalsdefinit": [29, 243], "column_width": [29, 243], "row_height": [29, 243], "sparklin": [29, 243], "sequenc": [29, 52, 60, 67, 85, 87, 88, 89, 91, 92, 94, 97, 98, 108, 118, 119, 120, 133, 135, 138, 139, 164, 165, 171, 175, 178, 179, 197, 205, 210, 211, 212, 213, 214, 215, 216, 243, 375, 392, 412, 447, 481, 497, 498, 499, 501, 505, 510, 511, 512, 519, 521, 526, 527, 530, 534, 540, 550, 568, 569, 572, 585, 586, 597, 611, 616, 617, 618, 619, 644, 652, 718, 845, 894, 925], "autofilt": [29, 243], "autofit": [29, 243], "hidden_column": [29, 243], "hide_gridlin": [29, 243], "sheet_zoom": [29, 243], "excel": [29, 101, 243, 560], "object": [29, 33, 70, 86, 87, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 118, 119, 120, 126, 149, 166, 207, 243, 525, 560, 565, 583, 588, 600, 644, 666, 699, 721, 861, 903, 925], "open": [29, 97, 98, 101, 102, 106, 110, 112, 243], "xlsxwriter": [29, 114, 243], "ha": [29, 60, 69, 92, 108, 126, 216, 243, 255, 314, 383, 401, 490, 499, 550, 628, 703, 714, 774, 786, 910, 925], "close": [29, 70, 150, 151, 243, 371, 424, 425, 426, 427, 428, 430, 431, 432, 444, 550, 580, 581, 644, 780, 856, 925], "xlsx": [29, 101, 243], "work": [29, 37, 98, 101, 151, 184, 243, 255, 274, 293, 302, 303, 304, 305, 356, 365, 410, 464, 491, 550, 581, 644, 673, 692, 701, 704, 705, 706, 772, 876, 911, 925], "directori": [29, 106, 243], "sheet1": [29, 243], "valid": [29, 102, 106, 120, 124, 137, 243, 314, 451, 452, 457, 458, 460, 550, 714, 761, 774, 863, 864, 869, 870, 872, 878, 879, 925], "notat": [29, 243], "integ": [29, 41, 42, 43, 44, 54, 55, 56, 57, 118, 119, 150, 151, 243, 302, 343, 365, 419, 424, 425, 426, 427, 428, 429, 430, 431, 432, 465, 500, 521, 525, 550, 580, 581, 644, 660, 661, 701, 750, 772, 826, 836, 845, 877, 925], "medium": [29, 243], "kei": [29, 60, 66, 150, 165, 172, 177, 179, 183, 186, 243, 580, 586, 595, 601, 602, 644], "contain": [29, 60, 66, 87, 90, 100, 109, 115, 135, 163, 175, 179, 243, 255, 375, 394, 452, 455, 457, 458, 460, 473, 474, 550, 569, 598, 644, 805, 811, 864, 867, 869, 870, 872, 885, 886, 903, 925], "follow": [29, 66, 97, 98, 100, 108, 109, 127, 150, 151, 165, 178, 216, 243, 255, 338, 342, 347, 412, 417, 424, 425, 426, 427, 428, 430, 431, 432, 481, 499, 544, 546, 550, 551, 552, 555, 556, 557, 580, 581, 586, 597, 644, 745, 749, 754, 824, 844, 845, 919, 921, 925, 926, 929, 930, 931, 933], "first_column": [29, 243], "last_column": [29, 243], "banded_column": [29, 243], "banded_row": [29, 243], "sheet": [29, 101, 243], "formula": [29, 243, 352, 550, 760, 925], "chart": [29, 243, 598, 644], "subsequ": [29, 182, 207, 243, 571, 644], "colnam": [29, 108, 119, 136, 243, 393, 550, 570, 644], "given": [29, 48, 50, 60, 69, 70, 85, 87, 88, 89, 91, 95, 97, 98, 108, 117, 118, 119, 120, 123, 127, 137, 138, 177, 178, 187, 193, 194, 197, 210, 215, 243, 255, 271, 286, 321, 346, 352, 371, 389, 410, 412, 417, 420, 421, 424, 425, 427, 430, 431, 432, 435, 437, 438, 458, 476, 481, 490, 497, 517, 550, 572, 590, 597, 605, 606, 611, 616, 619, 628, 644, 653, 670, 685, 715, 724, 753, 760, 761, 777, 780, 802, 804, 816, 822, 824, 828, 831, 832, 834, 837, 838, 839, 842, 848, 849, 870, 888, 910, 913, 917, 925], "here": [29, 85, 87, 88, 89, 91, 99, 100, 109, 118, 119, 120, 243, 460, 644, 872], "dd": [29, 243], "mm": [29, 243], "yyyi": [29, 243], "00": [29, 70, 150, 165, 216, 243, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 476, 515, 580, 586, 644, 722, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 888], "dtype": [29, 63, 85, 87, 89, 91, 95, 97, 98, 108, 117, 118, 119, 120, 123, 126, 150, 151, 165, 207, 243, 255, 256, 257, 258, 259, 260, 261, 264, 267, 268, 269, 270, 279, 291, 300, 303, 304, 305, 306, 307, 312, 313, 323, 326, 330, 332, 334, 337, 344, 350, 356, 358, 391, 392, 419, 420, 424, 425, 426, 427, 428, 430, 431, 432, 439, 442, 443, 450, 459, 470, 483, 485, 487, 488, 489, 493, 494, 499, 500, 505, 508, 517, 521, 525, 526, 539, 550, 580, 581, 586, 644, 667, 668, 669, 678, 690, 698, 703, 704, 705, 706, 712, 713, 717, 726, 729, 736, 738, 741, 744, 751, 757, 761, 766, 783, 795, 804, 829, 843, 850, 862, 871, 882, 888, 896, 907, 908, 909, 913, 925], "overridden": [29, 85, 87, 89, 91, 243, 644], "basi": [29, 119, 243], "param": [29, 85, 87, 88, 89, 91, 97, 98, 108, 119, 120, 187, 243, 644], "It": [29, 70, 127, 172, 178, 225, 243, 255, 292, 400, 550, 590, 595, 628, 644, 844, 845, 925], "also": [29, 70, 88, 108, 119, 120, 136, 149, 150, 151, 172, 175, 191, 197, 220, 243, 310, 313, 341, 370, 371, 417, 424, 425, 426, 427, 428, 430, 431, 432, 447, 510, 511, 519, 521, 534, 549, 550, 579, 580, 581, 595, 604, 611, 622, 623, 644, 748, 780, 824, 925], "group": [29, 33, 98, 149, 150, 151, 163, 175, 177, 179, 214, 216, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 250, 255, 274, 364, 410, 446, 447, 457, 485, 499, 550, 579, 580, 581, 609, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644, 673, 869], "float_dtyp": [29, 243], "simplifi": [29, 67, 243, 566, 571, 573, 598, 607, 608, 609, 644], "uniform": [29, 243], "condit": [29, 65, 135, 142, 187, 243, 455, 474, 519, 569, 576, 644], "suppli": [29, 85, 87, 88, 89, 91, 187, 243, 644], "typenam": [29, 243], "3_color_scal": [29, 243], "data_bar": [29, 243], "make": [29, 52, 68, 85, 90, 97, 98, 99, 102, 106, 110, 112, 150, 151, 172, 175, 182, 216, 243, 354, 355, 394, 420, 472, 479, 550, 580, 581, 595, 644, 763, 764, 777, 805, 884, 891, 925], "icon": [29, 243], "multipl": [29, 67, 68, 97, 98, 108, 110, 111, 112, 118, 120, 133, 137, 139, 142, 149, 150, 155, 163, 177, 179, 191, 197, 210, 220, 223, 243, 291, 398, 401, 405, 410, 421, 424, 425, 426, 427, 428, 430, 431, 432, 447, 501, 504, 510, 511, 519, 526, 534, 543, 550, 568, 576, 579, 580, 604, 611, 616, 622, 626, 644, 652, 690, 761, 810, 828, 925], "singl": [29, 60, 68, 97, 98, 99, 106, 108, 118, 133, 134, 135, 139, 146, 177, 187, 197, 243, 255, 272, 291, 338, 362, 392, 418, 421, 447, 450, 496, 499, 501, 504, 506, 526, 535, 550, 568, 569, 611, 644, 652, 671, 690, 745, 825, 828, 862, 903, 925], "across": [29, 243, 512, 540], "effect": [29, 126, 144, 243, 255, 550, 624, 644], "heatmap": [29, 243], "min": [29, 33, 119, 120, 132, 141, 150, 151, 179, 243, 303, 305, 311, 361, 410, 417, 427, 536, 550, 575, 580, 581, 609, 644, 704, 706, 711, 716, 769, 824, 834, 925], "entir": [29, 243], "final": [29, 60, 112, 243, 353, 354, 355, 550, 573, 644, 762, 763, 764, 925], "made": [29, 243, 907, 925], "up": [29, 52, 99, 162, 165, 188, 204, 243, 255, 302, 479, 550, 585, 586, 590, 644, 701, 891, 925], "abov": [29, 243], "order": [29, 60, 88, 115, 127, 149, 150, 151, 177, 178, 179, 189, 197, 210, 212, 216, 243, 255, 264, 267, 288, 293, 301, 417, 434, 435, 436, 446, 447, 481, 491, 492, 501, 550, 579, 580, 581, 594, 608, 609, 611, 616, 617, 644, 653, 662, 665, 687, 692, 700, 715, 794, 822, 824, 829, 841, 842, 846, 858, 894, 911, 912, 925], "than": [29, 70, 84, 89, 91, 97, 98, 108, 113, 119, 120, 127, 148, 149, 162, 165, 177, 187, 188, 189, 214, 225, 243, 255, 383, 434, 444, 462, 468, 473, 479, 507, 527, 530, 537, 540, 550, 579, 586, 608, 609, 628, 644, 653, 841, 856, 874, 880, 885, 891, 925], "add": [29, 50, 98, 127, 139, 150, 220, 221, 243, 414, 482, 515, 519, 543, 550, 580, 585, 622, 623, 624, 644, 652, 925], "total": [29, 137, 243, 761, 925], "export": [29, 162, 163, 188, 204, 243], "numer": [29, 165, 243, 303, 304, 305, 371, 420, 439, 550, 560, 586, 644, 704, 705, 706, 780, 793, 843, 850, 925], "associ": [29, 60, 243], "sum": [29, 60, 137, 144, 149, 151, 161, 179, 223, 243, 255, 292, 312, 313, 352, 362, 424, 425, 427, 430, 431, 432, 496, 497, 510, 512, 519, 527, 530, 534, 550, 566, 571, 573, 579, 581, 598, 607, 626, 644, 712, 713, 760, 761, 831, 832, 834, 837, 838, 839, 925], "pass": [29, 33, 60, 70, 87, 101, 108, 118, 119, 120, 131, 133, 149, 153, 167, 177, 178, 191, 197, 200, 210, 220, 223, 243, 255, 324, 341, 359, 369, 410, 412, 447, 463, 469, 475, 501, 504, 521, 539, 550, 568, 579, 583, 590, 597, 604, 607, 611, 616, 622, 626, 644, 653, 727, 748, 767, 776, 801, 875, 881, 887, 897, 925], "funcnam": [29, 243], "averag": [29, 243, 353, 354, 355, 417, 550, 762, 763, 764, 824, 925], "count_num": [29, 243], "count": [29, 97, 98, 102, 106, 108, 110, 111, 112, 132, 150, 151, 165, 175, 176, 179, 211, 215, 216, 221, 225, 234, 243, 272, 309, 338, 386, 406, 409, 424, 425, 426, 427, 428, 430, 431, 432, 452, 492, 494, 531, 550, 580, 581, 586, 619, 624, 628, 637, 644, 671, 716, 745, 777, 812, 817, 864, 912, 914, 925], "std_dev": [29, 243], "var": [29, 243, 550, 644, 925], "pixel": [29, 243], "unit": [29, 36, 38, 70, 119, 120, 137, 243, 319, 320, 324, 346, 350, 391, 401, 493, 521, 550, 598, 644, 722, 723, 727, 753, 757, 761, 804, 913, 925], "row_index": [29, 243], "height": [29, 135, 243], "provid": [29, 97, 98, 99, 100, 108, 109, 119, 120, 243, 292, 296, 297, 453, 454, 457, 459, 460, 521, 560, 608, 609, 644, 694, 695, 777, 865, 866, 869, 871, 872, 925, 933], "intersect": [29, 243], "bodi": [29, 243], "start": [29, 96, 97, 98, 102, 106, 108, 110, 111, 112, 149, 150, 166, 196, 216, 221, 243, 287, 299, 322, 324, 325, 327, 328, 333, 335, 339, 340, 342, 343, 346, 347, 348, 349, 351, 356, 371, 445, 451, 455, 470, 474, 504, 510, 517, 519, 543, 550, 579, 580, 598, 610, 624, 644, 686, 697, 722, 724, 725, 727, 728, 730, 735, 737, 740, 742, 743, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 780, 857, 867, 882, 886, 925], "zero": [29, 85, 86, 96, 97, 98, 102, 106, 126, 128, 141, 162, 187, 202, 207, 243, 360, 361, 435, 444, 479, 550, 564, 575, 644, 691, 703, 769, 856, 891, 903, 907, 908, 925], "unless": [29, 60, 87, 207, 243, 644, 908, 916, 925], "marker": [29, 243], "compliant": [29, 243], "case": [29, 60, 85, 87, 88, 89, 91, 112, 127, 139, 150, 151, 162, 243, 392, 400, 401, 543, 550, 580, 581, 644, 652, 925], "three": [29, 209, 243, 435, 550], "avail": [29, 94, 100, 109, 118, 242, 243, 417, 544, 546, 549, 550, 551, 552, 555, 556, 557, 560, 561, 573, 643, 644, 824, 919, 921, 925, 926, 929, 930, 931], "insert_befor": [29, 243], "insert_aft": [29, 243], "respect": [29, 243], "direct": [29, 99, 106, 112, 214, 243], "ad": [29, 88, 126, 150, 211, 220, 243, 254, 359, 510, 511, 550, 580, 622, 644, 767, 925], "end": [29, 97, 98, 106, 108, 150, 243, 287, 298, 342, 356, 371, 451, 455, 470, 474, 504, 517, 550, 580, 582, 589, 598, 644, 686, 696, 749, 780, 867, 882, 886, 925], "far": [29, 243], "thei": [29, 88, 108, 115, 124, 166, 243, 423, 550, 830, 925], "pure": [29, 243], "actual": [29, 88, 101, 119, 120, 243, 851, 925], "indic": [29, 65, 92, 96, 97, 98, 102, 106, 108, 117, 118, 120, 150, 151, 205, 243, 265, 291, 373, 376, 377, 379, 380, 381, 424, 425, 426, 427, 428, 430, 431, 432, 435, 441, 485, 501, 550, 580, 581, 644, 690, 784, 788, 789, 790, 791, 792, 842, 853, 898, 904, 925], "calcul": [29, 60, 150, 243, 273, 315, 353, 354, 355, 384, 391, 429, 444, 493, 499, 550, 580, 644, 672, 717, 762, 763, 764, 799, 836, 856, 860, 915, 925], "individu": [29, 119, 151, 243, 255, 458, 550, 581, 609, 644, 702, 870, 925], "gridlin": [29, 243], "zoom": [29, 243], "level": [29, 33, 108, 110, 111, 112, 119, 127, 144, 175, 243, 362, 550, 582, 589, 609, 644], "definit": [29, 243, 384, 550, 799, 925], "take": [29, 119, 144, 172, 178, 201, 243, 338, 447, 486, 516, 518, 550, 595, 615, 644, 745, 899, 917, 925], "care": [29, 243, 255, 436, 550, 846, 925], "rel": [29, 100, 109, 115, 116, 243, 338, 353, 354, 355, 550, 745, 762, 763, 764, 925], "see": [29, 99, 100, 101, 109, 115, 116, 119, 120, 131, 164, 178, 243, 303, 304, 305, 345, 361, 370, 384, 392, 444, 534, 550, 704, 705, 706, 752, 799, 856, 925, 933], "readthedoc": [29, 243, 933], "io": [29, 243, 933], "working_with_conditional_format": [29, 243], "html": [29, 86, 99, 126, 131, 243], "similarli": [29, 88, 243], "well": [29, 97, 98, 108, 138, 179, 243, 371, 550, 572, 644, 780, 925], "mandatori": [29, 243], "adjac": [29, 243], "each": [29, 60, 98, 111, 115, 116, 118, 127, 148, 149, 163, 165, 177, 207, 213, 222, 223, 225, 226, 228, 237, 243, 255, 278, 290, 342, 347, 417, 447, 458, 472, 473, 499, 506, 539, 550, 586, 598, 618, 626, 628, 629, 631, 640, 644, 677, 689, 702, 749, 754, 824, 870, 884, 885, 895, 925], "two": [29, 87, 89, 91, 99, 144, 171, 172, 179, 209, 224, 225, 243, 250, 316, 320, 446, 485, 497, 507, 509, 532, 537, 550, 594, 595, 627, 628, 644, 718, 723, 925], "help": [29, 243, 573, 644], "where": [29, 65, 99, 135, 139, 162, 171, 188, 243, 265, 349, 352, 435, 444, 447, 507, 537, 543, 550, 594, 644, 652, 663, 756, 760, 842, 856, 860, 915, 917, 925], "appear": [29, 88, 115, 243, 492, 550, 912, 925], "working_with_sparklin": [29, 243], "instanti": [29, 191, 220, 243, 604, 622, 644], "basic": [29, 243], "random": [29, 118, 119, 120, 152, 189, 243, 367, 417, 434, 440, 550, 775, 824, 841, 852, 925], "date": [29, 36, 60, 70, 97, 98, 99, 108, 113, 132, 148, 150, 151, 163, 165, 243, 271, 272, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 371, 424, 425, 426, 427, 428, 430, 431, 432, 476, 489, 521, 530, 550, 580, 581, 586, 644, 670, 671, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 780, 795, 806, 809, 814, 815, 845, 888, 909, 925], "dtm": [29, 243, 320, 723], "2023": [29, 114, 163, 243, 320, 723], "num": [29, 209, 243, 371, 374, 479, 550, 780, 925], "500": [29, 162, 215, 243, 573, 619, 644, 735, 737, 743, 750, 831, 832, 834, 925], "val": [29, 186, 243, 301, 489, 550, 602, 644, 700], "10_000": [29, 243], "20_000": [29, 243], "30_000": [29, 243], "locat": [29, 139, 185, 208, 213, 243, 435, 550, 618, 644, 652, 842, 845, 898, 925], "u": [29, 36, 38, 70, 162, 188, 204, 243, 319, 320, 324, 346, 350, 476, 521, 535, 722, 723, 727, 753, 757], "increas": [29, 97, 106, 243, 314, 550, 714, 925], "b4": [29, 243], "light": [29, 243], "twice": [29, 101, 243], "differ": [29, 97, 113, 115, 139, 150, 151, 162, 188, 204, 211, 243, 273, 315, 322, 338, 339, 341, 348, 394, 407, 408, 476, 492, 518, 521, 527, 530, 550, 571, 580, 581, 644, 652, 653, 672, 717, 725, 745, 746, 748, 755, 814, 815, 843, 888, 925], "titl": [29, 243], "explicit": [29, 108, 118, 243, 500, 534], "integr": [29, 243], "multi_fram": [29, 243], "wb": [29, 243], "coordin": [29, 243], "advanc": [29, 243], "len": [29, 69, 118, 119, 163, 243, 309, 421, 462, 468, 479, 550, 715, 822, 828, 874, 880, 891, 925], "min_color": [29, 243], "76933c": [29, 243], "mid_color": [29, 243], "c4d79b": [29, 243], "max_color": [29, 243], "ebf1d": [29, 243], "data_bar_2010": [29, 243], "bar_color": [29, 243], "9bbb59": [29, 243], "bar_negative_color_sam": [29, 243], "bar_negative_border_color_sam": [29, 243], "000": [29, 243], "white": [29, 243], "w": [29, 243, 457, 869], "get_worksheet_by_nam": [29, 243], "fmt_titl": [29, 243], "add_format": [29, 243], "font_color": [29, 243], "4f6228": [29, 243], "font_siz": [29, 243], "12": [29, 60, 69, 70, 150, 151, 165, 216, 243, 312, 320, 325, 328, 335, 340, 342, 347, 351, 411, 439, 511, 513, 514, 526, 550, 580, 581, 582, 586, 589, 607, 614, 644, 653, 715, 723, 742, 749, 754, 840, 925], "ital": [29, 243], "bold": [29, 243], "customis": [29, 243], "trend": [29, 243], "win_loss": [29, 243], "subtl": [29, 243], "tone": [29, 243], "hidden": [29, 243], "id": [29, 225, 243, 466, 467, 492, 494, 550, 628, 912, 925], "q1": [29, 243], "55": [29, 62, 114, 243], "20": [29, 139, 155, 156, 178, 180, 184, 185, 243, 262, 263, 264, 267, 315, 342, 347, 367, 370, 521, 525, 550, 597, 644, 717, 754, 925], "35": [29, 120, 243, 315, 550, 717, 925], "q2": [29, 243], "30": [29, 69, 139, 150, 155, 178, 184, 185, 203, 220, 243, 262, 263, 264, 267, 315, 320, 323, 328, 340, 342, 347, 351, 367, 439, 550, 580, 597, 622, 644, 715, 717, 723, 726, 749, 754, 925], "15": [29, 127, 150, 151, 156, 243, 314, 315, 342, 347, 358, 511, 550, 580, 581, 644, 714, 717, 749, 754, 766, 925], "60": [29, 139, 243, 343, 344, 476, 746, 750, 751, 888], "q3": [29, 243], "50": [29, 139, 243, 303, 304, 305, 342, 347, 550, 704, 754, 925], "40": [29, 139, 178, 243, 342, 347, 367, 550, 597, 644, 731, 754], "80": [29, 243], "q4": [29, 243], "75": [29, 243, 777, 822, 925], "account": [29, 243, 338, 353, 354, 355, 550, 745, 762, 763, 764, 925], "flavour": [29, 243], "integer_dtyp": [29, 191, 243, 604, 644], "0_": [29, 243], "just": [29, 99, 108, 171, 243, 594, 644], "unifi": [29, 243], "multi": [29, 97, 98, 243, 356, 550], "2_color_scal": [29, 243], "95b3d7": [29, 243], "ffffff": [29, 243], "ipccompress": [30, 243], "arrow": [30, 71, 85, 99, 102, 110, 202, 243, 608, 644, 903, 907, 925], "ipc": [30, 102, 103, 110, 113, 243, 560], "binari": [30, 243, 295, 297, 298, 299, 498, 693, 695, 696, 697], "feather": [30, 102, 110, 243, 560], "lz4": [30, 33, 243, 608, 609, 644], "zstd": [30, 33, 243, 608, 609, 644], "pretti": [31, 243], "row_ori": [31, 243], "iobas": [31, 32, 104, 105, 243, 600, 625, 644], "serial": [31, 32, 243], "represent": [31, 32, 243, 301, 322, 325, 328, 329, 331, 333, 335, 336, 339, 340, 343, 348, 349, 351, 489, 550, 571, 588, 644, 700, 725, 728, 730, 731, 735, 737, 740, 742, 743, 746, 747, 750, 755, 756, 758, 909, 925], "orient": [31, 61, 63, 89, 91, 243, 644], "slower": [31, 89, 91, 127, 149, 177, 216, 225, 243, 579, 628, 644, 653, 925], "common": [31, 243], "write_ndjson": [31, 243], "newlin": [32, 105, 111, 243], "delimit": [32, 92, 97, 98, 105, 108, 111, 179, 205, 243, 450, 862, 904, 925], "parquetcompress": [33, 243], "compression_level": [33, 243, 609, 644], "statist": [33, 97, 98, 106, 112, 132, 243, 354, 355, 384, 424, 425, 426, 427, 428, 429, 430, 431, 432, 444, 550, 609, 644, 716, 763, 764, 799, 836, 856, 925], "row_group_s": [33, 243, 609, 644], "use_pyarrow": [33, 97, 102, 106, 243, 609, 644, 906, 907, 925], "pyarrow_opt": [33, 100, 106, 109, 243], "parquet": [33, 106, 107, 112, 243, 560, 609, 644], "gzip": [33, 243, 609, 644], "lzo": [33, 243, 609, 644], "brotli": [33, 243, 609, 644], "choos": [33, 243, 608, 609, 644], "good": [33, 162, 243, 608, 609, 644], "perform": [33, 76, 86, 97, 98, 102, 106, 108, 110, 111, 112, 126, 127, 150, 151, 165, 182, 225, 243, 255, 410, 550, 580, 581, 586, 608, 609, 624, 628, 644, 653, 925], "fast": [33, 243, 359, 436, 550, 608, 609, 644, 767, 846, 925], "decompress": [33, 243, 608, 609, 644], "backward": [33, 141, 165, 243, 294, 361, 550, 575, 586, 609, 644, 769, 925], "guarante": [33, 86, 97, 98, 243, 573, 609, 644], "deal": [33, 243, 417, 476, 550, 609, 644, 824, 888, 925], "older": [33, 243, 609, 644], "reader": [33, 94, 97, 98, 102, 106, 243, 561, 609, 644], "higher": [33, 181, 235, 243, 416, 428, 533, 550, 599, 609, 638, 644, 823, 835, 925], "mean": [33, 97, 98, 102, 106, 108, 132, 141, 149, 179, 223, 243, 358, 361, 425, 444, 457, 502, 550, 575, 579, 590, 609, 626, 644, 716, 766, 769, 774, 832, 856, 869, 925], "smaller": [33, 137, 243, 573, 609, 644, 761, 925], "disk": [33, 102, 243, 607, 608, 609, 644], "11": [33, 114, 151, 243, 317, 318, 328, 338, 342, 347, 370, 411, 431, 445, 479, 504, 540, 550, 566, 581, 582, 589, 598, 609, 614, 644, 653, 745, 749, 754, 830, 925], "22": [33, 243, 342, 347, 350, 476, 504, 609, 644, 749, 754, 757, 888], "extra": [33, 97, 100, 101, 102, 106, 109, 110, 112, 139, 243, 609, 644, 652, 925], "comput": [33, 67, 68, 73, 137, 149, 165, 207, 212, 223, 235, 243, 249, 256, 257, 258, 259, 260, 261, 282, 283, 284, 306, 307, 309, 310, 311, 312, 313, 316, 352, 357, 384, 389, 390, 405, 410, 411, 415, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 441, 442, 443, 444, 448, 487, 488, 501, 507, 509, 516, 532, 537, 550, 579, 583, 585, 586, 609, 617, 623, 626, 638, 644, 648, 654, 655, 656, 657, 658, 659, 681, 682, 683, 708, 709, 710, 711, 712, 713, 718, 760, 761, 765, 799, 802, 803, 810, 818, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 853, 854, 855, 856, 859, 900, 901, 908, 925], "reduc": [33, 97, 98, 106, 108, 110, 111, 112, 230, 231, 233, 236, 243, 439, 519, 550, 609, 633, 634, 636, 639, 644, 807, 821, 850, 896, 925], "pressur": [33, 106, 111, 112, 243, 439, 550, 609, 644, 850, 925], "improv": [33, 102, 110, 243, 609, 644], "speed": [33, 243, 255, 550, 609, 644], "minimum": [33, 118, 119, 120, 144, 173, 243, 303, 305, 353, 354, 355, 404, 408, 417, 530, 550, 596, 609, 644, 704, 706, 739, 762, 763, 764, 815, 820, 824, 925], "implement": [33, 86, 126, 127, 225, 243, 255, 550, 628, 653, 844, 845, 925], "v": [33, 69, 137, 243, 435, 550, 715, 842, 925], "At": [33, 243], "moment": [33, 131, 243, 384, 444, 550, 799, 856, 925], "argument": [33, 97, 100, 106, 109, 131, 133, 138, 149, 150, 151, 169, 177, 178, 179, 191, 197, 199, 207, 213, 216, 220, 223, 243, 342, 347, 356, 371, 410, 412, 424, 425, 426, 427, 428, 430, 431, 432, 447, 463, 469, 475, 503, 504, 517, 536, 539, 550, 568, 572, 579, 580, 581, 597, 604, 611, 618, 622, 626, 644, 749, 754, 780, 875, 881, 887, 908, 925], "pyarrow": [33, 85, 90, 97, 100, 102, 106, 109, 113, 114, 163, 202, 206, 207, 243, 561, 903, 906, 907, 908, 925], "write_t": [33, 243], "base": [34, 135, 142, 150, 151, 243, 352, 353, 354, 355, 389, 390, 465, 527, 530, 550, 560, 569, 576, 580, 581, 644, 760, 762, 763, 764, 777, 802, 803, 822, 877, 917, 925], "calendar": [35, 36, 150, 151, 165, 216, 243, 328, 338, 342, 347, 351, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 731, 745, 749, 754, 758], "time": [36, 38, 66, 67, 70, 97, 98, 108, 139, 150, 151, 165, 216, 243, 270, 271, 272, 292, 319, 320, 321, 324, 338, 341, 346, 350, 371, 476, 489, 490, 505, 506, 515, 521, 535, 550, 566, 580, 581, 586, 598, 644, 652, 669, 671, 722, 723, 724, 727, 745, 748, 753, 757, 780, 806, 809, 888, 909, 910, 925], "time_unit": [36, 38, 70, 350, 757], "time_zon": [36, 70, 321, 341, 724, 748], "m": [36, 38, 70, 319, 320, 324, 345, 346, 350, 476, 515, 521, 722, 723, 727, 752, 753, 757, 888], "timezon": [36, 70, 476, 888], "zoneinfo": 36, "run": [36, 67, 127, 149, 166, 212, 225, 243, 255, 274, 314, 536, 550, 566, 571, 573, 579, 590, 594, 598, 607, 608, 609, 617, 628, 644, 653, 673, 714, 925, 932], "available_timezon": 36, "attribut": [36, 37, 38, 45, 117, 243, 544, 546, 551, 552, 555, 556, 557, 644, 919, 921, 926, 929, 930, 931], "128": [37, 62, 818, 925], "bit": [37, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 419, 451, 550, 826, 863, 925], "neg": [37, 150, 153, 167, 193, 194, 196, 200, 243, 286, 287, 437, 438, 445, 470, 550, 580, 605, 606, 610, 624, 644, 685, 686, 776, 801, 848, 849, 857, 882, 897, 925], "scale": [37, 137, 243, 761, 925], "experiment": [37, 69, 113, 191, 214, 215, 220, 243, 314, 342, 424, 425, 426, 427, 428, 430, 431, 432, 550, 604, 619, 622, 644, 714, 749, 777, 822, 925], "progress": 37, "expect": [37, 77, 79, 84, 255, 499, 550, 588, 590, 644, 822, 925], "delta": [38, 100, 109, 507, 532, 537, 560, 860, 915, 925], "32": [39, 42, 55, 62, 151, 161, 243, 439, 550, 581, 644, 718, 746, 818, 835, 925], "sign": [41, 42, 43, 44, 338, 419, 479, 550, 745, 826, 891, 925], "inner": [45, 51, 164, 215, 243, 279, 316, 550, 585, 619, 625, 644, 678, 718, 925], "polarsdatatyp": [45, 95, 97, 98, 103, 107, 108, 117, 119, 120, 123, 127, 136, 243, 255, 300, 356, 392, 459, 499, 500, 504, 517, 525, 526, 550, 570, 644, 653, 698, 871, 925], "pythondatatyp": 45, "nest": [45, 51, 137, 243, 560, 761, 925], "arrai": [45, 85, 89, 97, 98, 106, 137, 202, 206, 207, 243, 270, 281, 282, 283, 284, 285, 288, 289, 297, 303, 304, 305, 309, 310, 311, 312, 313, 390, 424, 425, 427, 430, 431, 432, 436, 452, 454, 457, 458, 460, 505, 516, 550, 644, 669, 680, 681, 682, 683, 684, 687, 688, 695, 704, 705, 706, 710, 711, 712, 713, 718, 761, 803, 831, 832, 834, 837, 838, 839, 846, 851, 864, 866, 869, 870, 872, 903, 907, 908, 916, 925], "within": [45, 115, 116, 165, 243, 447, 550, 586, 644], "wrap": [47, 371, 550], "arbitrari": [47, 119], "python": [47, 70, 97, 98, 114, 127, 162, 188, 204, 225, 243, 255, 320, 392, 499, 550, 628, 653, 723, 732, 733, 734, 739, 906, 925], "queri": [48, 67, 99, 102, 108, 110, 111, 112, 139, 166, 178, 243, 292, 394, 460, 550, 566, 571, 573, 582, 589, 598, 607, 624, 628, 644, 652, 872, 925, 932], "pars": [48, 97, 98, 101, 108, 110, 111, 149, 191, 197, 210, 220, 223, 243, 410, 447, 459, 465, 476, 501, 503, 506, 521, 539, 550, 579, 604, 611, 616, 622, 626, 644, 871, 877, 888], "transform": [48, 127, 243, 392, 477, 478, 550], "lf": [50, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 620, 621, 622, 623, 624, 625, 644], "under": [50, 61, 62, 63, 64, 544, 546, 551, 552, 555, 556, 557, 919, 921, 926, 929, 930, 931], "context": [51, 175, 243, 250, 255, 274, 362, 400, 446, 447, 494, 499, 508, 518, 521, 536, 549, 550, 560, 623, 644, 673], "manag": [51, 560], "categor": [51, 92, 122, 164, 205, 243, 301, 394, 489, 550, 699, 700, 909, 925], "temporarili": [51, 150, 151, 243, 580, 581, 644], "cach": [51, 67, 102, 108, 110, 112, 122, 394, 424, 425, 426, 427, 428, 430, 431, 432, 476, 550, 566, 571, 573, 598, 607, 644, 888], "categori": [51, 69, 122, 301, 700, 715, 777, 822, 925], "until": [51, 166, 243], "finish": [51, 73, 139, 243, 652, 925], "global": [51, 119, 122, 394, 550], "invalid": [51, 97, 98, 108, 459, 460, 465, 871, 872, 877], "outermost": 51, "exit": [51, 124], "df1": [51, 60, 68, 115, 139, 145, 207, 218, 243], "color": [51, 225, 628], "red": [51, 225, 628], "green": [51, 225, 628], "blue": 51, "orang": [51, 130, 226, 227, 229, 230, 231, 233, 235, 236, 243, 629, 630, 632, 633, 634, 636, 638, 639], "uint8": [51, 117, 312, 313, 483, 550, 712, 713, 896, 925], "df2": [51, 60, 68, 115, 139, 145, 207, 218, 243], "yellow": 51, "black": [51, 127, 243], "join": [51, 60, 67, 165, 215, 243, 370, 410, 550, 566, 571, 573, 586, 598, 607, 619, 623, 644], "succe": [51, 97, 98, 108], "df_join": 51, "cat": [51, 69, 451, 477, 478, 489, 506, 546, 550, 715, 777, 822, 863, 921, 925], "u8": [51, 92, 205, 243, 904, 925], "schemadict": [52, 85, 87, 88, 89, 90, 91, 108, 190, 243, 539, 590, 603, 628, 644], "composit": 52, "dai": [53, 70, 150, 151, 163, 165, 216, 243, 324, 328, 335, 338, 339, 340, 342, 346, 347, 348, 349, 351, 424, 425, 426, 427, 428, 430, 431, 432, 513, 514, 515, 550, 580, 581, 586, 644, 745, 746, 749, 754, 756], "unsign": [54, 55, 56, 57, 419, 550, 826, 925], "could": [58, 73, 135, 150, 243, 300, 510, 519, 550, 569, 580, 644, 698, 925], "static": [58, 628], "utf": 59, "descend": [60, 197, 210, 243, 264, 267, 288, 417, 436, 446, 447, 490, 501, 550, 611, 616, 644, 662, 665, 687, 794, 824, 846, 858, 910, 925], "uniqu": [60, 117, 118, 120, 160, 175, 234, 243, 266, 374, 382, 406, 476, 492, 494, 531, 550, 637, 644, 664, 716, 785, 796, 812, 888, 912, 914, 925], "inject": 60, "fill": [60, 68, 95, 123, 140, 141, 194, 214, 243, 294, 310, 313, 360, 361, 366, 370, 424, 425, 427, 430, 431, 432, 438, 462, 468, 479, 520, 550, 574, 575, 606, 623, 644, 768, 769, 816, 831, 832, 834, 837, 838, 839, 849, 874, 880, 891, 925], "sort": [60, 61, 115, 150, 151, 165, 172, 178, 179, 210, 216, 228, 237, 243, 264, 267, 301, 362, 436, 447, 494, 496, 501, 550, 571, 580, 581, 586, 595, 597, 598, 607, 616, 631, 640, 644, 662, 665, 700, 794, 846, 911, 914, 925], "origin": [60, 97, 98, 212, 243, 341, 383, 394, 410, 419, 452, 457, 458, 460, 462, 468, 479, 550, 617, 644, 715, 748, 805, 822, 864, 869, 870, 872, 874, 880, 891, 925], "doe": [60, 79, 85, 87, 88, 89, 91, 97, 98, 100, 101, 108, 109, 113, 115, 116, 139, 163, 187, 188, 220, 243, 350, 394, 492, 518, 550, 573, 590, 622, 644, 652, 757, 774, 805, 851, 916, 925], "receiv": [60, 108, 127, 178, 243, 412, 550, 597, 644], "now": [60, 151, 243, 581, 644], "whose": [60, 165, 179, 243, 356, 517, 550, 586, 644], "post": 60, "constrain": 60, "newli": 60, "boolean": [60, 65, 142, 144, 197, 210, 243, 252, 253, 271, 295, 327, 362, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 447, 459, 496, 501, 539, 550, 576, 611, 616, 644, 650, 651, 663, 670, 693, 730, 770, 780, 781, 782, 784, 785, 787, 788, 789, 790, 791, 792, 796, 819, 820, 844, 863, 917, 925], "2022": [60, 70, 132, 148, 243, 320, 476, 515, 521, 723, 731, 888], "x": [60, 97, 98, 99, 108, 118, 119, 137, 155, 158, 160, 164, 171, 243, 255, 270, 279, 367, 392, 420, 441, 444, 472, 489, 499, 510, 511, 512, 519, 526, 534, 540, 550, 585, 590, 594, 610, 644, 649, 653, 769, 797, 853, 856, 884, 909, 925], "y": [60, 118, 119, 137, 158, 160, 164, 171, 243, 270, 279, 345, 420, 476, 512, 540, 550, 585, 594, 610, 644, 649, 752, 888, 925], "df3": [60, 243], "set_tbl_format": 60, "09": [60, 151, 243, 320, 328, 581, 644, 725], "01": [60, 70, 132, 148, 150, 151, 216, 243, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 476, 515, 580, 581, 644, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 888], "02": [60, 70, 114, 148, 150, 151, 216, 243, 319, 320, 324, 325, 326, 333, 334, 335, 343, 344, 346, 348, 350, 433, 476, 515, 550, 580, 581, 644, 722, 723, 727, 728, 729, 732, 733, 734, 735, 737, 739, 740, 741, 742, 743, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 888], "03": [60, 70, 150, 151, 216, 243, 319, 320, 321, 323, 324, 326, 334, 335, 341, 342, 343, 344, 345, 346, 347, 348, 350, 580, 581, 644, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 734, 735, 737, 739, 741, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757], "af1": 60, "af2": 60, "af3": 60, "keep": [60, 97, 98, 108, 212, 215, 216, 243, 383, 394, 503, 550, 617, 619, 644, 715, 805, 822, 925], "easili": [60, 191, 220, 223, 243, 504, 539, 604, 622, 626, 644], "wise": [60, 144, 243, 256, 257, 258, 259, 260, 261, 306, 307, 357, 390, 441, 442, 443, 487, 488, 510, 511, 519, 534, 550, 654, 655, 656, 657, 658, 659, 708, 709, 765, 803, 853, 854, 855, 900, 901, 925], "dot": [60, 550, 607, 644, 925], "product": [60, 131, 243, 312, 316, 499, 550, 712, 718, 925], "fill_nul": [60, 140, 243, 476, 550, 574, 623, 644, 888, 925], "167": 60, "47": 60, "callabl": [61, 62, 63, 64, 108, 127, 144, 178, 225, 243, 255, 292, 392, 393, 412, 423, 499, 510, 511, 519, 526, 534, 550, 590, 597, 628, 644, 653, 691, 830, 925], "decor": [61, 62, 63, 64, 119, 120, 127, 243, 255, 550, 653, 925], "access": [61, 62, 63, 64, 162, 187, 188, 243, 394, 550, 623, 644], "by_first_letter_of_column_nam": 61, "f": [61, 98, 132, 148, 163, 202, 211, 214, 243, 255, 292, 439, 456, 476, 499, 505, 510, 511, 519, 526, 534, 550, 691, 868, 888], "fromkei": [61, 63], "by_first_letter_of_column_valu": 61, "starts_with": [61, 451, 455, 867], "slice": [61, 67, 137, 153, 163, 200, 243, 278, 290, 423, 424, 425, 426, 427, 428, 430, 431, 432, 550, 566, 571, 573, 590, 598, 607, 608, 609, 644, 677, 689, 761, 776, 830, 831, 832, 833, 834, 835, 837, 838, 839, 897, 925], "to_seri": [61, 65, 243, 292, 691], "xx": [61, 63], "xy": [61, 63], "yy": [61, 63], "yz": [61, 63], "a2": [61, 63], "b1": [61, 63], "b2": [61, 63], "pow_n": 62, "powersofn": 62, "next": [62, 294, 417, 550, 824, 925], "p": [62, 178, 243, 412, 539, 550, 597, 644], "ceil": [62, 550, 925], "previou": [62, 124, 411, 481, 550, 818, 925], "floor": [62, 550, 925], "nearest": [62, 165, 181, 235, 243, 302, 365, 416, 428, 533, 550, 586, 599, 638, 644, 701, 772, 779, 823, 835, 925], "24": [62, 114, 127, 137, 151, 243, 312, 314, 326, 550, 581, 644, 714, 729, 925], "001": [62, 329, 330, 332, 337, 515, 736, 738, 744], "next_pow2": 62, "prev_pow2": 62, "nearest_pow2": 62, "split_by_column_dtyp": 63, "collect": [63, 67, 108, 109, 113, 166, 202, 243, 255, 375, 500, 505, 521, 539, 550, 568, 569, 572, 573, 574, 575, 576, 577, 579, 580, 582, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 596, 597, 599, 601, 602, 604, 605, 606, 610, 611, 612, 613, 614, 615, 617, 618, 620, 622, 623, 624, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 644, 787, 925], "31": [64, 320, 322, 323, 335, 348, 476, 513, 514, 521, 723, 725, 726, 888], "42": [64, 151, 152, 243, 581, 644, 775, 925], "961": 64, "1764": 64, "4160": 64, "eager": [65, 150, 214, 243, 500, 521, 525, 535, 539, 549, 560, 580, 644], "evalu": [65, 140, 142, 165, 243, 265, 314, 369, 371, 375, 394, 498, 500, 516, 535, 539, 550, 576, 583, 585, 586, 644, 663, 714, 917, 925], "immedi": [65, 417, 500, 535, 539, 550, 824, 925], "arg_tru": [65, 550, 925], "u32": [65, 150, 176, 221, 226, 234, 236, 243, 250, 262, 263, 264, 265, 266, 267, 268, 269, 272, 281, 308, 309, 322, 325, 329, 333, 335, 339, 340, 343, 348, 349, 386, 394, 406, 409, 417, 435, 452, 461, 464, 489, 492, 501, 508, 531, 550, 580, 624, 629, 637, 639, 644, 662, 663, 664, 680, 698, 725, 728, 735, 737, 740, 742, 743, 746, 747, 750, 755, 756, 777, 824, 864, 873, 876, 909, 912, 914, 925], "build": [66, 86], "wa": 66, "compil": [66, 268, 269, 667, 668], "gate": 66, "info": [66, 100, 109, 114, 327, 730], "otherwis": [66, 172, 191, 243, 296, 303, 304, 305, 353, 354, 355, 419, 451, 453, 543, 550, 595, 604, 644, 653, 694, 704, 705, 706, 762, 763, 764, 826, 844, 845, 863, 865, 925], "version": [66, 69, 92, 100, 109, 114, 267, 358, 532, 534, 537, 550, 665, 766, 925], "depend": [66, 114, 255, 268, 269, 400, 417, 499, 518, 521, 550, 667, 668, 824, 925], "host": [66, 97, 102, 106, 110, 112], "git": 66, "lazy_fram": 67, "type_coercion": [67, 566, 571, 573, 598, 607, 608, 609, 644], "predicate_pushdown": [67, 566, 571, 573, 590, 598, 607, 608, 609, 644], "projection_pushdown": [67, 566, 571, 573, 590, 598, 607, 608, 609, 644], "simplify_express": [67, 566, 571, 573, 598, 607, 608, 609, 644], "no_optim": [67, 566, 573, 590, 598, 608, 609, 644], "slice_pushdown": [67, 566, 571, 573, 590, 598, 607, 608, 609, 644], "common_subplan_elimin": [67, 566, 571, 573, 598, 607, 644], "graph": [67, 166, 243, 583, 623, 644], "parallel": [67, 68, 94, 99, 106, 112, 150, 165, 166, 178, 243, 274, 314, 550, 560, 580, 585, 586, 644, 673, 714, 925], "threadpool": 67, "coercion": [67, 420, 550, 566, 571, 573, 598, 607, 608, 609, 644], "optim": [67, 106, 108, 110, 111, 112, 162, 166, 178, 182, 188, 243, 566, 571, 573, 590, 598, 607, 608, 609, 624, 644], "predic": [67, 108, 110, 111, 112, 113, 142, 187, 243, 362, 496, 519, 543, 550, 566, 571, 573, 576, 590, 598, 601, 607, 608, 609, 624, 644, 770, 844, 845, 925], "pushdown": [67, 566, 571, 573, 590, 598, 601, 607, 608, 609, 624, 644, 844, 845, 925], "project": [67, 108, 110, 111, 112, 255, 446, 447, 550, 566, 571, 573, 590, 598, 601, 607, 608, 609, 625, 644], "turn": [67, 97, 98, 108, 122, 494, 550, 566, 571, 573, 590, 598, 608, 609, 644], "off": [67, 97, 98, 108, 122, 494, 550, 566, 571, 573, 590, 598, 608, 609, 644], "Will": [67, 211, 243, 527, 530, 566, 571, 573, 598, 607, 644, 925], "try": [67, 80, 82, 97, 98, 101, 102, 106, 108, 110, 112, 566, 571, 573, 598, 607, 644], "branch": [67, 566, 571, 573, 598, 607, 644], "subplan": [67, 566, 571, 573, 598, 607, 644], "occur": [67, 272, 405, 417, 550, 566, 571, 573, 598, 607, 644, 671, 810, 824, 925], "union": [67, 68, 527, 530, 566, 571, 573, 598, 607, 644, 718, 787, 845, 925], "part": [67, 85, 472, 473, 566, 571, 573, 598, 607, 623, 644, 725, 728, 735, 737, 740, 742, 743, 750, 758, 884, 885], "fashion": [67, 164, 243, 566, 571, 573, 598, 607, 644], "item": [68, 98, 189, 243, 271, 277, 279, 358, 434, 473, 550, 670, 676, 678, 766, 841, 885, 925], "iter": [68, 149, 150, 151, 162, 163, 177, 187, 188, 191, 197, 210, 211, 220, 222, 223, 243, 314, 356, 410, 447, 501, 503, 504, 506, 517, 536, 539, 550, 579, 580, 581, 604, 611, 616, 622, 626, 644, 714, 925], "rechunk": [68, 85, 90, 97, 98, 102, 106, 108, 110, 111, 112, 139, 243, 550, 652, 702, 811, 925], "concatmethod": 68, "vertic": [68, 139, 214, 218, 243, 450, 527, 862], "aggreg": [68, 97, 98, 106, 144, 150, 168, 169, 170, 173, 175, 179, 180, 181, 198, 199, 214, 217, 223, 224, 227, 229, 243, 250, 362, 388, 392, 410, 423, 424, 425, 426, 427, 428, 430, 431, 432, 494, 510, 511, 512, 519, 524, 527, 530, 534, 540, 550, 580, 590, 591, 592, 593, 596, 599, 612, 613, 620, 626, 627, 630, 632, 644, 830, 831, 832, 834, 837, 838, 839, 925], "concaten": [68, 144, 178, 243, 412, 506, 550, 597, 644, 702, 811, 925], "sure": [68, 85, 90, 97, 98, 99, 102, 106, 182, 243, 500], "contigu": [68, 85, 90, 97, 98, 102, 106, 108, 110, 111, 112, 182, 243], "diagon": [68, 211, 243], "strategi": [68, 97, 117, 118, 119, 120, 141, 150, 164, 165, 174, 243, 255, 292, 361, 550, 575, 580, 585, 586, 644, 691, 769, 925], "vstack": [68, 139, 243], "find": [68, 143, 243, 435, 550, 842, 925], "miss": [68, 97, 98, 108, 140, 243, 294, 353, 354, 355, 366, 370, 377, 379, 537, 550, 574, 644, 762, 763, 764, 916, 925], "stack": [68, 155, 218, 243], "length": [68, 69, 95, 108, 118, 123, 150, 151, 196, 243, 287, 314, 342, 347, 401, 423, 424, 425, 426, 427, 428, 430, 431, 432, 445, 462, 464, 468, 470, 479, 500, 550, 580, 581, 598, 610, 644, 686, 691, 702, 714, 715, 723, 749, 754, 800, 816, 822, 830, 831, 832, 833, 834, 835, 837, 838, 839, 857, 874, 876, 880, 882, 891, 925], "don": [68, 127, 214, 243, 255, 274, 314, 499, 550, 653, 673, 714, 843, 916, 925], "t": [68, 101, 108, 127, 178, 214, 243, 255, 274, 314, 352, 353, 354, 355, 412, 463, 469, 475, 476, 499, 543, 550, 597, 644, 653, 673, 714, 760, 762, 763, 764, 843, 875, 881, 887, 888, 916, 925], "match": [68, 79, 85, 87, 88, 89, 91, 115, 116, 141, 165, 187, 243, 399, 451, 452, 455, 458, 459, 460, 463, 466, 467, 469, 474, 475, 476, 504, 575, 586, 644, 795, 863, 864, 867, 870, 871, 872, 875, 878, 879, 881, 886, 887, 888, 925], "relev": 68, "execut": [68, 166, 243, 274, 563, 590, 598, 644, 673], "df_h1": 68, "l1": 68, "l2": 68, "df_h2": 68, "r1": 68, "r2": 68, "r3": 68, "df_d1": 68, "df_d2": 68, "bin": [69, 465, 544, 715, 777, 822, 877, 919, 925], "label": [69, 423, 424, 425, 426, 427, 428, 430, 431, 432, 550, 598, 644, 715, 822, 830, 831, 832, 833, 834, 835, 837, 838, 839, 925], "break_point_label": [69, 715, 822, 925], "break_point": [69, 715, 777, 822, 925], "category_label": [69, 715, 822, 925], "discret": [69, 273, 315, 352, 550, 672, 715, 717, 760, 777, 822, 925], "deprec": [69, 92, 267, 358, 532, 537, 550, 644, 665, 766, 925], "sinc": [69, 92, 100, 109, 267, 324, 358, 521, 532, 537, 550, 665, 727, 766, 925], "assign": [69, 118, 150, 243, 417, 472, 473, 550, 580, 644, 715, 805, 822, 824, 884, 885, 925], "must": [69, 86, 87, 100, 109, 138, 150, 151, 165, 172, 187, 243, 292, 392, 424, 425, 426, 427, 428, 430, 431, 432, 550, 572, 580, 581, 586, 590, 595, 644, 715, 822, 925], "breakpoint": [69, 715, 822, 925], "inf": [69, 119, 120, 261, 373, 376, 550, 659, 715, 777, 784, 788, 804, 818, 822, 913, 925], "low": [70, 150, 243, 343, 500, 580, 644], "high": [70, 150, 243, 343, 500, 580, 644], "interv": [70, 150, 151, 216, 243, 327, 342, 343, 347, 371, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 644, 725, 727, 728, 730, 735, 737, 740, 742, 743, 746, 747, 749, 750, 752, 753, 754, 755, 756, 758, 780, 925], "timedelta": [70, 150, 151, 216, 243, 322, 324, 325, 328, 333, 335, 338, 339, 340, 342, 343, 345, 346, 347, 348, 349, 351, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 644, 732, 734, 739, 745, 749, 754, 806, 809, 814, 815, 925], "1d": [70, 150, 151, 165, 216, 243, 319, 326, 334, 338, 342, 347, 350, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 722, 727, 729, 732, 733, 734, 739, 741, 745, 749, 752, 753, 754, 756, 757], "closedinterv": [70, 150, 151, 243, 371, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 644, 780, 925], "lower": [70, 108, 150, 181, 235, 243, 371, 391, 416, 419, 428, 500, 533, 550, 573, 580, 599, 638, 644, 780, 804, 823, 826, 835, 913, 925], "bound": [70, 97, 98, 137, 150, 243, 277, 291, 371, 391, 493, 500, 550, 580, 644, 676, 690, 761, 780, 804, 913, 925], "upper": [70, 97, 98, 137, 150, 243, 371, 493, 500, 550, 580, 644, 761, 780, 804, 913, 925], "period": [70, 150, 151, 193, 194, 243, 286, 342, 347, 353, 354, 355, 411, 437, 438, 550, 580, 581, 605, 606, 644, 685, 749, 754, 762, 763, 764, 818, 848, 849, 925], "like": [70, 86, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 158, 160, 164, 243, 274, 403, 417, 527, 530, 540, 550, 573, 600, 644, 673, 824, 925], "durat": [70, 165, 216, 243, 323, 326, 330, 332, 334, 337, 344, 350, 489, 550, 586, 644, 726, 729, 736, 738, 741, 744, 751, 757, 909, 925], "3d12h4m25": [70, 150, 151, 165, 216, 243, 342, 347, 580, 581, 586, 644, 749, 754], "hour": [70, 150, 151, 165, 216, 243, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 514, 515, 550, 580, 581, 586, 644, 745, 749, 754], "minut": [70, 150, 151, 165, 216, 243, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 514, 515, 550, 580, 581, 586, 644, 745, 749, 754], "tempor": [70, 150, 151, 162, 188, 204, 243, 371, 424, 425, 426, 427, 428, 430, 431, 432, 550, 560, 580, 581, 644, 780, 795, 925], "window": [70, 150, 151, 243, 314, 342, 347, 353, 354, 355, 410, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 505, 550, 580, 581, 644, 714, 749, 754, 762, 763, 764, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 925], "granular": 70, "finer": 70, "permut": 70, "1mo": [70, 150, 151, 165, 216, 243, 321, 323, 338, 341, 342, 345, 347, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 724, 726, 742, 745, 746, 747, 748, 749, 754, 755], "dtrang": 70, "1985": 70, "04": [70, 113, 150, 216, 243, 320, 321, 322, 323, 326, 333, 334, 335, 339, 341, 342, 343, 344, 345, 348, 349, 350, 476, 515, 580, 644, 724, 726, 729, 735, 737, 740, 741, 742, 743, 747, 748, 750, 751, 752, 755, 756, 757, 888], "05": [70, 113, 115, 116, 165, 216, 243, 320, 321, 323, 341, 343, 345, 586, 644, 723, 724, 725, 726, 748, 749, 754, 756], "07": [70, 320, 322, 339, 341, 342, 347, 349, 476, 521, 723, 725, 756, 888], "08": [70, 115, 116, 151, 243, 320, 342, 476, 515, 581, 644, 749, 754, 888], "zone": [70, 97, 98, 108, 321, 341, 724, 748], "america": [70, 748], "new_york": [70, 748], "\u03bc": [70, 150, 151, 165, 216, 243, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 476, 521, 580, 581, 586, 644, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 888], "est": [70, 748], "encount": [71, 150, 243, 407, 408, 459, 460, 507, 510, 519, 537, 550, 580, 644, 814, 815, 871, 872, 925], "duplic": [74, 158, 164, 165, 212, 243, 372, 550, 585, 586, 617, 644, 782, 925], "certain": [75, 100, 109, 156, 216, 243, 504, 566, 598, 608, 609, 644, 925], "structur": [76, 80, 82, 139, 178, 243, 412, 550, 597, 644, 652, 925], "least": [77, 119, 411, 494, 550, 818, 914, 925], "unexpect": [78, 243], "caus": [78, 86, 97, 98, 108, 126, 139, 243, 652, 925], "panic": 78, "combin": [80, 82, 150, 151, 152, 165, 216, 243, 265, 347, 463, 469, 475, 550, 580, 581, 586, 607, 644, 754, 875, 881, 887], "mismatch": 80, "incompat": 82, "pa": [85, 113], "chunkedarrai": [85, 174, 243, 718, 925], "schemadefinit": [85, 87, 88, 89, 91, 243, 644], "schema_overrid": [85, 87, 88, 89, 90, 91, 163, 243, 644], "copi": [85, 86, 126, 128, 129, 163, 202, 207, 220, 243, 359, 479, 550, 564, 565, 622, 644, 649, 703, 707, 720, 767, 891, 903, 907, 908, 925], "most": [85, 97, 98, 108, 401, 405, 411, 473, 494, 550, 810, 818, 885, 914, 925], "closest": 85, "pair": [85, 87, 88, 89, 91, 183, 243, 601, 644], "declar": [85, 87, 88, 89, 91, 243, 644], "sever": [85, 87, 88, 89, 91, 243, 644], "wai": [85, 87, 88, 89, 91, 133, 149, 163, 178, 197, 223, 243, 410, 412, 447, 504, 550, 568, 579, 597, 611, 626, 644], "As": [85, 87, 88, 89, 91, 101, 243, 535, 644], "auto": [85, 87, 88, 89, 91, 106, 112, 211, 243, 644], "automat": [85, 87, 88, 89, 91, 97, 98, 99, 108, 119, 120, 191, 220, 243, 463, 469, 475, 476, 604, 622, 644, 875, 881, 887, 888, 925], "equival": [85, 87, 88, 89, 91, 100, 161, 175, 243, 464, 550, 644, 798, 876, 889, 890, 925], "form": [85, 87, 88, 89, 91, 162, 188, 214, 243, 411, 550, 644, 818, 925], "them": [85, 87, 88, 89, 91, 108, 139, 150, 151, 165, 172, 216, 243, 279, 371, 407, 408, 505, 550, 580, 581, 586, 595, 644, 652, 678, 814, 815, 925], "dimens": [85, 87, 89, 91, 243, 421, 550, 644, 828, 925], "construct": [85, 87, 88, 89, 90, 91, 243, 394, 550, 578, 600, 644, 925], "allow_copi": [86, 126], "interchang": [86, 126], "protocol": [86, 99, 126], "__dataframe__": 86, "convers": [86, 126, 163, 207, 243, 476, 560, 888, 906, 907, 908, 925], "detail": [86, 99, 115, 116, 126, 243, 644, 933], "latest": [86, 100, 109, 126, 366, 401, 550], "index": [86, 90, 93, 99, 114, 126, 143, 150, 151, 156, 165, 179, 185, 187, 196, 208, 216, 221, 243, 250, 262, 263, 264, 266, 267, 268, 269, 277, 287, 291, 338, 424, 425, 426, 427, 428, 430, 431, 432, 435, 445, 457, 470, 485, 550, 580, 581, 586, 610, 624, 644, 660, 661, 662, 663, 664, 665, 667, 668, 676, 686, 690, 745, 816, 842, 845, 857, 869, 882, 898, 925], "throw": [86, 300, 459, 460, 550, 698, 871, 872, 925], "runtimeerror": 86, "from_panda": [86, 101], "from_arrow": 86, "effici": [86, 163, 243], "map": [87, 88, 97, 98, 102, 103, 106, 107, 108, 110, 127, 136, 162, 183, 187, 188, 203, 243, 342, 347, 393, 394, 494, 499, 550, 570, 601, 644, 749, 754, 805, 925], "clone": [87, 88, 89, 90, 91, 128, 206, 207, 243, 564, 644, 703, 906, 907, 908, 916, 925], "dimension": [87, 89, 91, 243, 644, 925], "infer_schema_length": [88, 91, 97, 98, 101, 108, 111, 243, 644], "mani": [88, 91, 99, 139, 243, 652, 925], "scan": [88, 91, 97, 98, 106, 108, 109, 110, 111, 112, 113, 573, 582, 589, 644], "slow": [88, 91, 97, 98, 108, 255, 314, 550, 714, 925], "NOT": [88, 115, 116], "typic": [88, 127, 243, 653, 925], "clearer": 88, "after": [88, 96, 97, 98, 102, 106, 108, 110, 111, 112, 139, 213, 242, 243, 356, 394, 417, 479, 550, 618, 644, 652, 748, 805, 824, 891, 925], "load": [88, 90, 100, 109, 243, 560, 582, 589, 644], "want": [88, 127, 139, 175, 243, 255, 303, 304, 305, 362, 392, 394, 424, 425, 426, 427, 428, 430, 431, 432, 510, 519, 550, 566, 582, 589, 644, 652, 653, 704, 705, 706, 907, 925], "_partial_": [88, 243, 644], "omit": [88, 118, 119, 120, 175, 243], "partial": 88, "present": [88, 115, 119, 375, 550, 916, 925], "np": [89, 142, 243, 485, 550, 644, 784, 788, 789, 790, 830, 898, 925], "ndarrai": [89, 142, 206, 243, 485, 550, 644, 718, 842, 845, 898, 907, 925], "numpi": [89, 114, 131, 206, 207, 243, 407, 408, 550, 644, 784, 788, 789, 790, 814, 815, 830, 842, 907, 908, 916, 925], "columnar": [89, 91, 162, 188, 243], "interpret": [89, 91, 97, 98, 108, 243, 644], "yield": [89, 91, 97, 98, 108, 137, 139, 211, 243, 644, 652, 761, 925], "conclus": [89, 91, 243, 644], "pd": [90, 101, 489, 550, 909, 925], "nan_to_nul": [90, 243, 644, 925], "include_index": 90, "datetimeindex": [90, 718, 925], "panda": [90, 101, 114, 207, 243, 489, 550, 644, 908, 909, 925], "instal": [90, 97, 98, 99, 102, 106, 114, 131, 206, 207, 243, 607, 644, 908, 925], "nan": [90, 115, 116, 119, 126, 140, 207, 243, 317, 318, 360, 370, 377, 379, 380, 381, 395, 404, 407, 408, 507, 537, 550, 574, 644, 655, 659, 719, 768, 789, 790, 814, 815, 830, 908, 925], "convert": [90, 92, 100, 101, 109, 126, 203, 204, 205, 206, 209, 243, 292, 321, 465, 476, 644, 691, 724, 877, 888, 895, 906, 907, 908, 916, 925], "pd_df": 90, "pd_seri": 90, "dummi": [92, 205, 243, 904, 925], "to_dummi": [92, 243, 925], "foo_1": [92, 205, 243], "foo_2": [92, 205, 243], "bar_3": [92, 205, 243], "bar_4": [92, 205, 243], "ham_a": [92, 205, 243], "ham_b": [92, 205, 243], "datatypeclass": 93, "get": [93, 103, 107, 121, 130, 136, 146, 147, 150, 151, 153, 154, 158, 160, 167, 174, 187, 190, 192, 196, 200, 219, 228, 237, 243, 250, 262, 263, 264, 266, 267, 276, 280, 281, 293, 309, 310, 311, 312, 313, 324, 363, 368, 372, 374, 382, 385, 387, 395, 396, 397, 400, 402, 404, 407, 408, 416, 445, 449, 461, 464, 483, 484, 491, 495, 518, 523, 527, 528, 529, 530, 538, 541, 542, 550, 567, 570, 577, 580, 581, 582, 587, 589, 603, 610, 614, 621, 631, 640, 644, 660, 661, 662, 663, 664, 665, 675, 679, 680, 692, 702, 710, 711, 712, 713, 727, 773, 776, 780, 782, 785, 796, 801, 806, 808, 809, 811, 814, 815, 819, 820, 823, 857, 860, 873, 876, 897, 903, 904, 911, 915, 916, 925], "uint32": [93, 114, 137, 243, 264, 267, 268, 269, 281, 322, 325, 329, 331, 333, 335, 336, 339, 340, 343, 348, 349, 420, 452, 461, 464, 485, 489, 550, 663, 667, 668, 680, 698, 725, 728, 735, 737, 740, 742, 743, 746, 747, 750, 755, 756, 761, 843, 864, 909, 925], "regular": [93, 162, 187, 188, 216, 243, 356, 504, 517, 527, 530, 540, 550], "uint64": [93, 152, 243, 268, 269, 367, 419, 550, 667, 668, 775, 826, 925], "bigidx": 93, "read": [94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 139, 243, 392, 550, 573, 578, 600, 644, 652, 925], "batch": [94, 98, 111, 590, 644], "over": [94, 97, 98, 100, 108, 119, 127, 139, 162, 163, 187, 188, 211, 222, 225, 243, 255, 314, 361, 370, 392, 393, 423, 424, 425, 426, 427, 428, 430, 431, 432, 499, 510, 511, 519, 526, 534, 550, 628, 652, 653, 714, 830, 831, 832, 834, 838, 925], "fetch": [94, 108, 166, 243, 564, 566, 582, 589, 644], "ideal": 94, "read_csv_batch": [94, 561], "tpch": [94, 98], "tables_scale_100": [94, 98], "lineitem": [94, 98, 99], "tbl": [94, 98], "try_parse_d": [94, 97, 98, 108], "In": [95, 100, 109, 112, 119, 120, 123, 127, 137, 139, 150, 151, 175, 243, 255, 400, 550, 580, 581, 644, 652, 761, 825, 925], "probabl": [95, 123, 352, 550, 760, 925], "n_row": [96, 97, 98, 102, 106, 108, 110, 111, 112, 163, 243, 573, 644], "accept": [96, 97, 98, 100, 102, 106, 138, 149, 191, 197, 210, 220, 223, 243, 356, 410, 447, 501, 503, 504, 506, 517, 539, 550, 572, 579, 604, 611, 616, 622, 626, 644], "stop": [96, 97, 98, 102, 106, 108, 110, 111, 112, 322, 324, 325, 327, 328, 333, 335, 339, 340, 342, 343, 346, 347, 348, 349, 351, 722, 724, 725, 727, 728, 730, 735, 737, 740, 742, 743, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758], "textio": 97, "new_column": [97, 98, 101, 108], "comment_char": [97, 98, 108], "quote_char": [97, 98, 108], "skip_row": [97, 98, 108], "missing_utf8_is_empty_str": [97, 98, 108], "ignore_error": [97, 98, 108], "n_thread": [97, 98], "8192": 97, "csvencod": [97, 98, 108], "low_memori": [97, 98, 106, 108, 111, 112], "storage_opt": [97, 100, 102, 106, 109, 110, 112], "skip_rows_after_head": [97, 98, 108], "row_count_nam": [97, 98, 102, 106, 108, 110, 111, 112], "row_count_offset": [97, 98, 102, 106, 108, 110, 111, 112], "sample_s": [97, 98], "eol_char": [97, 98, 108], "we": [97, 98, 101, 108, 165, 243, 274, 465, 525, 543, 586, 590, 644, 653, 673, 777, 822, 877, 925], "handler": [97, 98, 101], "g": [97, 98, 100, 101, 102, 106, 109, 110, 112, 214, 243, 255, 356, 439, 517, 550, 601, 644, 843, 907, 925], "builtin": [97, 98, 101], "stringio": [97, 98], "fsspec": [97, 98, 102, 106, 109, 110, 112, 114], "remot": [97, 98, 102, 106], "first": [97, 98, 101, 108, 111, 127, 148, 150, 153, 165, 167, 174, 178, 179, 200, 211, 212, 216, 228, 243, 264, 266, 267, 274, 277, 278, 314, 338, 342, 368, 374, 387, 394, 412, 435, 447, 457, 459, 460, 466, 467, 503, 510, 519, 523, 550, 566, 580, 582, 586, 589, 597, 617, 623, 631, 644, 662, 665, 673, 676, 677, 691, 714, 716, 745, 749, 776, 785, 801, 805, 842, 869, 871, 872, 878, 879, 897, 925], "autogener": [97, 98, 108], "column_x": [97, 98, 108], "enumer": [97, 98, 108, 163, 243], "shorter": [97, 98], "remain": [97, 98, 108, 137, 243, 255, 472, 473, 550, 590, 644, 761, 884, 885, 925], "comment": [97, 98, 108], "instanc": [97, 98, 108, 119, 120, 139, 144, 243, 292, 300, 401, 424, 425, 426, 427, 428, 430, 431, 432, 510, 519, 550, 590, 624, 644, 652, 698, 925], "special": [97, 98, 108, 653, 925], "handl": [97, 98, 108, 113, 273, 315, 479, 550, 672, 717, 891, 925], "escap": [97, 98, 108], "dure": [97, 98, 108, 124, 139, 243, 652, 925], "equal": [97, 98, 108, 115, 116, 122, 145, 150, 165, 172, 243, 423, 424, 425, 426, 427, 428, 430, 431, 432, 461, 462, 468, 479, 500, 550, 580, 586, 595, 644, 830, 831, 832, 833, 834, 835, 837, 838, 839, 843, 873, 874, 880, 891, 925], "would": [97, 98, 108, 264, 267, 277, 400, 417, 501, 550, 590, 644, 662, 665, 676, 824, 907, 925], "prefer": [97, 98, 100, 108, 127, 139, 162, 187, 188, 225, 243, 255, 423, 550, 628, 644, 652, 653, 830, 925], "treat": [97, 98, 108, 451, 466, 467, 863, 878, 879], "befor": [97, 108, 124, 139, 150, 165, 213, 243, 312, 313, 314, 394, 411, 423, 424, 425, 426, 427, 428, 430, 431, 432, 479, 483, 550, 580, 583, 586, 618, 644, 652, 712, 713, 714, 805, 818, 830, 831, 832, 833, 834, 835, 837, 838, 839, 891, 896, 925], "10000": [97, 163, 243, 479], "check": [97, 98, 108, 115, 116, 145, 159, 161, 243, 252, 253, 271, 295, 298, 299, 371, 375, 451, 455, 474, 550, 590, 644, 650, 651, 670, 693, 696, 697, 781, 783, 786, 787, 793, 794, 795, 797, 798, 843, 863, 867, 886, 925], "might": [97, 98, 108, 255, 400, 492, 550, 908, 925], "issu": [97, 98, 101, 108, 312, 313, 483, 550, 712, 713, 896, 925], "iso8601": [97, 98, 108], "naiv": [97, 98, 108, 320, 723], "hand": [97, 98, 108], "alwai": [97, 127, 225, 243, 400, 590, 628, 644, 653, 925], "physic": [97, 98, 165, 243, 301, 489, 550, 563, 585, 586, 644, 700, 909, 925], "cpu": [97, 98], "your": [97, 98, 115, 116, 127, 162, 191, 220, 223, 243, 255, 550, 566, 582, 589, 590, 604, 622, 626, 644, 653, 925], "system": [97, 98], "wrongli": 97, "done": [97, 98, 108, 113, 148, 165, 243, 254, 300, 462, 468, 550, 586, 644, 698, 874, 880, 925], "buffer": [97, 98, 137, 162, 243, 761, 925], "modifi": [97, 98, 108, 124, 155, 162, 218, 243, 265, 341, 350, 550, 748, 757, 827, 889, 890, 925], "lossi": [97, 98, 108], "decod": [97, 98], "im": [97, 98], "usag": [97, 98, 108, 119, 120, 195, 243, 851, 925], "expens": [97, 98, 106, 108, 111, 112, 127, 162, 187, 188, 211, 212, 243, 255, 550, 617, 644, 652, 653, 925], "nativ": [97, 102, 106, 127, 162, 188, 204, 225, 243, 255, 550, 628, 653, 925], "parser": 97, "even": 97, "possibl": [97, 127, 149, 162, 188, 212, 225, 243, 255, 391, 400, 473, 493, 550, 579, 617, 628, 644, 653, 885, 925], "regard": [97, 507, 537], "sens": [97, 102, 106, 110, 112, 150, 151, 172, 216, 243, 580, 581, 595, 644], "particular": [97, 102, 106, 110, 112, 137, 243, 761, 925], "storag": [97, 100, 102, 106, 109, 110, 112], "skip": [97, 98, 101, 106, 108, 112, 214, 243, 653, 925], "offset": [97, 98, 102, 106, 108, 110, 111, 112, 150, 151, 196, 216, 221, 243, 287, 338, 342, 347, 445, 470, 476, 550, 580, 581, 610, 624, 644, 686, 745, 749, 754, 857, 882, 888, 925], "row_count": [97, 98, 102, 106, 108, 110, 111, 112], "sampl": [97, 98, 225, 243, 444, 550, 628, 856, 925], "estim": [97, 98, 137, 243, 354, 355, 384, 550, 761, 763, 764, 799, 925], "alloc": [97, 98, 137, 182, 243, 761, 925], "need": [97, 98, 101, 115, 116, 150, 151, 195, 206, 243, 292, 394, 439, 461, 550, 580, 581, 644, 850, 873, 925], "scan_csv": [97, 98, 608, 609, 644], "lazili": [97, 98, 108, 109, 110, 111, 112, 394, 550], "glob": [97, 98, 108, 110, 111, 112], "pattern": [97, 98, 108, 110, 111, 112, 162, 243, 399, 451, 452, 457, 458, 466, 467, 844, 845, 863, 864, 869, 870, 878, 879, 925], "store": [97, 106, 139, 162, 188, 243, 652, 925], "continu": [97, 106, 444, 550, 856, 925], "benchmark": [97, 106], "50000": 98, "batchedcsvread": [98, 560], "upon": 98, "creation": 98, "gather": 98, "next_batch": 98, "call": [98, 119, 120, 127, 149, 166, 242, 243, 255, 310, 313, 550, 561, 579, 643, 644, 653, 925], "big": 98, "interest": 98, "seen_group": 98, "big_fil": 98, "while": [98, 100, 101, 109, 119, 120, 162, 171, 211, 243, 594, 644], "df_current_batch": 98, "concat": [98, 505, 702, 811, 925], "partition_df": 98, "partition_bi": [98, 163, 243], "as_dict": [98, 177, 243], "fh": 98, "write_csv": [98, 108, 243], "els": 98, "partition_on": 99, "partition_rang": 99, "partition_num": 99, "dbreadengin": 99, "connectorx": [99, 114], "raw": 99, "partit": [99, 100, 106, 109, 113, 163, 177, 243], "backend": [99, 100, 109], "transfer": 99, "document": [99, 101, 460, 476, 872, 888], "redshift": 99, "mysql": 99, "mariadb": 99, "clickhous": 99, "oracl": 99, "bigqueri": 99, "pleas": 99, "doc": [99, 131, 243], "github": 99, "com": [99, 353, 354, 355, 457, 550, 762, 763, 764, 869, 925], "sfu": 99, "db": 99, "connector": 99, "destin": 99, "sqlite": 99, "develop": [99, 119, 120], "flight_sql": 99, "further": [99, 908, 925], "wide": [99, 148, 171, 214, 243, 594, 644], "adopt": 99, "significantli": 99, "better": [99, 127, 225, 243, 255, 494, 550, 628, 844, 845, 925], "driver": 99, "cpp": 99, "partition_col": 99, "explicitli": [99, 118, 119, 394, 539, 550], "delta_table_opt": [100, 109], "lake": [100, 109, 560], "root": [100, 109, 383, 393, 402, 414, 448, 482, 549, 550, 859, 925], "filesystem": [100, 109], "absolut": [100, 109, 115, 116, 187, 243, 249, 353, 354, 355, 550, 648, 762, 763, 764, 925], "gc": [100, 109], "azur": [100, 109], "deltalak": [100, 109, 114], "cloud": [100, 109, 113], "configur": [100, 109], "authent": [100, 109], "keyword": [100, 106, 109, 131, 178, 187, 191, 220, 223, 243, 412, 536, 539, 550, 597, 604, 622, 626, 644, 925], "table_path": [100, 109], "avoid": 100, "year": [100, 109, 150, 151, 165, 216, 243, 327, 328, 338, 339, 342, 347, 348, 424, 425, 426, 427, 428, 430, 431, 432, 513, 514, 550, 580, 581, 586, 644, 730, 731, 745, 746, 749, 754, 755], "2021": [100, 109, 132, 148, 150, 216, 243, 476, 525, 580, 644, 731, 795, 888, 925], "aw": [100, 109], "bucket": [100, 109, 342, 347, 749, 754, 777, 925], "aws_access_key_id": [100, 109], "the_aws_access_key_id": [100, 109], "aws_secret_access_kei": [100, 109], "the_aws_secret_access_kei": [100, 109], "googl": [100, 109], "service_account": [100, 109], "service_account_json_absolute_path": [100, 109], "az": [100, 109], "adl": [100, 109], "abf": [100, 109], "azure_storage_account_nam": [100, 109], "azure_storage_account_kei": [100, 109], "without_fil": [100, 109], "track": [100, 109, 127, 243], "sheet_id": 101, "sheet_nam": 101, "xlsx2csv_option": 101, "read_csv_opt": 101, "xlsx2csv": [101, 114], "read_csv": [101, 108], "skip_empty_lin": 101, "my": [101, 113], "datasheet": 101, "correct": [101, 354, 355, 384, 429, 444, 550, 590, 644, 763, 764, 799, 836, 856, 925], "look": [101, 292, 295, 693], "fix": [101, 118, 119, 350, 424, 425, 426, 427, 428, 430, 431, 432, 550, 757], "whole": [101, 446, 447, 457, 550, 644, 869], "With": [101, 127, 243, 255, 550, 653, 925], "1000": [101, 137, 243, 329, 330, 479, 736], "spreadsheet": [101, 179, 243], "xl": 101, "xlsm": 101, "xlsb": 101, "odf": 101, "od": [101, 475, 887], "odt": 101, "memory_map": [102, 106, 110], "v2": [102, 110], "greatli": [102, 110], "repeat": [102, 110, 418, 420, 550], "o": [102, 110, 314, 456, 490, 550, 714, 868, 910, 925], "page": [102, 106, 110, 112, 243, 550, 560, 609, 644, 925], "give": [102, 106, 110, 111, 112, 171, 243, 324, 384, 420, 550, 560, 594, 644, 727, 799, 925], "That": [102, 590, 644], "filenam": 102, "my_fil": 102, "write_ipc": [102, 243], "read_ndjson": 104, "parallelstrategi": [106, 112], "use_statist": [106, 112], "awar": [106, 162, 188, 204, 243, 476, 888], "stabl": [106, 131, 189, 243, 594, 644], "row_group": [106, 112], "read_tabl": 106, "with_column_nam": 108, "push": [108, 110, 111, 112, 113], "down": [108, 110, 111, 112, 113, 365, 550, 772, 925], "therebi": [108, 110, 111, 112], "potenti": [108, 110, 111, 112], "overhead": [108, 110, 111, 112], "realloc": [108, 110, 111, 139, 243, 652, 925], "headerless": 108, "unlik": 108, "fewer": 108, "my_long_fil": 108, "doesn": [108, 352, 550, 760, 916, 925], "thing": [108, 497, 518], "less": [108, 165, 243, 462, 468, 473, 479, 586, 644, 874, 880, 885, 891], "limit": [108, 141, 243, 294, 303, 304, 305, 361, 366, 550, 575, 582, 609, 644, 704, 705, 706, 769, 925], "breezah": 108, "languag": [108, 150, 151, 165, 216, 243, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 745, 749, 754], "hard": [108, 590, 644], "mydf": 108, "lambda": [108, 127, 144, 178, 225, 243, 255, 292, 353, 354, 355, 392, 393, 423, 499, 510, 511, 512, 519, 526, 534, 540, 550, 590, 597, 628, 644, 653, 691, 762, 763, 764, 925], "simpli": [108, 510, 519], "idx": [108, 150, 163, 243, 292, 580, 644, 691, 845, 925], "uint16": [108, 312, 313, 483, 550, 712, 713, 896, 925], "u16": 108, "aws_region": 109, "eu": 109, "central": [109, 384, 444, 550, 799, 856, 925], "allow_pyarrow_filt": 113, "comparison": 113, "dset": 113, "folder": 113, "1970": 113, "stdout": [114, 148, 243], "13": [114, 128, 129, 140, 141, 147, 151, 156, 166, 174, 220, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 243, 423, 425, 505, 510, 519, 542, 550, 564, 565, 574, 575, 581, 588, 622, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 644, 653, 749, 754, 755, 925], "platform": 114, "maco": 114, "arm64": 114, "arm": 114, "64bit": [114, 419, 550, 826, 925], "main": 114, "feb": 114, "59": [114, 320, 333, 343, 514, 723, 740, 750], "clang": 114, "14": [114, 127, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 243, 328, 370, 550, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 749], "1400": 114, "29": 114, "202": 114, "2_alpha": 114, "detect": 114, "matplotlib": [114, 598, 607, 644], "check_dtyp": [115, 116], "check_exact": [115, 116], "rtol": [115, 116], "1e": [115, 116], "atol": [115, 116], "nans_compare_equ": [115, 116], "check_column_ord": 115, "check_row_ord": 115, "assertionerror": [115, 116], "compar": [115, 116, 145, 243, 498, 843, 925], "exactli": [115, 116, 119, 120, 472, 473, 851, 884, 885, 925], "toler": [115, 116, 165, 243, 586, 644], "inexact": [115, 116], "assert": [115, 116, 118, 119, 120, 151, 243, 560, 581, 644, 774, 925], "irrespect": 115, "unsort": 115, "check_nam": 116, "s1": [116, 144, 243, 908, 917, 925], "searchstrategi": [117, 119, 120], "null_prob": [117, 119, 120], "percentag": [117, 119, 120, 411, 550, 818, 925], "chanc": [117, 119, 120], "flag": [117, 436, 550, 571, 590, 644, 846, 925], "hypothesi": [117, 118, 119, 120, 933], "sampled_from": 117, "unique_small_int": 117, "ccy": 117, "gbp": 117, "eur": [117, 132, 148, 243], "jpy": 117, "min_col": [118, 119], "max_col": [118, 119], "suitabl": [118, 127, 243, 255, 435, 550, 653, 842, 925], "standalon": [118, 119], "itself": [118, 588, 644], "mincol": 118, "exact": [118, 119, 120, 195, 243, 476, 888], "especi": 118, "punctuat": 118, "test_special_char_colname_init": 118, "z": [118, 119, 137, 158, 160, 164, 171, 243, 270, 301, 367, 420, 476, 550, 585, 594, 610, 644, 700, 769, 888, 925], "test_unique_xyz": 118, "assert_someth": 118, "min_siz": [119, 120], "max_siz": [119, 120], "include_col": 119, "allow_infin": [119, 120], "allowed_dtyp": [119, 120], "excluded_dtyp": [119, 120], "describ": [119, 148, 243, 925], "desir": 119, "ignor": [119, 120, 169, 199, 243, 273, 315, 341, 353, 354, 355, 407, 408, 550, 672, 717, 748, 762, 763, 764, 814, 815, 925], "ensur": [119, 120, 122, 149, 177, 187, 243, 371, 494, 550, 579, 590, 644, 907, 914, 925], "n_chunk": [119, 120, 243, 925], "randomis": 119, "onto": 119, "independ": [119, 120], "either": [119, 151, 166, 169, 177, 187, 199, 243, 581, 588, 644], "pct": 119, "preced": 119, "disallow": [119, 120], "exclud": [119, 120, 310, 313, 371, 504, 537, 550, 780, 795, 925], "deploi": [119, 120], "characterist": [119, 120], "concret": [119, 120], "test_repr": [119, 120], "isinst": [119, 120, 243], "repr": [119, 120], "known": [119, 628], "df_strategi": 119, "15836": 119, "1755e": 119, "38": 119, "575050513": 119, "constructor": 120, "max_data_s": 120, "distinct": [120, 177, 243, 293, 417, 515, 550, 692, 824, 925], "54666": 120, "6414": 120, "63290": 120, "toggl": [122, 476, 888], "scope": 124, "lifetim": 124, "initi": [124, 510, 519], "whatev": 124, "were": 124, "enter": 124, "set_verbos": 124, "do_various_th": 124, "restor": 124, "nan_as_nul": 126, "_pyarrowdatafram": 126, "nullabl": 126, "extens": [126, 207, 243, 908, 925], "propag": [126, 169, 199, 243, 407, 408, 550, 814, 815, 925], "return_dtyp": [127, 243, 255, 392, 499, 526, 550, 653, 925], "inference_s": [127, 243], "256": [127, 243, 818, 925], "user": [127, 178, 225, 243, 255, 412, 436, 499, 550, 597, 628, 644, 653, 846, 925], "udf": [127, 178, 225, 243, 255, 412, 499, 550, 597, 628, 644, 653, 925], "logic": [127, 225, 243, 489, 550, 578, 585, 600, 625, 628, 644, 653, 909, 925], "almost": [127, 225, 243, 628, 653, 925], "_significantly_": [127, 225, 243, 628, 653, 925], "intens": [127, 225, 243, 628, 653, 925], "becaus": [127, 137, 150, 166, 214, 225, 243, 274, 580, 628, 644, 653, 673, 761, 925], "forc": [127, 165, 225, 243, 585, 586, 628, 644, 653, 925], "materi": [127, 225, 243, 598, 628, 644, 653, 925], "parallelis": [127, 225, 243, 628, 653, 925], "optimis": [127, 225, 243, 628, 644, 653, 844, 845, 925], "wherev": [127, 225, 243, 255, 550, 628, 653, 925], "strongli": [127, 187, 225, 243, 255, 550, 628, 653, 925], "achiev": [127, 225, 243, 255, 550, 628, 653, 925], "best": [127, 225, 243, 255, 550, 628, 653, 925], "tri": [127, 243], "arbitrarili": [127, 243], "rearrang": [127, 243], "preserv": [127, 207, 243, 441, 550, 853, 908, 925], "syntax": [127, 175, 243, 607, 644, 925], "lru_cach": [127, 243, 255, 550, 653, 925], "magnitud": [127, 243, 255, 550, 653, 925], "speedup": [127, 162, 243, 255, 550, 653, 925], "column_1": [127, 211, 243], "scalar": [127, 161, 243, 435, 499, 550, 798, 842, 925], "ident": [128, 129, 243, 564, 565, 644, 703, 707, 925], "cheap": [128, 129, 243, 564, 565, 644, 652, 703, 707, 925], "deepcopi": [128, 129, 243, 564, 565, 644, 703, 707, 925], "clear": [129, 243, 565, 644, 707, 925], "properti": [130, 136, 154, 190, 192, 219, 243, 560, 567, 570, 603, 621, 644], "appl": [130, 155, 164, 183, 185, 203, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 243, 414, 422, 455, 474, 482, 550, 585, 601, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 644, 867, 886], "banana": [130, 203, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 243, 414, 422, 482, 550, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639], "pearson": [131, 243, 384, 444, 507, 532, 550, 799, 856, 925], "correl": [131, 243, 507, 532, 537], "coeffici": [131, 243, 444, 550, 856, 925], "corrcoef": [131, 243], "summari": [132, 243, 716, 925], "glimps": [132, 153, 243], "usd": [132, 148, 243], "2020": [132, 148, 151, 243, 321, 323, 326, 329, 330, 332, 334, 337, 341, 344, 345, 476, 581, 644, 724, 726, 729, 736, 738, 741, 744, 748, 751, 888], "null_count": [132, 135, 243, 314, 550, 714, 716, 925], "266667": [132, 243], "666667": [132, 169, 217, 231, 243, 353, 550, 620, 634, 644], "std": [132, 243, 423, 550, 644, 716, 837, 925], "101514": [132, 243], "707107": [132, 243, 354, 550, 763, 925], "57735": [132, 243], "median": [132, 179, 243, 426, 550, 623, 644, 833, 925], "more_column": [133, 138, 213, 243, 356, 517, 550, 568, 572, 618, 644], "Or": [133, 149, 150, 151, 165, 197, 216, 223, 243, 410, 447, 504, 543, 550, 568, 579, 580, 581, 586, 611, 626, 644], "subset": [135, 175, 212, 243, 569, 617, 644], "snippet": [135, 243, 569, 644], "is_nul": [135, 243, 550, 569, 644, 925], "sizeunit": [137, 243, 761, 925], "heap": [137, 243, 761, 925], "its": [137, 243, 320, 342, 347, 447, 550, 723, 749, 754, 761, 925], "bitmap": [137, 243, 761, 925], "therefor": [137, 243, 292, 761, 925], "structarrai": [137, 243, 761, 925], "constant": [137, 151, 243, 359, 550, 581, 644, 761, 767, 925], "unchang": [137, 243, 255, 489, 550, 590, 628, 644, 761, 909, 925], "capac": [137, 195, 243, 761, 851, 925], "ffi": [137, 243, 761, 925], "kb": [137, 243, 761, 925], "mb": [137, 243, 761, 925], "gb": [137, 243, 761, 925], "tb": [137, 243, 761, 925], "revers": [137, 243, 288, 309, 310, 311, 312, 313, 393, 414, 482, 550, 644, 710, 711, 712, 713, 925], "1_000_000": [137, 243, 761, 925], "25888898": [137, 243], "689577102661133": [137, 243], "long": [138, 171, 214, 243, 572, 594, 644], "letter": [138, 228, 237, 243, 356, 517, 550, 572, 631, 640, 644], "thu": [139, 243, 507, 537, 652, 925], "faster": [139, 214, 243, 255, 423, 464, 492, 550, 608, 609, 644, 652, 653, 830, 876, 925], "onlin": [139, 243, 652, 925], "rerun": [139, 243, 652, 925], "latter": [139, 243, 652, 925], "fill_valu": [140, 194, 214, 243, 360, 438, 550, 574, 606, 644, 768, 849, 925], "Not": [140, 243, 377, 379, 394, 550, 574, 644], "To": [140, 243, 317, 318, 361, 527, 530, 540, 550, 574, 644], "fillnullstrategi": [141, 243, 361, 550, 575, 644, 769, 925], "matches_supertyp": [141, 243, 575, 644], "forward": [141, 165, 243, 361, 366, 550, 575, 586, 644, 769, 925], "consecut": [141, 243, 294, 361, 366, 450, 550, 575, 644, 769, 862, 925], "supertyp": [141, 243, 254, 550, 575, 644], "fill_nan": [141, 243, 550, 644, 925], "OR": [142, 243, 498, 576, 644], "reduct": [144, 243], "supercast": [144, 243], "similar": [144, 165, 243, 410, 550, 586, 644], "parent": [144, 243], "rule": [144, 243, 345, 752], "arithmet": [144, 243], "zip_with": [144, 243, 925], "foo11": [144, 243], "bar22": [144, 243], "null_equ": [145, 243, 843, 925], "retriev": [146, 243, 268, 269, 480, 667, 668, 892], "return_as_str": [148, 243], "preview": [148, 243], "nice": [148, 243], "few": [148, 243], "rather": [148, 165, 243, 479, 586, 644, 891], "head": [148, 167, 200, 243, 254, 387, 550, 589, 644, 801, 897, 925], "tail": [148, 153, 243, 254, 444, 550, 644, 776, 856, 925], "intoexpr": [149, 150, 151, 191, 197, 210, 220, 223, 243, 410, 447, 501, 503, 506, 510, 519, 536, 539, 550, 579, 580, 581, 604, 611, 616, 626, 644], "more_bi": [149, 177, 197, 243, 447, 550, 579, 611, 644], "maintain_ord": [149, 177, 179, 212, 216, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 243, 250, 255, 293, 485, 491, 508, 550, 566, 571, 573, 579, 598, 607, 608, 609, 617, 627, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 644, 692, 715, 822, 911, 925], "consist": [149, 177, 243, 476, 579, 644, 888], "agg": [149, 150, 151, 243, 250, 255, 362, 364, 446, 447, 485, 496, 508, 550, 566, 571, 573, 579, 580, 581, 598, 607, 644], "anoth": [149, 243, 291, 314, 319, 550, 579, 623, 644, 690, 714, 722, 843, 925], "index_column": [150, 151, 243, 580, 581, 644], "truncat": [150, 243, 580, 598, 644], "include_boundari": [150, 243, 580, 644], "start_bi": [150, 243, 580, 644], "startbi": [150, 243, 580, 644], "dynamicgroupbi": [150, 243], "normal": [150, 243, 352, 384, 444, 550, 580, 644, 760, 799, 856, 925], "groupbi": [150, 151, 175, 243, 250, 255, 274, 314, 362, 364, 410, 446, 447, 485, 496, 499, 508, 550, 566, 571, 573, 580, 581, 598, 607, 644, 673, 714, 925], "member": [150, 243, 580, 644, 787, 925], "seen": [150, 243, 294, 366, 550, 580, 644], "roll": [150, 151, 243, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 505, 550, 580, 581, 644, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 925], "slot": [150, 243, 273, 314, 315, 550, 580, 644, 672, 714, 717, 925], "1n": [150, 151, 165, 216, 243, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 745, 749, 754], "nanosecond": [150, 151, 165, 216, 243, 338, 342, 343, 347, 424, 425, 426, 427, 428, 430, 431, 432, 515, 550, 580, 581, 586, 644, 745, 749, 750, 754], "1u": [150, 151, 165, 216, 243, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 745, 749, 754], "microsecond": [150, 151, 165, 216, 243, 338, 342, 343, 347, 424, 425, 426, 427, 428, 430, 431, 432, 514, 515, 550, 580, 581, 586, 598, 644, 745, 749, 754], "1m": [150, 151, 165, 216, 243, 329, 330, 332, 337, 338, 342, 344, 347, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 736, 738, 744, 745, 749, 751, 754], "millisecond": [150, 151, 165, 216, 243, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 515, 550, 580, 581, 586, 644, 745, 749, 754], "1h": [150, 151, 165, 216, 243, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 728, 745, 749, 754], "1w": [150, 151, 165, 216, 243, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 745, 749, 754], "week": [150, 151, 165, 216, 243, 338, 342, 347, 349, 424, 425, 426, 427, 428, 430, 431, 432, 515, 550, 580, 581, 586, 644, 745, 749, 754, 756], "month": [150, 151, 165, 216, 243, 322, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 513, 514, 550, 580, 581, 586, 644, 725, 745, 749, 754], "1y": [150, 151, 165, 216, 243, 327, 338, 342, 347, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 730, 745, 749, 754, 758], "1i": [150, 151, 165, 216, 243, 338, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 581, 586, 644, 745], "10i": [150, 151, 243, 580, 581, 644], "ascend": [150, 151, 243, 580, 581, 644], "often": [150, 151, 243, 272, 420, 550, 580, 581, 644, 671], "dynam": [150, 243, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 644], "matter": [150, 151, 162, 188, 204, 243, 580, 581, 644], "_lower_bound": [150, 243, 580, 644], "_upper_bound": [150, 243, 580, 644], "impact": [150, 243, 580, 644], "harder": [150, 243, 580, 644], "side": [150, 151, 243, 371, 424, 425, 426, 427, 428, 430, 431, 432, 435, 550, 580, 581, 644, 780, 842, 925], "inclus": [150, 151, 243, 371, 424, 425, 426, 427, 428, 430, 431, 432, 471, 472, 550, 580, 581, 644, 780, 883, 884, 925], "datapoint": [150, 243, 580, 644], "mondai": [150, 243, 349, 580, 644, 756], "date_rang": [150, 216, 243, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 580, 644, 722, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758], "30m": [150, 243, 342, 347, 580, 644, 749, 754], "time_min": [150, 243, 580, 644], "time_max": [150, 243, 580, 644], "23": [150, 151, 243, 320, 325, 342, 514, 580, 581, 644, 723, 728], "boundari": [150, 243, 303, 304, 305, 550, 580, 644, 704, 705, 706, 777, 925], "time_count": [150, 243, 580, 644], "_lower_boundari": [150, 243, 580, 644], "_upper_boundari": [150, 243, 580, 644], "lower_bound": [150, 243, 550, 580, 644, 913, 925], "upper_bound": [150, 243, 292, 550, 580, 644, 804, 925], "time_agg_list": [150, 243, 580, 644], "arang": [150, 214, 225, 243, 580, 628, 644], "2i": [150, 243, 580, 644], "3i": [150, 243, 580, 644], "a_agg_list": [150, 243, 580, 644], "rollinggroupbi": [151, 243], "dynamic_groupbi": [151, 243, 581, 644], "groupby_dynam": [151, 243, 581, 644], "45": [151, 243, 320, 342, 347, 452, 458, 581, 644, 723, 749, 754, 864, 870], "48": [151, 243, 581, 644], "18": [151, 243, 313, 342, 347, 350, 370, 383, 550, 581, 598, 644, 757], "19": [151, 165, 243, 342, 581, 586, 644, 749, 754], "43": [151, 243, 313, 550, 581, 644], "strptime": [151, 243, 345, 581, 644, 752], "2d": [151, 206, 243, 581, 644, 725], "sum_a": [151, 243, 581, 644], "min_a": [151, 243, 581, 644], "max_a": [151, 243, 581, 644], "to_list": [151, 243, 292, 581, 644, 691, 925], "seed": [152, 189, 243, 367, 434, 440, 550, 775, 841, 852, 925], "seed_1": [152, 243, 367, 550, 775, 925], "seed_2": [152, 243, 367, 550, 775, 925], "seed_3": [152, 243, 367, 550, 775, 925], "hash": [152, 243, 550, 925], "u64": [152, 243, 367, 419, 550, 598, 644, 775, 925], "10783150408545073287": [152, 243], "1438741209321515184": [152, 243], "10047419486152048166": [152, 243], "2047317070637311557": [152, 243], "last": [153, 165, 167, 179, 197, 200, 210, 212, 237, 243, 264, 267, 277, 290, 314, 322, 339, 348, 446, 473, 484, 541, 550, 586, 611, 614, 616, 617, 640, 644, 662, 665, 676, 689, 714, 725, 746, 755, 776, 801, 885, 897, 925], "ab": [153, 167, 200, 220, 243, 480, 481, 527, 530, 550, 622, 644, 776, 801, 897, 925], "grown": [155, 243], "baz": [156, 157, 179, 213, 243, 471, 473, 584, 618, 644, 885], "intermedi": [157, 243, 584, 644, 779, 925], "linear": [157, 181, 235, 243, 270, 370, 397, 416, 428, 505, 506, 533, 550, 584, 599, 638, 644, 669, 779, 823, 835, 925], "mask": [158, 160, 243, 271, 295, 296, 372, 374, 382, 451, 453, 550, 670, 693, 694, 770, 780, 782, 785, 796, 819, 820, 844, 863, 865, 917, 925], "visual": [158, 160, 243], "buffer_s": [162, 243], "intern": [162, 243], "veri": [162, 211, 243, 255, 550, 565, 644, 707, 925], "fit": [162, 195, 214, 243, 439, 550, 850, 851, 925], "signific": [162, 243, 255, 550], "4x": [162, 243], "disabl": [162, 243], "materialis": [162, 163, 187, 188, 243], "iter_row": [163, 187, 188, 243], "17_500": [163, 243], "klmnoopqrstuvwxyz": [163, 243], "__name__": [163, 243], "7500": [163, 243], "recordbatch": [163, 243], "15_000": [163, 243], "record_batch": [163, 243], "to_arrow": [163, 243, 925], "to_batch": [163, 243], "date32": [163, 243], "large_str": [163, 202, 207, 243], "15000": [163, 243], "2500": [163, 243], "left_on": [164, 165, 243, 585, 586, 644], "right_on": [164, 165, 243, 585, 586, 644], "joinstrategi": [164, 243, 585, 644], "suffix": [164, 165, 191, 220, 223, 243, 298, 377, 379, 380, 381, 410, 422, 455, 550, 585, 586, 604, 622, 623, 626, 644, 696, 867], "_right": [164, 165, 243, 585, 586, 644], "outer": [164, 243, 585, 644], "semi": [164, 243, 585, 644], "anti": [164, 243, 585, 644, 844, 845, 925], "cross": [164, 243, 585, 644], "join_asof": [164, 243, 585, 644], "stringcach": [164, 243, 560], "other_df": [164, 243], "by_left": [165, 243, 586, 644], "by_right": [165, 243, 586, 644], "asofjoinstrategi": [165, 243, 586, 644], "allow_parallel": [165, 243, 585, 586, 644], "force_parallel": [165, 243, 585, 586, 644], "asof": [165, 243, 586, 644], "asof_join": [165, 243], "search": [165, 243, 586, 644], "greater": [165, 243, 444, 473, 550, 586, 644, 856, 885, 925], "distanc": [165, 243, 586, 644, 777, 925], "plan": [165, 166, 243, 563, 571, 578, 585, 586, 600, 607, 625, 644], "gdp": [165, 243, 586, 644], "2016": [165, 243, 586, 644], "2017": [165, 243, 586, 644], "2018": [165, 243, 586, 644], "2019": [165, 243, 586, 644], "record": [165, 243, 586, 644], "jan": [165, 243, 586, 644], "1st": [165, 243, 586, 644], "4164": [165, 243, 586, 644], "4411": [165, 243, 586, 644], "4566": [165, 243, 586, 644], "4696": [165, 243, 586, 644], "popul": [165, 243, 586, 644], "12th": [165, 243, 586, 644], "82": [165, 243, 586, 644], "66": [165, 243, 586, 644, 835, 925], "83": [165, 243, 586, 644], "52": [165, 220, 243, 433, 550, 586, 622, 644], "request": [166, 243], "small": [166, 243, 342, 573, 644], "describe_plan": [166, 243, 644], "unoptim": [166, 243, 644], "describe_optimized_plan": [166, 243, 644], "show_graph": [166, 243, 644], "un": [166, 243], "graphviz": [166, 243, 607, 644], "advis": [166, 243], "axi": [168, 169, 171, 173, 199, 243, 594, 644], "null_strategi": [169, 199, 243], "nullstrategi": [169, 199, 243], "spam": [169, 243], "id_var": [171, 243, 594, 644], "value_var": [171, 243, 594, 644], "variable_nam": [171, 243, 594, 644], "value_nam": [171, 243, 594, 644], "unpivot": [171, 243, 594, 644], "leav": [171, 243, 594, 644], "identifi": [171, 177, 212, 243, 594, 617, 644], "massag": [171, 243, 594, 644], "measur": [171, 243, 594, 644], "merg": [172, 243, 595, 644], "caller": [172, 243, 292, 590, 595, 628, 644], "respons": [172, 243, 595, 644], "One": [175, 179, 243, 925], "what": [175, 243, 907, 916, 925], "struct": [175, 191, 209, 213, 220, 243, 292, 394, 459, 472, 473, 494, 510, 511, 512, 526, 550, 604, 618, 622, 644, 691, 871, 884, 885], "pack": [175, 243], "expr_unique_subset": [175, 243], "df_nuniqu": [175, 243], "df_agg_nuniqu": [175, 243], "simpl": [175, 243], "func": [178, 243, 597, 644], "offer": [178, 243, 412, 550, 597, 644], "recommend": [178, 243], "fulli": [178, 189, 243], "advantag": [178, 243], "cast_str_to_int": [178, 243, 597, 644], "col_nam": [178, 243, 597, 644], "tdf": [178, 243, 597, 644], "aggregate_funct": [179, 243], "pivotagg": [179, 243], "sort_column": [179, 243], "predefin": [179, 243], "predict": [179, 182, 216, 243], "transpos": [179, 243], "discoveri": [179, 243], "interpol": [181, 235, 243, 361, 397, 416, 428, 533, 550, 599, 638, 644, 823, 835, 925], "rollinginterpolationmethod": [181, 235, 243, 416, 428, 533, 550, 599, 638, 644, 823, 835, 925], "midpoint": [181, 235, 243, 416, 428, 533, 550, 599, 638, 644, 823, 835, 925], "old": [183, 243, 601, 644], "new_col": [184, 243], "by_pred": [187, 243], "accord": [187, 243, 394, 550, 731], "never": [187, 243], "mutual": [187, 243], "exclus": [187, 243], "addition": [187, 243], "clariti": [187, 243], "anyth": [187, 243], "toomanyrowsreturn": [187, 243, 560], "norowsreturn": [187, 243, 560], "inherit": [187, 243], "rowsexcept": [187, 243, 560], "frac": [189, 243, 353, 354, 355, 434, 444, 490, 550, 762, 763, 764, 841, 856, 910, 925], "with_replac": [189, 243, 434, 550, 841, 925], "shuffl": [189, 225, 243, 434, 550, 628, 841, 925], "neither": [189, 243], "nor": [189, 243], "modul": [189, 243, 434, 440, 549, 550, 841, 852, 925], "more_expr": [191, 220, 243, 410, 503, 536, 550, 604, 622, 644], "named_expr": [191, 220, 243, 536, 539, 604, 622, 644], "threshold": [191, 243, 604, 644], "set_auto_structifi": [191, 220, 243, 604, 622, 644], "is_odd": [191, 243, 604, 644], "_is_odd": [191, 243, 604, 644], "shift_and_fil": [193, 243, 550, 644, 925], "shift": [194, 243, 273, 315, 411, 438, 505, 550, 606, 644, 672, 717, 818, 849, 925], "shrink": [195, 243, 439, 550, 850, 851, 925], "hold": [195, 243], "nulls_last": [197, 210, 243, 264, 267, 446, 550, 611, 616, 644, 662, 665, 925], "ddof": [198, 217, 243, 449, 495, 507, 532, 537, 538, 542, 550, 612, 620, 644, 860, 915, 925], "standard": [198, 243, 328, 354, 430, 444, 449, 460, 538, 550, 612, 644, 731, 763, 856, 860, 872, 925], "deviat": [198, 243, 354, 430, 449, 538, 550, 612, 644, 763, 860, 925], "degre": [198, 217, 243, 449, 495, 507, 532, 537, 550, 860, 915, 925], "freedom": [198, 217, 243, 449, 495, 507, 532, 537, 550, 860, 915, 925], "816497": [198, 243], "21": [199, 243, 521], "16a": [199, 243], "27b": [199, 243], "38c": [199, 243], "nth": [201, 243, 473, 486, 550, 615, 644, 885, 899, 925], "mostli": [202, 243, 362, 550], "categoricaltyp": [202, 243], "as_seri": [203, 243], "fruit": [203, 243, 414, 422, 455, 474, 482, 550, 867, 886], "car": [203, 243, 414, 422, 482, 550], "beetl": [203, 243, 414, 422, 482, 550], "audi": [203, 243, 414, 422, 482, 550], "28": [203, 243, 350, 757], "300": [203, 243, 831, 832, 834, 925], "re": [206, 243], "ll": [206, 243], "numpy_arrai": [206, 243], "use_pyarrow_extension_arrai": [207, 243, 908, 925], "trigger": [207, 243, 908, 925], "sent": [207, 243, 907, 908, 925], "pandas_df1": [207, 243], "pandas_df2": [207, 243], "pandas_df2_pa": [207, 243], "na": [207, 243, 908, 925], "four": [209, 243], "five": [209, 243], "k": [210, 243, 301, 384, 490, 550, 616, 644, 700, 799, 910, 925], "largest": [210, 243, 490, 550, 616, 644, 910, 925], "smallest": [210, 243, 490, 550, 616, 644, 910, 925], "top": [210, 243, 616, 644], "include_head": [211, 243], "header_nam": [211, 243], "column_nam": [211, 243], "perhap": [211, 243], "column_2": [211, 243], "name_gener": [211, 243, 292, 691], "base_nam": [211, 243], "my_column_": [211, 243], "my_column_0": [211, 243], "my_column_1": [211, 243], "my_column_2": [211, 243], "uniquekeepstrategi": [212, 243, 617, 644], "decompos": [213, 243, 618, 644], "t_a": [213, 243, 618, 644], "t_b": [213, 243, 618, 644], "t_c": [213, 243, 618, 644], "t_d": [213, 243, 618, 644], "womp": [213, 243, 618, 644], "t_": [213, 243, 618, 644], "t_struct": [213, 243, 618, 644], "step": [214, 243, 500], "unstackdirect": [214, 243], "much": [214, 243, 291, 314, 550, 690, 714, 925], "pivot": [214, 243], "phase": [214, 243], "subject": [214, 243], "ascii_uppercas": [214, 243], "col1": [214, 243, 644], "col2": [214, 243, 644], "h": [214, 243, 345, 439, 476, 550, 888], "col1_0": [214, 243], "col1_1": [214, 243], "col1_2": [214, 243], "col2_0": [214, 243], "col2_1": [214, 243], "col2_2": [214, 243], "syntact": [215, 243, 512, 517, 518, 522, 533, 536, 540, 619, 644, 859, 925], "sugar": [215, 243, 512, 517, 518, 522, 533, 536, 540, 619, 644, 859, 925], "coalesc": [215, 243, 619, 644], "400": [215, 243, 619, 644, 831, 832, 834, 925], "600": [215, 243, 619, 644], "700": [215, 243, 619, 644], "new_df": [215, 243, 619, 644], "time_column": [216, 243], "frequenc": [216, 243], "forward_fil": [216, 243, 310, 313, 550], "06": [216, 243, 320, 328, 340, 341, 351, 749, 756], "varianc": [217, 243, 355, 384, 432, 495, 542, 550, 620, 644, 764, 799, 839, 915, 925], "grow": [218, 243], "is_not": [220, 243, 550, 622, 644], "not_c": [220, 243, 622, 644], "diff": [220, 243, 323, 326, 330, 332, 334, 337, 344, 550, 622, 644, 726, 729, 736, 738, 741, 744, 751, 925], "_diff": [220, 243, 622, 644], "row_nr": [221, 243, 394, 550, 624, 644, 845, 925], "more_agg": [223, 626], "named_agg": [223, 626], "_sum": [223, 626], "_mean_squar": [223, 626], "b_sum": [223, 626], "c_mean_squar": [223, 626], "17": [223, 433, 521, 550, 626, 708, 749, 925], "sub": [225, 298, 299, 455, 474, 550, 696, 697, 867, 886], "triangl": [225, 628], "group_df": [225, 628], "nr": [228, 237, 631, 640], "maxim": [230, 262, 550, 633, 660, 925], "833333": [231, 634], "minim": [233, 263, 269, 439, 447, 550, 636, 661, 668, 809, 850, 925], "overview": [243, 550, 560, 644, 925], "public": [243, 550, 560, 644, 925], "frameinittyp": [243, 644], "variou": [243, 550, 644, 925], "entri": [243, 644], "prevent": [243, 312, 313, 383, 483, 550, 644, 712, 713, 896, 925], "come": [243, 384, 550, 561, 643, 644, 799, 925], "behavior": [243, 255, 291, 499, 527, 530, 550, 690], "mydatafram": 243, "notic": [243, 644, 925], "df4": 243, "df5": 243, "df6": 243, "corr": [243, 532, 537], "drop_in_plac": 243, "drop_nul": [243, 317, 550, 644, 925], "estimated_s": [243, 925], "explod": [243, 364, 421, 550, 644, 828, 925], "find_idx_by_nam": 243, "fold": [243, 401, 503, 510, 511, 534, 540], "frame_equ": [243, 342, 347], "get_column": [243, 540], "groupby_rol": [243, 424, 425, 426, 427, 428, 430, 431, 432, 550, 580, 644], "hash_row": 243, "hstack": 243, "insert_at_idx": 243, "is_dupl": [243, 550, 925], "is_empti": [243, 925], "is_uniqu": [243, 550, 925], "iter_slic": 243, "melt": [243, 644], "merge_sort": [243, 644], "n_uniqu": [243, 550, 925], "pipe": [243, 550, 644], "quantil": [243, 428, 550, 644, 822, 835, 925], "replace_at_idx": 243, "shrink_to_fit": [243, 925], "take_everi": [243, 550, 644, 925], "to_dict": 243, "to_numpi": [243, 392, 550, 925], "to_panda": [243, 925], "to_struct": 243, "top_k": [243, 550, 644, 925], "unnest": [243, 472, 473, 481, 644, 884, 885], "unstack": 243, "updat": [243, 644], "upsampl": 243, "write_avro": 243, "write_databas": 243, "write_excel": 243, "write_json": [243, 600, 644], "write_parquet": 243, "94": [250, 550], "confus": [252, 377, 379, 550], "tt": [252, 550], "tf": [252, 253, 550], "ff": [252, 253, 550], "upcast": [254, 550], "skip_nul": [255, 550, 653, 925], "pass_nam": [255, 550], "applystrategi": [255, 550], "thread_loc": [255, 550], "assum": [255, 550, 590, 628, 644], "considd": [255, 550], "code": [255, 436, 550, 588, 644, 846, 925], "amount": [255, 550], "releas": [255, 550], "gil": [255, 550], "discourag": [255, 550], "loop": [255, 550], "a_times_2": [255, 550], "invers": [256, 257, 258, 259, 260, 261, 550, 654, 655, 656, 657, 658, 659, 925], "cosin": [256, 257, 306, 307, 392, 550, 654, 655, 708, 709, 925], "570796": [256, 258, 550, 654, 656, 925], "hyperbol": [257, 259, 261, 307, 443, 488, 550, 655, 657, 659, 709, 855, 901, 925], "sine": [258, 259, 392, 442, 443, 550, 656, 657, 854, 855, 925], "881374": [259, 550, 657, 925], "tangent": [260, 261, 487, 488, 550, 658, 659, 900, 901, 925], "785398": [260, 550, 658, 925], "arg_wher": [265, 550], "arg_sort": [267, 550, 665, 925], "favour": [267, 358, 550, 665, 766, 925], "sublist": [268, 269, 271, 273, 276, 277, 278, 279, 280, 287, 290, 291, 667, 668, 670, 672, 675, 676, 677, 678, 679, 686, 689, 690, 691, 787, 925], "membership": [271, 670], "listcol": 272, "number_of_two": 272, "null_behavior": [273, 315, 550, 672, 717, 925], "nullbehavior": [273, 315, 550, 672, 717, 925], "th": [273, 315, 444, 550, 672, 717, 856, 925], "against": [274, 644, 673, 932], "blindli": [274, 673], "worth": [274, 673], "enough": [274, 444, 550, 673, 856, 925], "concat_list": [274, 516, 673], "rank": [274, 507, 516, 537, 550, 673, 925], "exprnamespac": 275, "reshap": [275, 550, 674, 925], "flat": [275, 421, 550, 674, 828, 925], "taken": [287, 470, 485, 550, 686, 882], "null_on_oob": [291, 690], "cheaper": [291, 690], "n_field_strategi": [292, 691], "tostructstrategi": [292, 691], "first_non_nul": [292, 691], "max_width": [292, 691], "field_0": [292, 691], "field_1": [292, 691], "field_n": [292, 691], "know": [292, 464, 876, 907, 916, 925], "incorrectli": 292, "downstream": [292, 436, 550, 846, 925], "advic": 292, "col_name_": [292, 691], "col_name_0": [292, 691], "col_name_1": [292, 691], "col_name_2": [292, 691], "maintain": [293, 435, 491, 550, 608, 609, 644, 692, 842, 911, 925], "substr": [295, 298, 299, 451, 455, 466, 467, 471, 472, 473, 474, 693, 696, 697, 863, 867, 878, 879, 883, 884, 885, 886], "transferencod": [296, 297, 453, 454, 694, 695, 865, 866], "strict": [296, 300, 451, 453, 465, 476, 550, 694, 698, 843, 863, 865, 877, 888, 925], "hex": [296, 297, 453, 454, 465, 694, 695, 865, 866, 877], "base64": [296, 297, 453, 454, 694, 695, 865, 866], "prefix": [299, 474, 479, 550, 697, 886, 891], "due": [300, 550, 698, 925], "overflow": [300, 312, 313, 465, 483, 550, 698, 712, 713, 877, 896, 925], "categoricalord": [301, 700], "lexic": [301, 700], "min_val": [303, 305, 550, 704, 706, 925], "max_val": [303, 304, 550, 704, 705, 925], "foo_clip": [303, 304, 305, 550], "clip": [304, 305, 550, 705, 706, 925], "543081": [307, 550, 709, 925], "cumul": [309, 310, 311, 312, 313, 510, 511, 512, 550, 710, 711, 712, 713, 925], "a_revers": [309, 310, 311, 312, 313, 393, 422, 482, 550], "value_cummax": [310, 550], "value_cummax_all_fil": [310, 550], "value_cumsum": [313, 550], "value_cumsum_all_fil": [313, 550], "min_period": [314, 353, 354, 355, 423, 424, 425, 426, 427, 428, 430, 431, 432, 550, 714, 762, 763, 764, 830, 831, 832, 833, 834, 835, 837, 838, 839, 925], "slide": [314, 550, 714, 925], "realli": [314, 550, 714, 925], "complex": [314, 490, 550, 714, 910, 925], "visit": [314, 550, 714, 925], "44": [316, 550], "drop_nan": [318, 550, 925], "tu": [319, 320, 324, 346, 350, 722, 723, 727, 748, 753, 757], "lose": [319, 722], "2001": [319, 322, 324, 325, 327, 328, 333, 335, 338, 339, 340, 342, 343, 346, 347, 348, 349, 350, 351, 476, 722, 725, 727, 728, 730, 732, 733, 734, 735, 737, 739, 740, 742, 743, 745, 746, 747, 749, 750, 752, 753, 754, 755, 756, 757, 758, 888], "tu_m": [319, 722], "tu_n": [319, 722], "tm": [320, 723], "compon": [320, 343, 476, 515, 723, 750], "resolv": 320, "456000": [320, 723], "101000": 320, "456": [320, 723, 905, 925], "101": [320, 465, 877], "d1": 320, "d2": 320, "d3": 320, "utc": [321, 341, 476, 724, 748, 888], "tz": [321, 341, 724, 748], "europ": [321, 341, 724, 748], "london": [321, 341, 724, 748], "gmt": [321, 341, 724, 748], "bst": [321, 341, 724, 748], "extract": [322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 343, 344, 348, 349, 351, 412, 458, 459, 460, 550, 725, 726, 728, 729, 731, 735, 736, 737, 738, 740, 741, 742, 743, 744, 746, 747, 750, 751, 755, 756, 758, 870, 871, 872], "weekdai": [322, 339], "day_of_month": [322, 339, 349], "ordinal_dai": [322, 349], "day_of_year": [322, 339, 349], "days_diff": 323, "epochtimeunit": [324, 521, 727], "unix": [324, 521, 727], "epoch_n": [324, 727], "epoch_": [324, 727], "978307200000000": [324, 346, 727, 753], "978307200": [324, 727], "978393600000000": [324, 346, 727, 753], "978393600": [324, 727], "978480000000000": [324, 346, 727, 753], "978480000": [324, 727], "hours_diff": 326, "leap": [327, 338, 730, 745], "2000": [327, 329, 338, 730, 745], "2002": [327, 328, 338, 340, 351, 730, 745, 758], "iso": [328, 348, 349, 731, 755, 756], "correspond": [328, 417, 550, 731, 824, 925], "2006": [328, 338, 745], "180": [328, 340, 351], "2004": [328, 338, 745], "2005": [328, 338, 745], "1001": [329, 330, 332, 337], "002": [329, 330, 332, 337, 515, 736, 738, 744], "003": [329, 330, 332, 337], "3000": 329, "997": [329, 330, 332, 337], "997000": 329, "998": [329, 330, 332, 337], "998000": 329, "999": [329, 330, 332, 337], "999000": 329, "microseconds_diff": 330, "milliseconds_diff": 332, "minutes_diff": 334, "1440": [334, 741], "nanoseconds_diff": 337, "1000000": [337, 479, 744], "minu": [338, 745], "dictat": [338, 745], "date_plus_1i": [338, 745], "1y2mo": [338, 745], "date_min": 338, "1998": [338, 745], "1999": [338, 745], "2003": [338, 521, 745], "ordin": [339, 417, 550, 746, 824, 925], "366": [339, 746], "convert_time_zon": [341, 748], "timestamp": [341, 521, 748], "unset": [341, 748], "london_timezon": 341, "amsterdam": 341, "london_to_amsterdam": 341, "cet": 341, "cest": 341, "half": [342, 353, 354, 355, 550, 749, 762, 763, 764, 925], "225": [342, 347], "to_fram": [342, 347, 476, 844, 845, 884, 885, 888, 925], "10m": [342, 347, 749, 754], "milli": [343, 750], "micro": [343, 750], "456789": 343, "654321": 343, "111110": 343, "765431": 343, "sec": 343, "11111": 343, "seconds_diff": 344, "timestamp_n": [346, 753], "timestamp_m": 346, "978307200000": 346, "978393600000": 346, "978480000000": 346, "53": [348, 755], "sundai": [349, 756], "incorrect": [350, 436, 550, 628, 757, 846, 925], "tu_u": [350, 757], "32971": [350, 757], "32974": [350, 757], "32976": [350, 757], "718281828459045": [352, 389, 550, 760, 802, 925], "pk": [352, 550, 760, 925], "459148": [352, 550], "754888": [352, 550], "span": [353, 354, 355, 550, 762, 763, 764, 925], "half_lif": [353, 354, 355, 550, 762, 763, 764, 925], "adjust": [353, 354, 355, 444, 550, 762, 763, 764, 856, 925], "ignore_nul": [353, 354, 355, 550, 762, 763, 764, 916, 925], "exponenti": [353, 354, 355, 357, 550, 762, 763, 764, 765, 925], "weight": [353, 354, 355, 423, 424, 425, 426, 427, 428, 430, 431, 432, 444, 550, 762, 763, 764, 830, 831, 832, 833, 834, 835, 837, 838, 839, 856, 925], "decai": [353, 354, 355, 550, 762, 763, 764, 925], "term": [353, 354, 355, 461, 464, 550, 762, 763, 764, 873, 876, 925], "mass": [353, 354, 355, 550, 762, 763, 764, 925], "gamma": [353, 354, 355, 550, 762, 763, 764, 925], "foral": [353, 354, 355, 550, 762, 763, 764, 925], "geq": [353, 354, 355, 550, 762, 763, 764, 925], "theta": [353, 354, 355, 550, 762, 763, 764, 925], "life": [353, 354, 355, 550, 762, 763, 764, 925], "exp": [353, 354, 355, 550, 762, 763, 764, 925], "ln": [353, 354, 355, 550, 762, 763, 764, 925], "smooth": [353, 354, 355, 550, 762, 763, 764, 925], "factor": [353, 354, 355, 489, 550, 762, 763, 764, 909, 925], "leq": [353, 354, 355, 550, 762, 763, 764, 925], "begin": [353, 354, 355, 457, 550, 762, 763, 764, 869, 925], "imbal": [353, 354, 355, 550, 762, 763, 764, 925], "ew": [353, 354, 355, 550, 762, 763, 764, 925], "w_i": [353, 354, 355, 550, 762, 763, 764, 925], "recurs": [353, 354, 355, 550, 762, 763, 764, 925], "y_0": [353, 354, 355, 550, 762, 763, 764, 925], "x_0": [353, 354, 355, 550, 762, 763, 764, 925], "y_t": [353, 354, 355, 550, 762, 763, 764, 925], "y_": [353, 354, 355, 550, 762, 763, 764, 925], "x_t": [353, 354, 355, 550, 762, 763, 764, 925], "observ": [353, 354, 355, 550, 762, 763, 764, 925], "x_2": [353, 354, 355, 550, 762, 763, 764, 925], "428571": [353, 550], "bia": [354, 355, 384, 429, 444, 550, 763, 764, 799, 836, 856, 925], "unbias": [354, 355, 550, 763, 764, 925], "963624": [354, 550, 763, 925], "928571": [355, 550, 764, 925], "wildcard": [356, 497, 504, 510, 511, 519, 534, 550], "regex": [356, 399, 451, 452, 455, 457, 458, 466, 467, 474, 517, 527, 530, 540, 550, 863, 864, 867, 869, 870, 878, 879, 886], "aa": [356, 517, 550], "ba": [356, 517, 550], "cc": [356, 517, 550], "718282": [357, 550], "389056": [357, 550], "54": [357, 550], "59815": [357, 550], "expand": [358, 398, 399, 420, 550, 766, 925], "arr": [358, 516, 550, 551, 766, 907, 925, 926], "exprlistnamespac": [358, 364, 421, 550], "exprstringnamespac": [358, 550], "pythonliter": [359, 550, 622, 644, 767, 925], "extrem": [359, 550, 767, 925], "group_col": [362, 496, 550], "g1": [362, 496, 550], "g2": [362, 496, 550], "lt": [362, 496, 550, 925], "gte": [362, 496, 550], "9774092659964970114": [367, 550], "13614470193936745724": [367, 550], "1101441246220388612": [367, 550], "11638928888656214026": [367, 550], "13382926553367784577": [367, 550], "cumsum": [369, 550, 583, 644, 925], "interpolationmethod": [370, 550, 779, 925], "regrid": [370, 550], "grid": [370, 550], "df_original_grid": [370, 550], "grid_point": [370, 550], "df_new_grid": [370, 550], "conflat": [371, 550], "finit": [373, 507, 537, 550, 784, 925], "primit": [375, 550, 907, 925], "optional_memb": [375, 550, 787, 925], "infinit": [376, 550, 788, 925], "_isnan": [377, 550], "b_isnan": [377, 550], "negat": [378, 550], "_is_not_nan": [379, 550], "b_is_not_nan": [379, 550], "_not_nul": [380, 550], "a_not_nul": [380, 550], "b_not_nul": [380, 550], "_isnul": [381, 550], "a_isnul": [381, 550], "b_isnul": [381, 550], "undo": [383, 403, 550], "duplicateerror": [383, 550, 560], "occurr": [383, 550, 777, 925], "333333": [383, 432, 550, 818, 839, 925], "fisher": [384, 444, 550, 799, 856, 925], "fourth": [384, 550, 799, 925], "subtract": [384, 550, 799, 925], "distribut": [384, 444, 550, 799, 856, 925], "elimin": [384, 550, 799, 925], "bias": [384, 444, 550, 799, 856, 925], "scipi": [384, 444, 550, 799, 856, 925], "stat": [384, 444, 550, 799, 856, 925], "153061": [384, 550], "logarithm": [389, 390, 550, 802, 803, 925], "584963": [389, 550], "30103": [390, 550], "60206": [390, 550], "lowest": [391, 550], "9223372036854775808": [391, 550], "agg_list": [392, 550], "elementwis": [392, 423, 424, 425, 426, 427, 428, 430, 431, 432, 497, 498, 550, 830, 831, 832, 833, 834, 835, 837, 838, 839, 925], "third": [392, 550], "parti": [392, 550], "book": [392, 550], "argmax": [392, 550], "_revers": [393, 422, 482, 550], "b_revers": [393, 422, 482, 550], "remap": [394, 550, 805, 925], "lookup": [394, 550, 805, 925], "country_code_dict": [394, 550], "ca": [394, 550], "canada": [394, 550], "de": [394, 550], "germani": [394, 550], "fr": [394, 550], "franc": [394, 550], "country_cod": [394, 550], "unknown": [394, 525, 550], "rest": [394, 550], "computeerror": [400, 465, 560, 877], "keep_nam": [403, 550], "poison": [407, 408, 550, 814, 815, 925], "nanmax": [407, 408, 550, 814, 815, 925], "wherea": [407, 408, 550, 582, 589, 644, 814, 815, 925], "outcom": [410, 550], "_max": [410, 550], "c_max": [410, 550], "_min": [410, 550], "c_min": [410, 550], "recent": [411, 550, 818, 925], "percent": [411, 550, 818, 925], "090909": [411, 550], "extract_numb": [412, 550], "r": [412, 452, 456, 457, 458, 466, 550, 864, 868, 869, 870, 878], "expon": [413, 550], "power": [413, 550], "reverse_": [414, 550], "reverse_a": [414, 550], "reverse_fruit": [414, 550], "reverse_b": [414, 550], "reverse_car": [414, 550], "rankmethod": [417, 550, 824, 925], "ti": [417, 550, 824, 925], "appropri": [417, 550, 824, 925], "competit": [417, 550, 824, 925], "highest": [417, 493, 507, 537, 550, 644, 824, 925], "safe": [419, 550, 826, 907, 925], "coerc": [420, 550], "dim": [421, 550, 828, 925], "fruits_revers": [422, 482, 550], "cars_revers": [422, 482, 550], "window_s": [423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 550, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 925], "rolling_min": [423, 550, 830, 925], "rolling_max": [423, 550, 830, 925], "rolling_mean": [423, 550, 830, 925], "rolling_sum": [423, 550, 830, 925], "multipli": [423, 424, 425, 426, 427, 428, 430, 431, 432, 550, 830, 831, 832, 833, 834, 835, 837, 838, 839, 925], "358899": [423, 550], "041452": [423, 550], "567764": [423, 550], "travers": [424, 425, 427, 430, 431, 432, 550, 831, 832, 834, 837, 838, 839, 925], "vector": [424, 425, 427, 430, 431, 432, 550, 831, 832, 834, 837, 838, 839, 925], "5h": [424, 425, 426, 427, 428, 430, 431, 432, 550], "33": [428, 433, 504, 550, 835, 925], "skew": [429, 550, 836, 925], "527525": [430, 550, 837, 925], "digit": [433, 479, 550, 840, 864, 891, 925], "searchsortedsid": [435, 550, 842, 925], "leftmost": [435, 550, 842, 925], "rightmost": [435, 550, 842, 925], "six": [435, 550], "extrema": [439, 550, 850, 925], "112": [439, 550], "129": [439, 550], "i8": [439, 550, 717, 829, 913, 925], "8589934592": [439, 550], "1073741824": [439, 550], "content": [440, 494, 550, 852, 925], "175201": [443, 550, 855, 925], "about": [444, 550, 856, 925], "unimod": [444, 550, 856, 925], "skewtest": [444, 550, 856, 925], "speak": [444, 550, 856, 925], "g_1": [444, 550, 856, 925], "m_3": [444, 550, 856, 925], "m_2": [444, 550, 856, 925], "m_i": [444, 550, 856, 925], "sum_": [444, 550, 856, 925], "texttt": [444, 550, 856, 925], "k_3": [444, 550, 856, 925], "k_2": [444, 550, 856, 925], "sqrt": [444, 550, 856, 925], "343622": [444, 550], "value1": [447, 550], "value2": [447, 550], "attain": [447, 550], "414214": [448, 550, 859, 925], "ends_with": [451, 474, 886], "crab": [451, 863], "dog": [451, 477, 478, 506, 863], "rab": [451, 863], "success": [452, 458, 864, 870], "overlap": [452, 458, 864, 870], "captur": [452, 457, 458, 864, 869, 870], "123": [452, 458, 467, 864, 870, 879, 905, 925], "bla": [452, 458, 864, 870], "asd": [452, 458, 864, 870], "678": [452, 458, 864, 870], "910t": [452, 458, 864, 870], "count_digit": 452, "666f6f": [454, 866], "626172": [454, 866], "mango": [455, 474, 867, 886], "go": [455, 867], "has_suffix": 455, "group_index": [457, 869], "vote": [457, 869], "ballon_dor": [457, 869], "candid": [457, 869], "messi": [457, 869], "ref": [457, 869], "candidat": [457, 869], "jorginho": [457, 869], "ronaldo": [457, 869], "extracted_nr": 458, "910": [458, 870], "json_path_match": [459, 871], "jsonpath": [459, 460, 871, 872], "json_path": [460, 872], "regardless": [460, 872], "json_val": [460, 872], "n_char": [461, 873], "caf\u00e9": [461, 464, 873, 876], "345": [461, 464, 873, 876], "\u6771\u4eac": [461, 464, 873, 876], "nchar": [461, 464], "fillchar": [462, 468, 874, 880], "justifi": [462, 468, 874, 880], "pad": [462, 468, 479, 874, 880, 891], "cow": [462, 468, 874, 880], "monkei": [462, 468, 874, 880], "hippopotamu": [462, 468, 874, 880], "strip": [463, 469, 875, 881], "whitespac": [463, 469, 475, 875, 881, 887], "tworld": [463, 475, 875, 887], "wod": [463, 469, 875, 881], "rld": [463, 875], "text": [464, 466, 467, 876], "radix": [465, 877], "parseerror": [465, 877], "becom": [465, 877], "defult": [465, 877], "silent": [465, 877], "110": [465, 877], "010": [465, 877], "fa1e": [465, 877], "ff00": [465, 877], "cafe": [465, 877], "64030": [465, 877], "65280": [465, 877], "51966": [465, 877], "replace_al": [466, 878], "123abc": [466, 878], "abc456": [466, 878], "abcabc": [467, 879], "123a123": [467, 879], "bc": [467, 540, 879], "trail": [469, 475, 881, 887], "worl": [469, 475, 881, 887], "subslic": [470, 882], "pear": [470, 882], "papaya": [470, 882], "dragonfruit": [470, 882], "s_slice": 470, "ear": [470, 882], "aya": [470, 882], "uit": [470, 882], "ya": [470, 882], "onf": [470, 882], "a_1": [472, 884, 904, 925], "d_4": [472, 884], "rename_field": [472, 473, 884, 885], "first_part": [472, 473, 884, 885], "second_part": [472, 473, 884, 885], "remaind": [473, 885], "app": [474, 886], "has_prefix": 474, "polarstemporaltyp": [476, 888], "tz_awar": [476, 888], "strftime": [476, 888], "anywher": [476, 888], "3f": 476, "00z": [476, 888], "sun": [476, 888], "jul": [476, 888], "34": [476, 888], "lowercas": [477, 889], "variant": [477, 478], "uppercas": [478, 890], "100000": 479, "0010": 479, "0001": 479, "00000": 479, "00001": 479, "cd": [480, 481], "struct_col": [480, 481], "www": 481, "xxx": 481, "yyi": 481, "zzz": 481, "obvious": 481, "referenc": 481, "structfieldnotfounderror": [481, 560], "56": [487, 550], "761594": [488, 550, 901, 925], "replic": [489, 550, 909, 925], "vals_phys": [489, 550], "bottom_k": [490, 550], "value_count": [492, 550, 925], "9223372036854775807": [493, 550], "multithread": [494, 550], "columnwis": [497, 498], "AND": 497, "bitwis": [497, 498], "returns_scalar": 499, "product_a": 499, "49": 499, "Be": 500, "more_nam": 504, "hamburg": 504, "lag": 505, "mimic": 505, "a_lag_": 505, "a_rol": 505, "plai": 506, "swim": 506, "walk": 506, "full_sent": 506, "correlationmethod": 507, "propagate_nan": [507, 537], "spearman": [507, 537], "larger": [507, 537, 608, 609, 644], "544705": [507, 532], "covari": 509, "acc": [510, 511, 519, 534], "include_init": 510, "accumul": [510, 511, 519, 534], "fn": [510, 511, 519, 534], "new_valu": [510, 511, 519, 534], "cumreduc": 510, "cumfold": 512, "999999": 514, "add_week": 515, "add_dai": 515, "add_second": 515, "add_millisecond": 515, "add_hour": 515, "add_millisec": 515, "ond": 515, "eval": 516, "mathemat": 516, "a_b_doubl": 516, "fstring": 520, "placehold": 520, "hello_": 520, "_world": 520, "foo_": 520, "_bar_": 520, "foo_a_bar_1": 520, "foo_b_bar_2": 520, "foo_c_bar_3": 520, "epoch": [521, 748], "timestep": 521, "1666683077": 521, "1666683099": 521, "39": 521, "12345": [521, 701, 772, 840, 925], "12346": 521, "agg_group": [522, 550], "allow_object": 525, "valueexcept": 525, "test_func": 526, "selector": [527, 530, 540], "favor": [532, 537], "605551": 538, "605551275463989": 538, "my_struct": 539, "q": 539, "isn": 543, "thens": 543, "chain": 543, "sometim": 549, "and_": 550, "other1": 550, "other2": 550, "arcco": [550, 925], "arccosh": [550, 925], "arcsin": [550, 925], "arcsinh": [550, 925], "arctan": [550, 925], "arctanh": [550, 925], "arg_max": [550, 925], "arg_min": [550, 925], "arg_uniqu": [550, 925], "argsort": [550, 925], "backward_fil": 550, "clip_max": [550, 925], "clip_min": [550, 925], "co": [550, 925], "cosh": [550, 925], "cumcount": 550, "cummax": [550, 925], "cummin": [550, 925], "cumprod": [550, 925], "cumulative_ev": [550, 925], "entropi": [550, 925], "eq": [550, 925], "ewm_mean": [550, 925], "ewm_std": [550, 925], "ewm_var": [550, 925], "extend_const": [550, 925], "flatten": 550, "floordiv": 550, "ge": [550, 925], "gt": [550, 925], "inspect": [550, 644], "is_between": [550, 925], "is_finit": [550, 925], "is_first": [550, 925], "is_in": [550, 925], "is_infinit": [550, 925], "is_nan": [550, 925], "is_not_nan": [550, 925], "is_not_nul": [550, 925], "kurtosi": [550, 925], "le": [550, 925], "log10": [550, 925], "map_alia": 550, "map_dict": [550, 925], "mod": 550, "mul": 550, "nan_max": [550, 925], "nan_min": [550, 925], "ne": [550, 925], "or_": 550, "pct_chang": [550, 925], "pow": 550, "reinterpret": [550, 925], "repeat_bi": 550, "rolling_appli": [550, 925], "rolling_median": [550, 925], "rolling_quantil": [550, 925], "rolling_skew": [550, 925], "rolling_std": [550, 925], "rolling_var": [550, 925], "search_sort": [550, 925], "set_sort": [550, 925], "shrink_dtyp": [550, 925], "sin": [550, 925], "sinh": [550, 925], "sort_bi": 550, "tan": [550, 925], "tanh": [550, 925], "to_phys": [550, 925], "truediv": 550, "unique_count": [550, 925], "xor": 550, "expos": 560, "registr": 560, "miscellan": 560, "arrowerror": 560, "columnnotfounderror": 560, "invalidoperationerror": 560, "nodataerror": 560, "panicexcept": 560, "schemaerror": 560, "schemafieldnotfounderror": 560, "shapeerror": 560, "build_info": 560, "get_index_typ": 560, "show_vers": 560, "threadpool_s": 560, "sqlcontext": [560, 932], "hit": [563, 644], "node": [563, 583, 590, 594, 598, 601, 644], "huge": [566, 644], "saver": [566, 644], "purpos": [573, 644], "influenc": [573, 590, 644], "read_json": [578, 625, 644], "lazygroupbi": [579, 580, 581, 644], "other_lf": [585, 644], "validate_output_schema": [590, 644], "streamabl": [590, 594, 644], "past": [590, 644], "paramount": [590, 644], "bug": [590, 628, 644], "elig": [590, 644], "ot": [590, 644], "exectut": [590, 644], "invari": [590, 644], "upheld": [590, 644], "prune": [590, 644], "show_plot": [598, 644], "truncate_nod": [598, 644], "figsiz": [598, 607, 644], "gantt": [598, 644], "plot": [598, 607, 644], "groupby_partit": [598, 644], "470": [598, 644], "475": [598, 644], "1964": [598, 644], "from_json": [600, 644], "swap": [601, 644], "output_path": [607, 644], "raw_output": [607, 644], "figur": [607, 644], "persist": [608, 609, 644], "ram": [608, 609, 644], "slightli": [608, 609, 644], "my_larger_than_ram_fil": [608, 609, 644], "data_pagesize_limit": [609, 644], "290994": [612, 644], "118034": [612, 644], "433013": [612, 644], "1875": [620, 644], "polarsexprtyp": [622, 644], "extern": [623, 644], "lf_other": [623, 644], "afoo": [623, 644], "cfoo": [623, 644], "train_lf": [623, 644], "feature_0": [623, 644], "feature_1": [623, 644], "test_lf": [623, 644], "_train": [623, 644], "feature_0_train": [623, 644], "dataframescan": [625, 644], "output_schema": [625, 644], "initialis": 644, "lf2": 644, "lf3": 644, "lf4": 644, "lf5": 644, "lf6": 644, "explain": 644, "profil": 644, "sink_ipc": 644, "sink_parquet": 644, "with_context": 644, "sr": [649, 925], "new_aliased_sr": [649, 925], "append_chunk": [652, 925], "super": [652, 925], "141593": [654, 925], "292432": [655, 925], "549306": [659, 925], "listnamespac": [666, 766, 828, 925], "catnamespac": 699, "56789": [701, 772, 840, 925], "901234": [701, 772, 840, 925], "pi": [708, 854, 900, 925], "1232e": [708, 925], "quick": [716, 925], "series_num": [716, 925], "581139": [716, 925], "series_str": [716, 925], "datetimenamespac": 721, "500m": [735, 737, 743, 750], "500000": 735, "2m": 740, "500000000": 743, "date_minus_1y_2mon": 745, "1583020800": 748, "1585699200": 748, "1588291200": 748, "nyc": 748, "edt": 748, "1583038800": 748, "1585717200": 748, "1588309200": 748, "165": [749, 754], "series_equ": [749, 754, 925], "timestamp_u": 753, "978307200000000000": 753, "978393600000000000": 753, "978480000000000000": 753, "005": [760, 925], "06293300616044681": [760, 925], "65": [760, 925], "8568409950394724": [760, 925], "4000000": [761, 925], "814697265625": [761, 925], "stringnamespac": [766, 861, 925], "bitmask": [774, 925], "swiftli": [774, 925], "10734580197236529959": [775, 925], "3022416320763508302": [775, 925], "13756996518000038261": [775, 925], "bin_count": [777, 925], "a_count": [777, 925], "fall": [780, 925], "2147483648": [804, 925], "iso3166": [805, 925], "tur": [805, 925], "jpn": [805, 925], "nld": [805, 925], "country_lookup": [805, 925], "japan": [805, 925], "t\u00fcrkiy": [805, 925], "netherland": [805, 925], "unrecognis": [805, 925], "unspecifi": [805, 925], "country_nam": [805, 925], "166667": [818, 925], "142857": [818, 925], "512": [818, 925], "peak": [819, 820, 925], "quanil": [822, 925], "nanstd": [830, 925], "858612": [830, 925], "200": [831, 832, 834, 925], "150": [832, 925], "250": [832, 925], "350": [832, 925], "450": [832, 925], "381802": [836, 925], "dev": [837, 925], "57": [840, 925], "frequent": [844, 845, 925], "mutat": [845, 925], "2246e": [854, 900, 925], "divisor": [860, 915, 925], "6331e16": [900, 925], "lib": [903, 925], "int64arrai": [903, 925], "a_2": [904, 925], "a_3": [904, 925], "zero_copy_onli": [907, 925], "writabl": [907, 925], "complet": [907, 925], "view": [907, 925], "presenc": [907, 925], "immut": [907, 925], "127": [913, 925], "seriesview": [916, 925], "arraylik": 925, "dtype_if_empti": 925, "position": 925, "scenario": 925, "through": 925, "chunk_length": 925, "cut": 925, "get_chunk": 925, "has_valid": 925, "hist": 925, "is_boolean": 925, "is_float": 925, "is_numer": 925, "is_sort": 925, "is_tempor": 925, "is_utf8": 925, "new_from_index": 925, "peak_max": 925, "peak_min": 925, "qcut": 925, "set_at_idx": 925}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [932, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 0, 1, "", "Struct"], [53, 0, 1, "", "Time"], [54, 0, 1, "", "UInt16"], [55, 0, 1, "", "UInt32"], [56, 0, 1, "", "UInt64"], [57, 0, 1, "", "UInt8"], [58, 0, 1, "", "Unknown"], [59, 0, 1, "", "Utf8"], [60, 4, 1, "", "align_frames"], [497, 4, 1, "", "all"], [498, 4, 1, "", "any"], [499, 4, 1, "", "apply"], [500, 4, 1, "", "arange"], [501, 4, 1, "", "arg_sort_by"], [65, 4, 1, "", "arg_where"], [502, 4, 1, "", "avg"], [66, 4, 1, "", "build_info"], [503, 4, 1, "", "coalesce"], [504, 4, 1, "", "col"], [67, 4, 1, "", "collect_all"], [68, 4, 1, "", "concat"], [505, 4, 1, "", "concat_list"], [506, 4, 1, "", "concat_str"], [507, 4, 1, "", "corr"], [508, 4, 1, "", "count"], [509, 4, 1, "", "cov"], [510, 4, 1, "", "cumfold"], [511, 4, 1, "", "cumreduce"], [512, 4, 1, "", "cumsum"], [69, 4, 1, "", "cut"], [513, 4, 1, "", "date"], [70, 4, 1, "", "date_range"], [514, 4, 1, "", "datetime"], [515, 4, 1, "", "duration"], [516, 4, 1, "", "element"], [517, 4, 1, "", "exclude"], [518, 4, 1, "", "first"], [519, 4, 1, "", "fold"], [520, 4, 1, "", "format"], [85, 4, 1, "", "from_arrow"], [86, 4, 1, "", "from_dataframe"], [87, 4, 1, "", "from_dict"], [88, 4, 1, "", "from_dicts"], [521, 4, 1, "", "from_epoch"], [89, 4, 1, "", "from_numpy"], [90, 4, 1, "", "from_pandas"], [91, 4, 1, "", "from_records"], [92, 4, 1, "", "get_dummies"], [93, 4, 1, "", "get_index_type"], [522, 4, 1, "", "groups"], [523, 4, 1, "", "head"], [524, 4, 1, "", "list"], [525, 4, 1, "", "lit"], [526, 4, 1, "", "map"], [527, 4, 1, "", "max"], [528, 4, 1, "", "mean"], [529, 4, 1, "", "median"], [530, 4, 1, "", "min"], [531, 4, 1, "", "n_unique"], [95, 4, 1, "", "ones"], [532, 4, 1, "", "pearson_corr"], [533, 4, 1, "", "quantile"], [96, 4, 1, "", "read_avro"], [97, 4, 1, "", "read_csv"], [98, 4, 1, "", "read_csv_batched"], [99, 4, 1, "", "read_database"], [100, 4, 1, "", "read_delta"], [101, 4, 1, "", "read_excel"], [102, 4, 1, "", "read_ipc"], [103, 4, 1, "", "read_ipc_schema"], [104, 4, 1, "", "read_json"], [105, 4, 1, "", "read_ndjson"], [106, 4, 1, "", "read_parquet"], [107, 4, 1, "", "read_parquet_schema"], [534, 4, 1, "", "reduce"], [535, 4, 1, "", "repeat"], [108, 4, 1, "", "scan_csv"], [109, 4, 1, "", "scan_delta"], [110, 4, 1, "", "scan_ipc"], [111, 4, 1, "", "scan_ndjson"], [112, 4, 1, "", "scan_parquet"], [113, 4, 1, "", "scan_pyarrow_dataset"], [536, 4, 1, "", "select"], [114, 4, 1, "", "show_versions"], [537, 4, 1, "", "spearman_rank_corr"], [538, 4, 1, "", "std"], [539, 4, 1, "", "struct"], [540, 4, 1, "", "sum"], [541, 4, 1, "", "tail"], [121, 4, 1, "", "threadpool_size"], [122, 4, 1, "", "toggle_string_cache"], [542, 4, 1, "", "var"], [543, 4, 1, "", "when"], [123, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[126, 1, 1, "", "__dataframe__"], [127, 1, 1, "", "apply"], [128, 1, 1, "", "clear"], [129, 1, 1, "", "clone"], [130, 2, 1, "", "columns"], [131, 1, 1, "", "corr"], [132, 1, 1, "", "describe"], [133, 1, 1, "", "drop"], [134, 1, 1, "", "drop_in_place"], [135, 1, 1, "", "drop_nulls"], [136, 2, 1, "", "dtypes"], [137, 1, 1, "", "estimated_size"], [138, 1, 1, "", "explode"], [139, 1, 1, "", "extend"], [140, 1, 1, "", "fill_nan"], [141, 1, 1, "", "fill_null"], [142, 1, 1, "", "filter"], [143, 1, 1, "", "find_idx_by_name"], [144, 1, 1, "", "fold"], [145, 1, 1, "", "frame_equal"], [146, 1, 1, "", "get_column"], [147, 1, 1, "", "get_columns"], [148, 1, 1, "", "glimpse"], [149, 1, 1, "", "groupby"], [150, 1, 1, "", "groupby_dynamic"], [151, 1, 1, "", "groupby_rolling"], [152, 1, 1, "", "hash_rows"], [153, 1, 1, "", "head"], [154, 2, 1, "", "height"], [155, 1, 1, "", "hstack"], [156, 1, 1, "", "insert_at_idx"], [157, 1, 1, "", "interpolate"], [158, 1, 1, "", "is_duplicated"], [159, 1, 1, "", "is_empty"], [160, 1, 1, "", "is_unique"], [161, 1, 1, "", "item"], [162, 1, 1, "", "iter_rows"], [163, 1, 1, "", "iter_slices"], [164, 1, 1, "", "join"], [165, 1, 1, "", "join_asof"], [166, 1, 1, "", "lazy"], [167, 1, 1, "", "limit"], [168, 1, 1, "", "max"], [169, 1, 1, "", "mean"], [170, 1, 1, "", "median"], [171, 1, 1, "", "melt"], [172, 1, 1, "", "merge_sorted"], [173, 1, 1, "", "min"], [174, 1, 1, "", "n_chunks"], [175, 1, 1, "", "n_unique"], [176, 1, 1, "", "null_count"], [177, 1, 1, "", "partition_by"], [178, 1, 1, "", "pipe"], [179, 1, 1, "", "pivot"], [180, 1, 1, "", "product"], [181, 1, 1, "", "quantile"], [182, 1, 1, "", "rechunk"], [183, 1, 1, "", "rename"], [184, 1, 1, "", "replace"], [185, 1, 1, "", "replace_at_idx"], [186, 1, 1, "", "reverse"], [187, 1, 1, "", "row"], [188, 1, 1, "", "rows"], [189, 1, 1, "", "sample"], [190, 2, 1, "", "schema"], [191, 1, 1, "", "select"], [192, 2, 1, "", "shape"], [193, 1, 1, "", "shift"], [194, 1, 1, "", "shift_and_fill"], [195, 1, 1, "", "shrink_to_fit"], [196, 1, 1, "", "slice"], [197, 1, 1, "", "sort"], [198, 1, 1, "", "std"], [199, 1, 1, "", "sum"], [200, 1, 1, "", "tail"], [201, 1, 1, "", "take_every"], [202, 1, 1, "", "to_arrow"], [203, 1, 1, "", "to_dict"], [204, 1, 1, "", "to_dicts"], [205, 1, 1, "", "to_dummies"], [206, 1, 1, "", "to_numpy"], [207, 1, 1, "", "to_pandas"], [208, 1, 1, "", "to_series"], [209, 1, 1, "", "to_struct"], [210, 1, 1, "", "top_k"], [211, 1, 1, "", "transpose"], [212, 1, 1, "", "unique"], [213, 1, 1, "", "unnest"], [214, 1, 1, "", "unstack"], [215, 1, 1, "", "update"], [216, 1, 1, "", "upsample"], [217, 1, 1, "", "var"], [218, 1, 1, "", "vstack"], [219, 2, 1, "", "width"], [220, 1, 1, "", "with_columns"], [221, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[249, 1, 1, "", "abs"], [250, 1, 1, "", "agg_groups"], [251, 1, 1, "", "alias"], [252, 1, 1, "", "all"], [253, 1, 1, "", "any"], [254, 1, 1, "", "append"], [255, 1, 1, "", "apply"], [256, 1, 1, "", "arccos"], [257, 1, 1, "", "arccosh"], [258, 1, 1, "", "arcsin"], [259, 1, 1, "", "arcsinh"], [260, 1, 1, "", "arctan"], [261, 1, 1, "", "arctanh"], [262, 1, 1, "", "arg_max"], [263, 1, 1, "", "arg_min"], [264, 1, 1, "", "arg_sort"], [265, 1, 1, "", "arg_true"], [266, 1, 1, "", "arg_unique"], [267, 1, 1, "", "argsort"], [294, 1, 1, "", "backward_fill"], [300, 1, 1, "", "cast"], [302, 1, 1, "", "ceil"], [303, 1, 1, "", "clip"], [304, 1, 1, "", "clip_max"], [305, 1, 1, "", "clip_min"], [306, 1, 1, "", "cos"], [307, 1, 1, "", "cosh"], [308, 1, 1, "", "count"], [309, 1, 1, "", "cumcount"], [310, 1, 1, "", "cummax"], [311, 1, 1, "", "cummin"], [312, 1, 1, "", "cumprod"], [313, 1, 1, "", "cumsum"], [314, 1, 1, "", "cumulative_eval"], [315, 1, 1, "", "diff"], [316, 1, 1, "", "dot"], [317, 1, 1, "", "drop_nans"], [318, 1, 1, "", "drop_nulls"], [352, 1, 1, "", "entropy"], [353, 1, 1, "", "ewm_mean"], [354, 1, 1, "", "ewm_std"], [355, 1, 1, "", "ewm_var"], [356, 1, 1, "", "exclude"], [357, 1, 1, "", "exp"], [358, 1, 1, "", "explode"], [359, 1, 1, "", "extend_constant"], [360, 1, 1, "", "fill_nan"], [361, 1, 1, "", "fill_null"], [362, 1, 1, "", "filter"], [363, 1, 1, "", "first"], [364, 1, 1, "", "flatten"], [365, 1, 1, "", "floor"], [366, 1, 1, "", "forward_fill"], [367, 1, 1, "", "hash"], [368, 1, 1, "", "head"], [369, 1, 1, "", "inspect"], [370, 1, 1, "", "interpolate"], [371, 1, 1, "", "is_between"], [372, 1, 1, "", "is_duplicated"], [373, 1, 1, "", "is_finite"], [374, 1, 1, "", "is_first"], [375, 1, 1, "", "is_in"], [376, 1, 1, "", "is_infinite"], [377, 1, 1, "", "is_nan"], [378, 1, 1, "", "is_not"], [379, 1, 1, "", "is_not_nan"], [380, 1, 1, "", "is_not_null"], [381, 1, 1, "", "is_null"], [382, 1, 1, "", "is_unique"], [383, 1, 1, "", "keep_name"], [384, 1, 1, "", "kurtosis"], [385, 1, 1, "", "last"], [386, 1, 1, "", "len"], [387, 1, 1, "", "limit"], [388, 1, 1, "", "list"], [389, 1, 1, "", "log"], [390, 1, 1, "", "log10"], [391, 1, 1, "", "lower_bound"], [392, 1, 1, "", "map"], [393, 1, 1, "", "map_alias"], [394, 1, 1, "", "map_dict"], [395, 1, 1, "", "max"], [396, 1, 1, "", "mean"], [397, 1, 1, "", "median"], [404, 1, 1, "", "min"], [405, 1, 1, "", "mode"], [406, 1, 1, "", "n_unique"], [407, 1, 1, "", "nan_max"], [408, 1, 1, "", "nan_min"], [409, 1, 1, "", "null_count"], [410, 1, 1, "", "over"], [411, 1, 1, "", "pct_change"], [412, 1, 1, "", "pipe"], [413, 1, 1, "", "pow"], [414, 1, 1, "", "prefix"], [415, 1, 1, "", "product"], [416, 1, 1, "", "quantile"], [417, 1, 1, "", "rank"], [418, 1, 1, "", "rechunk"], [419, 1, 1, "", "reinterpret"], [420, 1, 1, "", "repeat_by"], [421, 1, 1, "", "reshape"], [422, 1, 1, "", "reverse"], [423, 1, 1, "", "rolling_apply"], [424, 1, 1, "", "rolling_max"], [425, 1, 1, "", "rolling_mean"], [426, 1, 1, "", "rolling_median"], [427, 1, 1, "", "rolling_min"], [428, 1, 1, "", "rolling_quantile"], [429, 1, 1, "", "rolling_skew"], [430, 1, 1, "", "rolling_std"], [431, 1, 1, "", "rolling_sum"], [432, 1, 1, "", "rolling_var"], [433, 1, 1, "", "round"], [434, 1, 1, "", "sample"], [435, 1, 1, "", "search_sorted"], [436, 1, 1, "", "set_sorted"], [437, 1, 1, "", "shift"], [438, 1, 1, "", "shift_and_fill"], [439, 1, 1, "", "shrink_dtype"], [440, 1, 1, "", "shuffle"], [441, 1, 1, "", "sign"], [442, 1, 1, "", "sin"], [443, 1, 1, "", "sinh"], [444, 1, 1, "", "skew"], [445, 1, 1, "", "slice"], [446, 1, 1, "", "sort"], [447, 1, 1, "", "sort_by"], [448, 1, 1, "", "sqrt"], [449, 1, 1, "", "std"], [482, 1, 1, "", "suffix"], [483, 1, 1, "", "sum"], [484, 1, 1, "", "tail"], [485, 1, 1, "", "take"], [486, 1, 1, "", "take_every"], [487, 1, 1, "", "tan"], [488, 1, 1, "", "tanh"], [489, 1, 1, "", "to_physical"], [490, 1, 1, "", "top_k"], [491, 1, 1, "", "unique"], [492, 1, 1, "", "unique_counts"], [493, 1, 1, "", "upper_bound"], [494, 1, 1, "", "value_counts"], [495, 1, 1, "", "var"], [496, 1, 1, "", "where"]], "polars.Expr.arr": [[268, 1, 1, "", "arg_max"], [269, 1, 1, "", "arg_min"], [270, 1, 1, "", "concat"], [271, 1, 1, "", "contains"], [272, 1, 1, "", "count_match"], [273, 1, 1, "", "diff"], [274, 1, 1, "", "eval"], [275, 1, 1, "", "explode"], [276, 1, 1, "", "first"], [277, 1, 1, "", "get"], [278, 1, 1, "", "head"], [279, 1, 1, "", "join"], [280, 1, 1, "", "last"], [281, 1, 1, "", "lengths"], [282, 1, 1, "", "max"], [283, 1, 1, "", "mean"], [284, 1, 1, "", "min"], [285, 1, 1, "", "reverse"], [286, 1, 1, "", "shift"], [287, 1, 1, "", "slice"], [288, 1, 1, "", "sort"], [289, 1, 1, "", "sum"], [290, 1, 1, "", "tail"], [291, 1, 1, "", "take"], [292, 1, 1, "", "to_struct"], [293, 1, 1, "", "unique"]], "polars.Expr.bin": [[295, 1, 1, "", "contains"], [296, 1, 1, "", "decode"], [297, 1, 1, "", "encode"], [298, 1, 1, "", "ends_with"], [299, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[301, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[319, 1, 1, "", "cast_time_unit"], [320, 1, 1, "", "combine"], [321, 1, 1, "", "convert_time_zone"], [322, 1, 1, "", "day"], [323, 1, 1, "", "days"], [324, 1, 1, "", "epoch"], [325, 1, 1, "", "hour"], [326, 1, 1, "", "hours"], [327, 1, 1, "", "is_leap_year"], [328, 1, 1, "", "iso_year"], [329, 1, 1, "", "microsecond"], [330, 1, 1, "", "microseconds"], [331, 1, 1, "", "millisecond"], [332, 1, 1, "", "milliseconds"], [333, 1, 1, "", "minute"], [334, 1, 1, "", "minutes"], [335, 1, 1, "", "month"], [336, 1, 1, "", "nanosecond"], [337, 1, 1, "", "nanoseconds"], [338, 1, 1, "", "offset_by"], [339, 1, 1, "", "ordinal_day"], [340, 1, 1, "", "quarter"], [341, 1, 1, "", "replace_time_zone"], [342, 1, 1, "", "round"], [343, 1, 1, "", "second"], [344, 1, 1, "", "seconds"], [345, 1, 1, "", "strftime"], [346, 1, 1, "", "timestamp"], [347, 1, 1, "", "truncate"], [348, 1, 1, "", "week"], [349, 1, 1, "", "weekday"], [350, 1, 1, "", "with_time_unit"], [351, 1, 1, "", "year"]], "polars.Expr.meta": [[398, 1, 1, "", "has_multiple_outputs"], [399, 1, 1, "", "is_regex_projection"], [400, 1, 1, "", "output_name"], [401, 1, 1, "", "pop"], [402, 1, 1, "", "root_names"], [403, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[450, 1, 1, "", "concat"], [451, 1, 1, "", "contains"], [452, 1, 1, "", "count_match"], [453, 1, 1, "", "decode"], [454, 1, 1, "", "encode"], [455, 1, 1, "", "ends_with"], [456, 1, 1, "", "explode"], [457, 1, 1, "", "extract"], [458, 1, 1, "", "extract_all"], [459, 1, 1, "", "json_extract"], [460, 1, 1, "", "json_path_match"], [461, 1, 1, "", "lengths"], [462, 1, 1, "", "ljust"], [463, 1, 1, "", "lstrip"], [464, 1, 1, "", "n_chars"], [465, 1, 1, "", "parse_int"], [466, 1, 1, "", "replace"], [467, 1, 1, "", "replace_all"], [468, 1, 1, "", "rjust"], [469, 1, 1, "", "rstrip"], [470, 1, 1, "", "slice"], [471, 1, 1, "", "split"], [472, 1, 1, "", "split_exact"], [473, 1, 1, "", "splitn"], [474, 1, 1, "", "starts_with"], [475, 1, 1, "", "strip"], [476, 1, 1, "", "strptime"], [477, 1, 1, "", "to_lowercase"], [478, 1, 1, "", "to_uppercase"], [479, 1, 1, "", "zfill"]], "polars.Expr.struct": [[480, 1, 1, "", "field"], [481, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[563, 1, 1, "", "cache"], [564, 1, 1, "", "clear"], [565, 1, 1, "", "clone"], [566, 1, 1, "", "collect"], [567, 2, 1, "", "columns"], [568, 1, 1, "", "drop"], [569, 1, 1, "", "drop_nulls"], [570, 2, 1, "", "dtypes"], [571, 1, 1, "", "explain"], [572, 1, 1, "", "explode"], [573, 1, 1, "", "fetch"], [574, 1, 1, "", "fill_nan"], [575, 1, 1, "", "fill_null"], [576, 1, 1, "", "filter"], [577, 1, 1, "", "first"], [578, 1, 1, "", "from_json"], [579, 1, 1, "", "groupby"], [580, 1, 1, "", "groupby_dynamic"], [581, 1, 1, "", "groupby_rolling"], [582, 1, 1, "", "head"], [583, 1, 1, "", "inspect"], [584, 1, 1, "", "interpolate"], [585, 1, 1, "", "join"], [586, 1, 1, "", "join_asof"], [587, 1, 1, "", "last"], [588, 1, 1, "", "lazy"], [589, 1, 1, "", "limit"], [590, 1, 1, "", "map"], [591, 1, 1, "", "max"], [592, 1, 1, "", "mean"], [593, 1, 1, "", "median"], [594, 1, 1, "", "melt"], [595, 1, 1, "", "merge_sorted"], [596, 1, 1, "", "min"], [597, 1, 1, "", "pipe"], [598, 1, 1, "", "profile"], [599, 1, 1, "", "quantile"], [600, 1, 1, "", "read_json"], [601, 1, 1, "", "rename"], [602, 1, 1, "", "reverse"], [603, 2, 1, "", "schema"], [604, 1, 1, "", "select"], [605, 1, 1, "", "shift"], [606, 1, 1, "", "shift_and_fill"], [607, 1, 1, "", "show_graph"], [608, 1, 1, "", "sink_ipc"], [609, 1, 1, "", "sink_parquet"], [610, 1, 1, "", "slice"], [611, 1, 1, "", "sort"], [612, 1, 1, "", "std"], [613, 1, 1, "", "sum"], [614, 1, 1, "", "tail"], [615, 1, 1, "", "take_every"], [616, 1, 1, "", "top_k"], [617, 1, 1, "", "unique"], [618, 1, 1, "", "unnest"], [619, 1, 1, "", "update"], [620, 1, 1, "", "var"], [621, 2, 1, "", "width"], [622, 1, 1, "", "with_columns"], [623, 1, 1, "", "with_context"], [624, 1, 1, "", "with_row_count"], [625, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"]], "polars.Series": [[648, 1, 1, "", "abs"], [649, 1, 1, "", "alias"], [650, 1, 1, "", "all"], [651, 1, 1, "", "any"], [652, 1, 1, "", "append"], [653, 1, 1, "", "apply"], [654, 1, 1, "", "arccos"], [655, 1, 1, "", "arccosh"], [656, 1, 1, "", "arcsin"], [657, 1, 1, "", "arcsinh"], [658, 1, 1, "", "arctan"], [659, 1, 1, "", "arctanh"], [660, 1, 1, "", "arg_max"], [661, 1, 1, "", "arg_min"], [662, 1, 1, "", "arg_sort"], [663, 1, 1, "", "arg_true"], [664, 1, 1, "", "arg_unique"], [665, 1, 1, "", "argsort"], [666, 3, 1, "", "arr"], [698, 1, 1, "", "cast"], [699, 3, 1, "", "cat"], [701, 1, 1, "", "ceil"], [702, 1, 1, "", "chunk_lengths"], [703, 1, 1, "", "clear"], [704, 1, 1, "", "clip"], [705, 1, 1, "", "clip_max"], [706, 1, 1, "", "clip_min"], [707, 1, 1, "", "clone"], [708, 1, 1, "", "cos"], [709, 1, 1, "", "cosh"], [710, 1, 1, "", "cummax"], [711, 1, 1, "", "cummin"], [712, 1, 1, "", "cumprod"], [713, 1, 1, "", "cumsum"], [714, 1, 1, "", "cumulative_eval"], [715, 1, 1, "", "cut"], [716, 1, 1, "", "describe"], [717, 1, 1, "", "diff"], [718, 1, 1, "", "dot"], [719, 1, 1, "", "drop_nans"], [720, 1, 1, "", "drop_nulls"], [721, 3, 1, "", "dt"], [759, 3, 1, "", "dtype"], [760, 1, 1, "", "entropy"], [761, 1, 1, "", "estimated_size"], [762, 1, 1, "", "ewm_mean"], [763, 1, 1, "", "ewm_std"], [764, 1, 1, "", "ewm_var"], [765, 1, 1, "", "exp"], [766, 1, 1, "", "explode"], [767, 1, 1, "", "extend_constant"], [768, 1, 1, "", "fill_nan"], [769, 1, 1, "", "fill_null"], [770, 1, 1, "", "filter"], [771, 3, 1, "", "flags"], [772, 1, 1, "", "floor"], [773, 1, 1, "", "get_chunks"], [774, 1, 1, "", "has_validity"], [775, 1, 1, "", "hash"], [776, 1, 1, "", "head"], [777, 1, 1, "", "hist"], [778, 3, 1, "", "inner_dtype"], [779, 1, 1, "", "interpolate"], [780, 1, 1, "", "is_between"], [781, 1, 1, "", "is_boolean"], [782, 1, 1, "", "is_duplicated"], [783, 1, 1, "", "is_empty"], [784, 1, 1, "", "is_finite"], [785, 1, 1, "", "is_first"], [786, 1, 1, "", "is_float"], [787, 1, 1, "", "is_in"], [788, 1, 1, "", "is_infinite"], [789, 1, 1, "", "is_nan"], [790, 1, 1, "", "is_not_nan"], [791, 1, 1, "", "is_not_null"], [792, 1, 1, "", "is_null"], [793, 1, 1, "", "is_numeric"], [794, 1, 1, "", "is_sorted"], [795, 1, 1, "", "is_temporal"], [796, 1, 1, "", "is_unique"], [797, 1, 1, "", "is_utf8"], [798, 1, 1, "", "item"], [799, 1, 1, "", "kurtosis"], [800, 1, 1, "", "len"], [801, 1, 1, "", "limit"], [802, 1, 1, "", "log"], [803, 1, 1, "", "log10"], [804, 1, 1, "", "lower_bound"], [805, 1, 1, "", "map_dict"], [806, 1, 1, "", "max"], [807, 1, 1, "", "mean"], [808, 1, 1, "", "median"], [809, 1, 1, "", "min"], [810, 1, 1, "", "mode"], [811, 1, 1, "", "n_chunks"], [812, 1, 1, "", "n_unique"], [813, 3, 1, "", "name"], [814, 1, 1, "", "nan_max"], [815, 1, 1, "", "nan_min"], [816, 1, 1, "", "new_from_index"], [817, 1, 1, "", "null_count"], [818, 1, 1, "", "pct_change"], [819, 1, 1, "", "peak_max"], [820, 1, 1, "", "peak_min"], [821, 1, 1, "", "product"], [822, 1, 1, "", "qcut"], [823, 1, 1, "", "quantile"], [824, 1, 1, "", "rank"], [825, 1, 1, "", "rechunk"], [826, 1, 1, "", "reinterpret"], [827, 1, 1, "", "rename"], [828, 1, 1, "", "reshape"], [829, 1, 1, "", "reverse"], [830, 1, 1, "", "rolling_apply"], [831, 1, 1, "", "rolling_max"], [832, 1, 1, "", "rolling_mean"], [833, 1, 1, "", "rolling_median"], [834, 1, 1, "", "rolling_min"], [835, 1, 1, "", "rolling_quantile"], [836, 1, 1, "", "rolling_skew"], [837, 1, 1, "", "rolling_std"], [838, 1, 1, "", "rolling_sum"], [839, 1, 1, "", "rolling_var"], [840, 1, 1, "", "round"], [841, 1, 1, "", "sample"], [842, 1, 1, "", "search_sorted"], [843, 1, 1, "", "series_equal"], [844, 1, 1, "", "set"], [845, 1, 1, "", "set_at_idx"], [846, 1, 1, "", "set_sorted"], [847, 3, 1, "", "shape"], [848, 1, 1, "", "shift"], [849, 1, 1, "", "shift_and_fill"], [850, 1, 1, "", "shrink_dtype"], [851, 1, 1, "", "shrink_to_fit"], [852, 1, 1, "", "shuffle"], [853, 1, 1, "", "sign"], [854, 1, 1, "", "sin"], [855, 1, 1, "", "sinh"], [856, 1, 1, "", "skew"], [857, 1, 1, "", "slice"], [858, 1, 1, "", "sort"], [859, 1, 1, "", "sqrt"], [860, 1, 1, "", "std"], [861, 3, 1, "", "str"], [896, 1, 1, "", "sum"], [897, 1, 1, "", "tail"], [898, 1, 1, "", "take"], [899, 1, 1, "", "take_every"], [900, 1, 1, "", "tan"], [901, 1, 1, "", "tanh"], [902, 3, 1, "", "time_unit"], [903, 1, 1, "", "to_arrow"], [904, 1, 1, "", "to_dummies"], [905, 1, 1, "", "to_frame"], [906, 1, 1, "", "to_list"], [907, 1, 1, "", "to_numpy"], [908, 1, 1, "", "to_pandas"], [909, 1, 1, "", "to_physical"], [910, 1, 1, "", "top_k"], [911, 1, 1, "", "unique"], [912, 1, 1, "", "unique_counts"], [913, 1, 1, "", "upper_bound"], [914, 1, 1, "", "value_counts"], [915, 1, 1, "", "var"], [916, 1, 1, "", "view"], [917, 1, 1, "", "zip_with"]], "polars.Series.arr": [[667, 1, 1, "", "arg_max"], [668, 1, 1, "", "arg_min"], [669, 1, 1, "", "concat"], [670, 1, 1, "", "contains"], [671, 1, 1, "", "count_match"], [672, 1, 1, "", "diff"], [673, 1, 1, "", "eval"], [674, 1, 1, "", "explode"], [675, 1, 1, "", "first"], [676, 1, 1, "", "get"], [677, 1, 1, "", "head"], [678, 1, 1, "", "join"], [679, 1, 1, "", "last"], [680, 1, 1, "", "lengths"], [681, 1, 1, "", "max"], [682, 1, 1, "", "mean"], [683, 1, 1, "", "min"], [684, 1, 1, "", "reverse"], [685, 1, 1, "", "shift"], [686, 1, 1, "", "slice"], [687, 1, 1, "", "sort"], [688, 1, 1, "", "sum"], [689, 1, 1, "", "tail"], [690, 1, 1, "", "take"], [691, 1, 1, "", "to_struct"], [692, 1, 1, "", "unique"]], "polars.Series.bin": [[693, 1, 1, "", "contains"], [694, 1, 1, "", "decode"], [695, 1, 1, "", "encode"], [696, 1, 1, "", "ends_with"], [697, 1, 1, "", "starts_with"]], "polars.Series.cat": [[700, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[722, 1, 1, "", "cast_time_unit"], [723, 1, 1, "", "combine"], [724, 1, 1, "", "convert_time_zone"], [725, 1, 1, "", "day"], [726, 1, 1, "", "days"], [727, 1, 1, "", "epoch"], [728, 1, 1, "", "hour"], [729, 1, 1, "", "hours"], [730, 1, 1, "", "is_leap_year"], [731, 1, 1, "", "iso_year"], [732, 1, 1, "", "max"], [733, 1, 1, "", "mean"], [734, 1, 1, "", "median"], [735, 1, 1, "", "microsecond"], [736, 1, 1, "", "microseconds"], [737, 1, 1, "", "millisecond"], [738, 1, 1, "", "milliseconds"], [739, 1, 1, "", "min"], [740, 1, 1, "", "minute"], [741, 1, 1, "", "minutes"], [742, 1, 1, "", "month"], [743, 1, 1, "", "nanosecond"], [744, 1, 1, "", "nanoseconds"], [745, 1, 1, "", "offset_by"], [746, 1, 1, "", "ordinal_day"], [747, 1, 1, "", "quarter"], [748, 1, 1, "", "replace_time_zone"], [749, 1, 1, "", "round"], [750, 1, 1, "", "second"], [751, 1, 1, "", "seconds"], [752, 1, 1, "", "strftime"], [753, 1, 1, "", "timestamp"], [754, 1, 1, "", "truncate"], [755, 1, 1, "", "week"], [756, 1, 1, "", "weekday"], [757, 1, 1, "", "with_time_unit"], [758, 1, 1, "", "year"]], "polars.Series.str": [[862, 1, 1, "", "concat"], [863, 1, 1, "", "contains"], [864, 1, 1, "", "count_match"], [865, 1, 1, "", "decode"], [866, 1, 1, "", "encode"], [867, 1, 1, "", "ends_with"], [868, 1, 1, "", "explode"], [869, 1, 1, "", "extract"], [870, 1, 1, "", "extract_all"], [871, 1, 1, "", "json_extract"], [872, 1, 1, "", "json_path_match"], [873, 1, 1, "", "lengths"], [874, 1, 1, "", "ljust"], [875, 1, 1, "", "lstrip"], [876, 1, 1, "", "n_chars"], [877, 1, 1, "", "parse_int"], [878, 1, 1, "", "replace"], [879, 1, 1, "", "replace_all"], [880, 1, 1, "", "rjust"], [881, 1, 1, "", "rstrip"], [882, 1, 1, "", "slice"], [883, 1, 1, "", "split"], [884, 1, 1, "", "split_exact"], [885, 1, 1, "", "splitn"], [886, 1, 1, "", "starts_with"], [887, 1, 1, "", "strip"], [888, 1, 1, "", "strptime"], [889, 1, 1, "", "to_lowercase"], [890, 1, 1, "", "to_uppercase"], [891, 1, 1, "", "zfill"]], "polars.Series.struct": [[892, 1, 1, "", "field"], [893, 3, 1, "", "fields"], [894, 1, 1, "", "rename_fields"], [895, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.Struct": [[52, 1, 1, "", "__init__"]], "polars.Time": [[53, 1, 1, "", "__init__"]], "polars.UInt16": [[54, 1, 1, "", "__init__"]], "polars.UInt32": [[55, 1, 1, "", "__init__"]], "polars.UInt64": [[56, 1, 1, "", "__init__"]], "polars.UInt8": [[57, 1, 1, "", "__init__"]], "polars.Unknown": [[58, 1, 1, "", "__init__"]], "polars.Utf8": [[59, 1, 1, "", "__init__"]], "polars.api": [[61, 4, 1, "", "register_dataframe_namespace"], [62, 4, 1, "", "register_expr_namespace"], [63, 4, 1, "", "register_lazyframe_namespace"], [64, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[222, 1, 1, "", "__iter__"], [223, 1, 1, "", "agg"], [224, 1, 1, "", "all"], [225, 1, 1, "", "apply"], [226, 1, 1, "", "count"], [227, 1, 1, "", "first"], [228, 1, 1, "", "head"], [229, 1, 1, "", "last"], [230, 1, 1, "", "max"], [231, 1, 1, "", "mean"], [232, 1, 1, "", "median"], [233, 1, 1, "", "min"], [234, 1, 1, "", "n_unique"], [235, 1, 1, "", "quantile"], [236, 1, 1, "", "sum"], [237, 1, 1, "", "tail"]], "polars.exceptions": [[71, 5, 1, "", "ArrowError"], [72, 5, 1, "", "ColumnNotFoundError"], [73, 5, 1, "", "ComputeError"], [74, 5, 1, "", "DuplicateError"], [75, 5, 1, "", "InvalidOperationError"], [76, 5, 1, "", "NoDataError"], [77, 5, 1, "", "NoRowsReturned"], [78, 5, 1, "", "PanicException"], [79, 5, 1, "", "RowsException"], [80, 5, 1, "", "SchemaError"], [81, 5, 1, "", "SchemaFieldNotFoundError"], [82, 5, 1, "", "ShapeError"], [83, 5, 1, "", "StructFieldNotFoundError"], [84, 5, 1, "", "TooManyRowsReturned"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[94, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[626, 1, 1, "", "agg"], [627, 1, 1, "", "all"], [628, 1, 1, "", "apply"], [629, 1, 1, "", "count"], [630, 1, 1, "", "first"], [631, 1, 1, "", "head"], [632, 1, 1, "", "last"], [633, 1, 1, "", "max"], [634, 1, 1, "", "mean"], [635, 1, 1, "", "median"], [636, 1, 1, "", "min"], [637, 1, 1, "", "n_unique"], [638, 1, 1, "", "quantile"], [639, 1, 1, "", "sum"], [640, 1, 1, "", "tail"]], "polars.testing": [[115, 4, 1, "", "assert_frame_equal"], [116, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[117, 0, 1, "", "column"], [118, 4, 1, "", "columns"], [119, 4, 1, "", "dataframes"], [120, 4, 1, "", "series"]], "polars.testing.parametric.column": [[117, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 139], "api": [1, 61, 62, 63, 64, 560], "provid": 1, "new": 1, "function": [1, 549, 559], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917], "binari": [2, 544, 919], "boolean": [3, 545, 920], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 124], "activate_decim": 5, "load": [6, 124], "restore_default": 7, "save": [8, 124], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 124], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 625], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 513], "datetim": [36, 514], "decim": 37, "durat": [38, 515], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 388, 524, 551, 926], "null": 46, "object": 47, "sqlcontext": [48, 49, 50], "execut": 48, "queri": 49, "regist": 50, "stringcach": [51, 559], "struct": [52, 480, 481, 539, 556, 892, 893, 894, 895, 930], "time": 53, "uint16": 54, "uint32": 55, "uint64": 56, "uint8": 57, "unknown": 58, "utf8": 59, "align_fram": 60, "register_dataframe_namespac": 61, "register_expr_namespac": 62, "register_lazyframe_namespac": 63, "register_series_namespac": 64, "arg_wher": 65, "build_info": 66, "collect_al": 67, "concat": [68, 270, 450, 669, 862], "cut": [69, 715], "date_rang": 70, "except": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 247], "arrowerror": 71, "columnnotfounderror": 72, "computeerror": 73, "duplicateerror": 74, "invalidoperationerror": 75, "nodataerror": 76, "norowsreturn": 77, "panicexcept": 78, "rowsexcept": 79, "schemaerror": 80, "schemafieldnotfounderror": 81, "shapeerror": 82, "structfieldnotfounderror": 83, "toomanyrowsreturn": 84, "from_arrow": 85, "from_datafram": 86, "from_dict": [87, 88], "from_numpi": 89, "from_panda": 90, "from_record": 91, "get_dummi": 92, "get_index_typ": 93, "io": 94, "csv": [94, 561], "batched_read": 94, "batchedcsvread": [94, 561], "next_batch": 94, "ones": 95, "read_avro": 96, "read_csv": 97, "read_csv_batch": 98, "read_databas": 99, "read_delta": 100, "read_excel": 101, "read_ipc": 102, "read_ipc_schema": 103, "read_json": [104, 600], "read_ndjson": 105, "read_parquet": 106, "read_parquet_schema": 107, "scan_csv": 108, "scan_delta": 109, "scan_ipc": 110, "scan_ndjson": 111, "scan_parquet": 112, "scan_pyarrow_dataset": 113, "show_vers": 114, "test": [115, 116, 117, 118, 119, 120, 933], "assert_frame_equ": 115, "assert_series_equ": 116, "parametr": [117, 118, 119, 120], "column": [117, 118, 130, 547, 567], "seri": [120, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 925], "threadpool_s": 121, "toggle_string_cach": 122, "zero": 123, "option": 124, "current": 124, "us": 124, "context": 124, "manag": 124, "aggreg": [125, 248, 562, 647], "__dataframe__": 126, "appli": [127, 225, 255, 499, 628, 653], "clear": [128, 564, 703], "clone": [129, 565, 707], "corr": [131, 507], "describ": [132, 716], "drop": [133, 568], "drop_in_plac": 134, "drop_nul": [135, 318, 569, 720], "dtype": [136, 570, 759], "estimated_s": [137, 761], "explod": [138, 275, 358, 456, 572, 674, 766, 868], "fill_nan": [140, 360, 574, 768], "fill_nul": [141, 361, 575, 769], "filter": [142, 362, 576, 770], "find_idx_by_nam": 143, "fold": [144, 519], "frame_equ": 145, "get_column": [146, 147], "glimps": 148, "groupbi": [149, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 242, 579, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643], "groupby_dynam": [150, 580], "groupby_rol": [151, 581], "hash_row": 152, "head": [153, 228, 278, 368, 523, 582, 631, 677, 776], "height": 154, "hstack": 155, "insert_at_idx": 156, "interpol": [157, 370, 584, 779], "is_dupl": [158, 372, 782], "is_empti": [159, 783], "is_uniqu": [160, 382, 796], "item": [161, 798], "iter_row": 162, "iter_slic": 163, "join": [164, 279, 585, 678], "join_asof": [165, 586], "lazi": [166, 559, 588], "limit": [167, 387, 589, 801], "max": [168, 230, 282, 395, 527, 591, 633, 681, 732, 806], "mean": [169, 231, 283, 396, 528, 592, 634, 682, 733, 807], "median": [170, 232, 397, 529, 593, 635, 734, 808], "melt": [171, 594], "merge_sort": [172, 595], "min": [173, 233, 284, 404, 530, 596, 636, 683, 739, 809], "n_chunk": [174, 811], "n_uniqu": [175, 234, 406, 531, 637, 812], "null_count": [176, 409, 817], "partition_bi": 177, "pipe": [178, 412, 597], "pivot": 179, "product": [180, 415, 821], "quantil": [181, 235, 416, 533, 599, 638, 823], "rechunk": [182, 418, 825], "renam": [183, 601, 827], "replac": [184, 466, 878], "replace_at_idx": 185, "revers": [186, 285, 422, 602, 684, 829], "row": [187, 188], "sampl": [189, 434, 841], "schema": [190, 603], "select": [191, 245, 536, 554, 604, 646, 928], "shape": [192, 847], "shift": [193, 286, 437, 605, 685, 848], "shift_and_fil": [194, 438, 606, 849], "shrink_to_fit": [195, 851], "slice": [196, 287, 445, 470, 610, 686, 857, 882], "sort": [197, 288, 446, 611, 687, 858], "std": [198, 449, 538, 612, 860], "sum": [199, 236, 289, 483, 540, 613, 639, 688, 896], "tail": [200, 237, 290, 484, 541, 614, 640, 689, 897], "take_everi": [201, 486, 615, 899], "to_arrow": [202, 903], "to_dict": [203, 204], "to_dummi": [205, 904], "to_numpi": [206, 907], "to_panda": [207, 908], "to_seri": 208, "to_struct": [209, 292, 691], "top_k": [210, 490, 616, 910], "transpos": 211, "uniqu": [212, 293, 491, 617, 692, 911], "unnest": [213, 618, 895], "unstack": 214, "updat": [215, 619], "upsampl": 216, "var": [217, 495, 542, 620, 915], "vstack": 218, "width": [219, 621], "with_column": [220, 622], "with_row_count": [221, 624], "__iter__": 222, "agg": [223, 626], "all": [224, 252, 497, 627, 650], "count": [226, 308, 508, 629], "first": [227, 276, 363, 518, 577, 630, 675], "last": [229, 280, 385, 587, 632, 679], "attribut": [238, 641, 918], "comput": [239, 548, 922], "descript": [240, 642, 923], "export": [241, 924], "miscellan": [244, 553, 559, 645, 927], "manipul": [245, 554, 646, 928], "data": 246, "type": 246, "numer": 246, "tempor": [246, 557, 931], "nest": 246, "other": 246, "expr": [249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496], "ab": [249, 648], "agg_group": 250, "alia": [251, 649], "ani": [253, 498, 651], "append": [254, 652], "arcco": [256, 654], "arccosh": [257, 655], "arcsin": [258, 656], "arcsinh": [259, 657], "arctan": [260, 658], "arctanh": [261, 659], "arg_max": [262, 268, 660, 667], "arg_min": [263, 269, 661, 668], "arg_sort": [264, 662], "arg_tru": [265, 663], "arg_uniqu": [266, 664], "argsort": [267, 665], "arr": [268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692], "contain": [271, 295, 451, 670, 693, 863], "count_match": [272, 452, 671, 864], "diff": [273, 315, 672, 717], "eval": [274, 673], "get": [277, 676], "length": [281, 461, 680, 873], "take": [291, 485, 690, 898], "backward_fil": 294, "bin": [295, 296, 297, 298, 299, 693, 694, 695, 696, 697], "decod": [296, 453, 694, 865], "encod": [297, 454, 695, 866], "ends_with": [298, 455, 696, 867], "starts_with": [299, 474, 697, 886], "cast": [300, 698], "cat": [301, 699, 700], "set_ord": [301, 700], "ceil": [302, 701], "clip": [303, 704], "clip_max": [304, 705], "clip_min": [305, 706], "co": [306, 708], "cosh": [307, 709], "cumcount": 309, "cummax": [310, 710], "cummin": [311, 711], "cumprod": [312, 712], "cumsum": [313, 512, 713], "cumulative_ev": [314, 714], "dot": [316, 718], "drop_nan": [317, 719], "dt": [319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758], "cast_time_unit": [319, 722], "combin": [320, 723], "convert_time_zon": [321, 724], "dai": [322, 323, 725, 726], "epoch": [324, 727], "hour": [325, 326, 728, 729], "is_leap_year": [327, 730], "iso_year": [328, 731], "microsecond": [329, 330, 735, 736], "millisecond": [331, 332, 737, 738], "minut": [333, 334, 740, 741], "month": [335, 742], "nanosecond": [336, 337, 743, 744], "offset_bi": [338, 745], "ordinal_dai": [339, 746], "quarter": [340, 747], "replace_time_zon": [341, 748], "round": [342, 433, 749, 840], "second": [343, 344, 750, 751], "strftime": [345, 752], "timestamp": [346, 753], "truncat": [347, 754], "week": [348, 755], "weekdai": [349, 756], "with_time_unit": [350, 757], "year": [351, 758], "entropi": [352, 760], "ewm_mean": [353, 762], "ewm_std": [354, 763], "ewm_var": [355, 764], "exclud": [356, 517], "exp": [357, 765], "extend_const": [359, 767], "flatten": 364, "floor": [365, 772], "forward_fil": 366, "hash": [367, 775], "inspect": [369, 583], "is_between": [371, 780], "is_finit": [373, 784], "is_first": [374, 785], "is_in": [375, 787], "is_infinit": [376, 788], "is_nan": [377, 789], "is_not": 378, "is_not_nan": [379, 790], "is_not_nul": [380, 791], "is_nul": [381, 792], "keep_nam": 383, "kurtosi": [384, 799], "len": [386, 800], "log": [389, 802], "log10": [390, 803], "lower_bound": [391, 804], "map": [392, 526, 590], "map_alia": 393, "map_dict": [394, 805], "meta": [398, 399, 400, 401, 402, 403, 552], "has_multiple_output": 398, "is_regex_project": 399, "output_nam": 400, "pop": 401, "root_nam": 402, "undo_alias": 403, "mode": [405, 810], "nan_max": [407, 814], "nan_min": [408, 815], "over": 410, "pct_chang": [411, 818], "pow": 413, "prefix": 414, "rank": [417, 824], "reinterpret": [419, 826], "repeat_bi": 420, "reshap": [421, 828], "rolling_appli": [423, 830], "rolling_max": [424, 831], "rolling_mean": [425, 832], "rolling_median": [426, 833], "rolling_min": [427, 834], "rolling_quantil": [428, 835], "rolling_skew": [429, 836], "rolling_std": [430, 837], "rolling_sum": [431, 838], "rolling_var": [432, 839], "search_sort": [435, 842], "set_sort": [436, 846], "shrink_dtyp": [439, 850], "shuffl": [440, 852], "sign": [441, 853], "sin": [442, 854], "sinh": [443, 855], "skew": [444, 856], "sort_bi": 447, "sqrt": [448, 859], "str": [450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891], "extract": [457, 869], "extract_al": [458, 870], "json_extract": [459, 871], "json_path_match": [460, 872], "ljust": [462, 874], "lstrip": [463, 875], "n_char": [464, 876], "parse_int": [465, 877], "replace_al": [467, 879], "rjust": [468, 880], "rstrip": [469, 881], "split": [471, 883], "split_exact": [472, 884], "splitn": [473, 885], "strip": [475, 887], "strptime": [476, 888], "to_lowercas": [477, 889], "to_uppercas": [478, 890], "zfill": [479, 891], "field": [480, 892, 893], "rename_field": [481, 894], "suffix": 482, "tan": [487, 900], "tanh": [488, 901], "to_phys": [489, 909], "unique_count": [492, 912], "upper_bound": [493, 913], "value_count": [494, 914], "where": 496, "arang": 500, "arg_sort_bi": 501, "avg": 502, "coalesc": 503, "col": 504, "concat_list": 505, "concat_str": 506, "cov": 509, "cumfold": 510, "cumreduc": 511, "element": 516, "format": 520, "from_epoch": 521, "group": 522, "lit": 525, "pearson_corr": 532, "reduc": 534, "repeat": 535, "spearman_rank_corr": 537, "when": 543, "categori": [546, 921], "name": [547, 813], "express": 550, "string": [555, 929], "window": 558, "convers": 559, "eager": 559, "parallel": 559, "refer": 560, "input": 561, "output": 561, "feather": 561, "ipc": 561, "parquet": 561, "databas": 561, "json": 561, "avro": 561, "excel": 561, "delta": 561, "lake": 561, "dataset": 561, "lazyfram": [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 644], "cach": 563, "collect": 566, "explain": 571, "fetch": 573, "from_json": 578, "profil": 598, "show_graph": 607, "sink_ipc": 608, "sink_parquet": 609, "with_context": 623, "lazygroupbi": [626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "read": 645, "write": 645, "logic": 645, "plan": 645, "chunk_length": 702, "flag": 771, "get_chunk": 773, "has_valid": 774, "hist": 777, "inner_dtyp": 778, "is_boolean": 781, "is_float": 786, "is_numer": 793, "is_sort": 794, "is_tempor": 795, "is_utf8": 797, "new_from_index": 816, "peak_max": 819, "peak_min": 820, "qcut": 822, "series_equ": 843, "set": 844, "set_at_idx": 845, "time_unit": 902, "to_fram": 905, "to_list": 906, "view": 916, "zip_with": 917, "sql": 932, "method": 932, "assert": 933, "properti": 933, "base": 933, "strategi": 933, "helper": 933, "util": 934}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.Datetime": [[36, "polars-datetime"]], "polars.Int64": [[43, "polars-int64"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.Float32": [[39, "polars-float32"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.Struct": [[52, "polars-struct"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.DataType": [[34, "polars-datatype"]], "polars.api.register_lazyframe_namespace": [[63, "polars-api-register-lazyframe-namespace"]], "polars.List": [[45, "polars-list"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Binary": [[2, "polars-binary"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.arg_where": [[65, "polars-arg-where"]], "polars.api.register_dataframe_namespace": [[61, "polars-api-register-dataframe-namespace"]], "polars.build_info": [[66, "polars-build-info"]], "polars.Duration": [[38, "polars-duration"]], "polars.Int8": [[44, "polars-int8"]], "polars.Time": [[53, "polars-time"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.Utf8": [[59, "polars-utf8"]], "polars.UInt16": [[54, "polars-uint16"]], "polars.collect_all": [[67, "polars-collect-all"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.Int16": [[41, "polars-int16"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Float64": [[40, "polars-float64"]], "polars.StringCache": [[51, "polars-stringcache"]], "polars.Unknown": [[58, "polars-unknown"]], "polars.UInt8": [[57, "polars-uint8"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.UInt32": [[55, "polars-uint32"]], "polars.api.register_expr_namespace": [[62, "polars-api-register-expr-namespace"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.api.register_series_namespace": [[64, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Null": [[46, "polars-null"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.UInt64": [[56, "polars-uint64"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Object": [[47, "polars-object"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.Int32": [[42, "polars-int32"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.align_frames": [[60, "polars-align-frames"]], "polars.Date": [[35, "polars-date"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.read_csv": [[97, "polars-read-csv"]], "polars.exceptions.ComputeError": [[73, "polars-exceptions-computeerror"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[94, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_ndjson": [[105, "polars-read-ndjson"]], "polars.zeros": [[123, "polars-zeros"]], "polars.testing.assert_series_equal": [[116, "polars-testing-assert-series-equal"]], "polars.testing.parametric.column": [[117, "polars-testing-parametric-column"]], "polars.exceptions.NoDataError": [[76, "polars-exceptions-nodataerror"]], "polars.from_dicts": [[88, "polars-from-dicts"]], "Aggregation": [[125, "aggregation"], [647, "aggregation"], [562, "aggregation"], [248, "aggregation"]], "polars.read_parquet_schema": [[107, "polars-read-parquet-schema"]], "polars.scan_delta": [[109, "polars-scan-delta"]], "polars.read_delta": [[100, "polars-read-delta"]], "polars.get_index_type": [[93, "polars-get-index-type"]], "polars.toggle_string_cache": [[122, "polars-toggle-string-cache"]], "polars.exceptions.SchemaError": [[80, "polars-exceptions-schemaerror"]], "polars.ones": [[95, "polars-ones"]], "polars.from_numpy": [[89, "polars-from-numpy"]], "polars.DataFrame.__dataframe__": [[126, "polars-dataframe-dataframe"]], "polars.DataFrame.columns": [[130, "polars-dataframe-columns"]], "polars.exceptions.ColumnNotFoundError": [[72, "polars-exceptions-columnnotfounderror"]], "polars.DataFrame.apply": [[127, "polars-dataframe-apply"]], "polars.DataFrame.corr": [[131, "polars-dataframe-corr"]], "polars.exceptions.NoRowsReturned": [[77, "polars-exceptions-norowsreturned"]], "polars.testing.assert_frame_equal": [[115, "polars-testing-assert-frame-equal"]], "polars.read_csv_batched": [[98, "polars-read-csv-batched"]], "polars.scan_ipc": [[110, "polars-scan-ipc"]], "polars.exceptions.ShapeError": [[82, "polars-exceptions-shapeerror"]], "polars.read_json": [[104, "polars-read-json"]], "Config": [[124, "config"]], "Config options": [[124, "config-options"]], "Config load, save, and current state": [[124, "config-load-save-and-current-state"]], "Use as a context manager": [[124, "use-as-a-context-manager"]], "polars.DataFrame.clear": [[128, "polars-dataframe-clear"]], "polars.from_dict": [[87, "polars-from-dict"]], "polars.read_excel": [[101, "polars-read-excel"]], "polars.DataFrame.clone": [[129, "polars-dataframe-clone"]], "polars.DataFrame.drop_nulls": [[135, "polars-dataframe-drop-nulls"]], "polars.exceptions.RowsException": [[79, "polars-exceptions-rowsexception"]], "polars.read_parquet": [[106, "polars-read-parquet"]], "polars.read_ipc": [[102, "polars-read-ipc"]], "polars.read_avro": [[96, "polars-read-avro"]], "polars.scan_csv": [[108, "polars-scan-csv"]], "polars.scan_ndjson": [[111, "polars-scan-ndjson"]], "polars.exceptions.DuplicateError": [[74, "polars-exceptions-duplicateerror"]], "polars.from_dataframe": [[86, "polars-from-dataframe"]], "polars.show_versions": [[114, "polars-show-versions"]], "polars.from_records": [[91, "polars-from-records"]], "polars.scan_pyarrow_dataset": [[113, "polars-scan-pyarrow-dataset"]], "polars.from_pandas": [[90, "polars-from-pandas"]], "polars.read_ipc_schema": [[103, "polars-read-ipc-schema"]], "polars.testing.parametric.dataframes": [[119, "polars-testing-parametric-dataframes"]], "polars.DataFrame.describe": [[132, "polars-dataframe-describe"]], "polars.DataFrame.drop_in_place": [[134, "polars-dataframe-drop-in-place"]], "polars.concat": [[68, "polars-concat"]], "polars.exceptions.TooManyRowsReturned": [[84, "polars-exceptions-toomanyrowsreturned"]], "polars.get_dummies": [[92, "polars-get-dummies"]], "polars.cut": [[69, "polars-cut"]], "polars.testing.parametric.series": [[120, "polars-testing-parametric-series"]], "polars.read_database": [[99, "polars-read-database"]], "polars.threadpool_size": [[121, "polars-threadpool-size"]], "polars.exceptions.SchemaFieldNotFoundError": [[81, "polars-exceptions-schemafieldnotfounderror"]], "polars.from_arrow": [[85, "polars-from-arrow"]], "polars.testing.parametric.columns": [[118, "polars-testing-parametric-columns"]], "polars.exceptions.InvalidOperationError": [[75, "polars-exceptions-invalidoperationerror"]], "polars.date_range": [[70, "polars-date-range"]], "polars.exceptions.PanicException": [[78, "polars-exceptions-panicexception"]], "polars.exceptions.ArrowError": [[71, "polars-exceptions-arrowerror"]], "polars.exceptions.StructFieldNotFoundError": [[83, "polars-exceptions-structfieldnotfounderror"]], "polars.scan_parquet": [[112, "polars-scan-parquet"]], "polars.DataFrame.drop": [[133, "polars-dataframe-drop"]], "polars.Series.str.split": [[883, "polars-series-str-split"]], "polars.Series.shuffle": [[852, "polars-series-shuffle"]], "polars.Series.shape": [[847, "polars-series-shape"]], "polars.Series.pct_change": [[818, "polars-series-pct-change"]], "polars.Series.str.json_extract": [[871, "polars-series-str-json-extract"]], "polars.Series.reinterpret": [[826, "polars-series-reinterpret"]], "polars.Series.round": [[840, "polars-series-round"]], "polars.Series.shrink_dtype": [[850, "polars-series-shrink-dtype"]], "polars.Series.str.extract_all": [[870, "polars-series-str-extract-all"]], "polars.Series.peak_min": [[820, "polars-series-peak-min"]], "polars.Series.sqrt": [[859, "polars-series-sqrt"]], "polars.Series.shift": [[848, "polars-series-shift"]], "polars.Series.qcut": [[822, "polars-series-qcut"]], "polars.Series.set_at_idx": [[845, "polars-series-set-at-idx"]], "polars.Series.str.ends_with": [[867, "polars-series-str-ends-with"]], "polars.Series.str.concat": [[862, "polars-series-str-concat"]], "polars.Series.str.extract": [[869, "polars-series-str-extract"]], "polars.Series.quantile": [[823, "polars-series-quantile"]], "polars.Series.product": [[821, "polars-series-product"]], "polars.Series.series_equal": [[843, "polars-series-series-equal"]], "polars.Series.sample": [[841, "polars-series-sample"]], "polars.Series.sign": [[853, "polars-series-sign"]], "polars.Series.std": [[860, "polars-series-std"]], "polars.Series.slice": [[857, "polars-series-slice"]], "polars.Series.str.replace": [[878, "polars-series-str-replace"]], "polars.Series.set": [[844, "polars-series-set"]], "polars.Series.skew": [[856, "polars-series-skew"]], "polars.Series.shift_and_fill": [[849, "polars-series-shift-and-fill"]], "polars.Series.rolling_apply": [[830, "polars-series-rolling-apply"]], "polars.Series.str.n_chars": [[876, "polars-series-str-n-chars"]], "polars.Series.rolling_var": [[839, "polars-series-rolling-var"]], "polars.Series.new_from_index": [[816, "polars-series-new-from-index"]], "polars.Series.rank": [[824, "polars-series-rank"]], "polars.Series.str.json_path_match": [[872, "polars-series-str-json-path-match"]], "polars.Series.sinh": [[855, "polars-series-sinh"]], "polars.Series.rolling_mean": [[832, "polars-series-rolling-mean"]], "polars.Series.rechunk": [[825, "polars-series-rechunk"]], "polars.Series.rolling_std": [[837, "polars-series-rolling-std"]], "polars.Series.shrink_to_fit": [[851, "polars-series-shrink-to-fit"]], "polars.Series.sort": [[858, "polars-series-sort"]], "polars.Series.str.parse_int": [[877, "polars-series-str-parse-int"]], "polars.Series.str.slice": [[882, "polars-series-str-slice"]], "polars.Series.sin": [[854, "polars-series-sin"]], "polars.Series.str.rjust": [[880, "polars-series-str-rjust"]], "polars.Series.str.rstrip": [[881, "polars-series-str-rstrip"]], "polars.Series.str.explode": [[868, "polars-series-str-explode"]], "polars.Series.reverse": [[829, "polars-series-reverse"]], "polars.Series.str.replace_all": [[879, "polars-series-str-replace-all"]], "polars.Series.str.lengths": [[873, "polars-series-str-lengths"]], "polars.Series.rolling_min": [[834, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[835, "polars-series-rolling-quantile"]], "polars.Series.search_sorted": [[842, "polars-series-search-sorted"]], "polars.Series.str.ljust": [[874, "polars-series-str-ljust"]], "polars.Series.set_sorted": [[846, "polars-series-set-sorted"]], "polars.Series.str.lstrip": [[875, "polars-series-str-lstrip"]], "polars.Series.str.contains": [[863, "polars-series-str-contains"]], "polars.Series.rolling_sum": [[838, "polars-series-rolling-sum"]], "polars.Series.str.count_match": [[864, "polars-series-str-count-match"]], "polars.Series.rolling_max": [[831, "polars-series-rolling-max"]], "polars.Series.rolling_median": [[833, "polars-series-rolling-median"]], "polars.Series.str.decode": [[865, "polars-series-str-decode"]], "polars.Series.rename": [[827, "polars-series-rename"]], "polars.Series.reshape": [[828, "polars-series-reshape"]], "polars.Series.str": [[861, "polars-series-str"]], "polars.Series.peak_max": [[819, "polars-series-peak-max"]], "polars.Series.null_count": [[817, "polars-series-null-count"]], "polars.Series.str.encode": [[866, "polars-series-str-encode"]], "polars.Series.rolling_skew": [[836, "polars-series-rolling-skew"]], "polars.Series.mean": [[807, "polars-series-mean"]], "polars.Series.dt.timestamp": [[753, "polars-series-dt-timestamp"]], "polars.Series.n_unique": [[812, "polars-series-n-unique"]], "polars.Series.kurtosis": [[799, "polars-series-kurtosis"]], "polars.Series.nan_min": [[815, "polars-series-nan-min"]], "polars.Series.get_chunks": [[773, "polars-series-get-chunks"]], "polars.Series.limit": [[801, "polars-series-limit"]], "polars.Series.ewm_std": [[763, "polars-series-ewm-std"]], "polars.Series.map_dict": [[805, "polars-series-map-dict"]], "polars.Series.dt.replace_time_zone": [[748, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.second": [[750, "polars-series-dt-second"]], "polars.Series.dt.weekday": [[756, "polars-series-dt-weekday"]], "polars.Series.nan_max": [[814, "polars-series-nan-max"]], "polars.Series.is_utf8": [[797, "polars-series-is-utf8"]], "polars.Series.is_duplicated": [[782, "polars-series-is-duplicated"]], "polars.Series.min": [[809, "polars-series-min"]], "polars.Series.is_finite": [[784, "polars-series-is-finite"]], "polars.Series.n_chunks": [[811, "polars-series-n-chunks"]], "polars.Series.hash": [[775, "polars-series-hash"]], "polars.Series.inner_dtype": [[778, "polars-series-inner-dtype"]], "polars.Series.dt.truncate": [[754, "polars-series-dt-truncate"]], "polars.Series.has_validity": [[774, "polars-series-has-validity"]], "polars.Series.is_first": [[785, "polars-series-is-first"]], "polars.Series.extend_constant": [[767, "polars-series-extend-constant"]], "polars.Series.item": [[798, "polars-series-item"]], "polars.Series.filter": [[770, "polars-series-filter"]], "polars.Series.entropy": [[760, "polars-series-entropy"]], "polars.Series.explode": [[766, "polars-series-explode"]], "polars.Series.is_float": [[786, "polars-series-is-float"]], "polars.Series.flags": [[771, "polars-series-flags"]], "polars.Series.head": [[776, "polars-series-head"]], "polars.Series.is_temporal": [[795, "polars-series-is-temporal"]], "polars.Series.interpolate": [[779, "polars-series-interpolate"]], "polars.Series.fill_null": [[769, "polars-series-fill-null"]], "polars.Series.mode": [[810, "polars-series-mode"]], "polars.Series.is_sorted": [[794, "polars-series-is-sorted"]], "polars.Series.median": [[808, "polars-series-median"]], "polars.Series.fill_nan": [[768, "polars-series-fill-nan"]], "polars.Series.is_in": [[787, "polars-series-is-in"]], "polars.Series.is_infinite": [[788, "polars-series-is-infinite"]], "polars.Series.hist": [[777, "polars-series-hist"]], "polars.Series.exp": [[765, "polars-series-exp"]], "polars.Series.is_null": [[792, "polars-series-is-null"]], "polars.Series.dt.seconds": [[751, "polars-series-dt-seconds"]], "polars.Series.floor": [[772, "polars-series-floor"]], "polars.Series.is_unique": [[796, "polars-series-is-unique"]], "polars.Series.name": [[813, "polars-series-name"]], "polars.Series.dtype": [[759, "polars-series-dtype"]], "polars.Series.dt.strftime": [[752, "polars-series-dt-strftime"]], "polars.Series.is_empty": [[783, "polars-series-is-empty"]], "polars.Series.dt.week": [[755, "polars-series-dt-week"]], "polars.Series.is_boolean": [[781, "polars-series-is-boolean"]], "polars.Series.is_between": [[780, "polars-series-is-between"]], "polars.Series.estimated_size": [[761, "polars-series-estimated-size"]], "polars.Series.max": [[806, "polars-series-max"]], "polars.Series.dt.year": [[758, "polars-series-dt-year"]], "polars.Series.log10": [[803, "polars-series-log10"]], "polars.Series.is_nan": [[789, "polars-series-is-nan"]], "polars.Series.is_numeric": [[793, "polars-series-is-numeric"]], "polars.Series.log": [[802, "polars-series-log"]], "polars.Series.lower_bound": [[804, "polars-series-lower-bound"]], "polars.Series.is_not_null": [[791, "polars-series-is-not-null"]], "polars.Series.dt.with_time_unit": [[757, "polars-series-dt-with-time-unit"]], "polars.Series.dt.round": [[749, "polars-series-dt-round"]], "polars.Series.ewm_mean": [[762, "polars-series-ewm-mean"]], "polars.Series.len": [[800, "polars-series-len"]], "polars.Series.is_not_nan": [[790, "polars-series-is-not-nan"]], "polars.Series.ewm_var": [[764, "polars-series-ewm-var"]], "polars.Series.dt.month": [[742, "polars-series-dt-month"]], "polars.Series.arr.shift": [[685, "polars-series-arr-shift"]], "polars.Series.dt.min": [[739, "polars-series-dt-min"]], "polars.Series.cumulative_eval": [[714, "polars-series-cumulative-eval"]], "polars.Series.arr.mean": [[682, "polars-series-arr-mean"]], "polars.Series.dt.epoch": [[727, "polars-series-dt-epoch"]], "polars.Series.arr.lengths": [[680, "polars-series-arr-lengths"]], "polars.Series.describe": [[716, "polars-series-describe"]], "polars.Series.dt.quarter": [[747, "polars-series-dt-quarter"]], "polars.Series.ceil": [[701, "polars-series-ceil"]], "polars.Series.dt.days": [[726, "polars-series-dt-days"]], "polars.Series.clear": [[703, "polars-series-clear"]], "polars.Series.cast": [[698, "polars-series-cast"]], "polars.Series.arr.to_struct": [[691, "polars-series-arr-to-struct"]], "polars.Series.arr.min": [[683, "polars-series-arr-min"]], "polars.Series.diff": [[717, "polars-series-diff"]], "polars.Series.arr.sum": [[688, "polars-series-arr-sum"]], "polars.Series.cummax": [[710, "polars-series-cummax"]], "polars.Series.dt.max": [[732, "polars-series-dt-max"]], "polars.Series.dt.minutes": [[741, "polars-series-dt-minutes"]], "polars.Series.arr.take": [[690, "polars-series-arr-take"]], "polars.Series.dot": [[718, "polars-series-dot"]], "polars.Series.clip": [[704, "polars-series-clip"]], "polars.Series.dt.cast_time_unit": [[722, "polars-series-dt-cast-time-unit"]], "polars.Series.bin.starts_with": [[697, "polars-series-bin-starts-with"]], "polars.Series.dt.combine": [[723, "polars-series-dt-combine"]], "polars.Series.dt.hour": [[728, "polars-series-dt-hour"]], "polars.Series.dt.iso_year": [[731, "polars-series-dt-iso-year"]], "polars.Series.dt.mean": [[733, "polars-series-dt-mean"]], "polars.Series.dt.nanoseconds": [[744, "polars-series-dt-nanoseconds"]], "polars.Series.arr.tail": [[689, "polars-series-arr-tail"]], "polars.Series.bin.encode": [[695, "polars-series-bin-encode"]], "polars.Series.bin.ends_with": [[696, "polars-series-bin-ends-with"]], "polars.Series.cosh": [[709, "polars-series-cosh"]], "polars.Series.clone": [[707, "polars-series-clone"]], "polars.Series.cumprod": [[712, "polars-series-cumprod"]], "polars.Series.cumsum": [[713, "polars-series-cumsum"]], "polars.Series.drop_nulls": [[720, "polars-series-drop-nulls"]], "polars.Series.dt.convert_time_zone": [[724, "polars-series-dt-convert-time-zone"]], "polars.Series.clip_min": [[706, "polars-series-clip-min"]], "polars.Series.bin.contains": [[693, "polars-series-bin-contains"]], "polars.Series.dt.hours": [[729, "polars-series-dt-hours"]], "polars.Series.dt.is_leap_year": [[730, "polars-series-dt-is-leap-year"]], "polars.Series.dt.minute": [[740, "polars-series-dt-minute"]], "polars.Series.arr.slice": [[686, "polars-series-arr-slice"]], "polars.Series.dt.nanosecond": [[743, "polars-series-dt-nanosecond"]], "polars.Series.cat": [[699, "polars-series-cat"]], "polars.Series.cut": [[715, "polars-series-cut"]], "polars.Series.arr.sort": [[687, "polars-series-arr-sort"]], "polars.Series.bin.decode": [[694, "polars-series-bin-decode"]], "polars.Series.dt.ordinal_day": [[746, "polars-series-dt-ordinal-day"]], "polars.Series.dt.median": [[734, "polars-series-dt-median"]], "polars.Series.dt.milliseconds": [[738, "polars-series-dt-milliseconds"]], "polars.Series.drop_nans": [[719, "polars-series-drop-nans"]], "polars.Series.arr.max": [[681, "polars-series-arr-max"]], "polars.Series.dt.microsecond": [[735, "polars-series-dt-microsecond"]], "polars.Series.dt.day": [[725, "polars-series-dt-day"]], "polars.Series.cummin": [[711, "polars-series-cummin"]], "polars.Series.chunk_lengths": [[702, "polars-series-chunk-lengths"]], "polars.Series.cat.set_ordering": [[700, "polars-series-cat-set-ordering"]], "polars.Series.cos": [[708, "polars-series-cos"]], "polars.Series.dt": [[721, "polars-series-dt"]], "polars.Series.dt.microseconds": [[736, "polars-series-dt-microseconds"]], "polars.Series.dt.millisecond": [[737, "polars-series-dt-millisecond"]], "polars.Series.dt.offset_by": [[745, "polars-series-dt-offset-by"]], "polars.Series.arr.unique": [[692, "polars-series-arr-unique"]], "polars.Series.arr.reverse": [[684, "polars-series-arr-reverse"]], "polars.Series.clip_max": [[705, "polars-series-clip-max"]], "polars.Series.tanh": [[901, "polars-series-tanh"]], "polars.Series.time_unit": [[902, "polars-series-time-unit"]], "polars.Series.to_pandas": [[908, "polars-series-to-pandas"]], "polars.Series.to_dummies": [[904, "polars-series-to-dummies"]], "polars.Series.value_counts": [[914, "polars-series-value-counts"]], "polars.Series.struct.rename_fields": [[894, "polars-series-struct-rename-fields"]], "polars.Series.tan": [[900, "polars-series-tan"]], "polars.Series.to_frame": [[905, "polars-series-to-frame"]], "List": [[926, "list"], [551, "list"]], "polars.Series.str.split_exact": [[884, "polars-series-str-split-exact"]], "polars.Series.struct.fields": [[893, "polars-series-struct-fields"]], "polars.Series.upper_bound": [[913, "polars-series-upper-bound"]], "Boolean": [[920, "boolean"], [545, "boolean"]], "polars.Series.take": [[898, "polars-series-take"]], "Utils": [[934, "utils"]], "polars.Series.str.starts_with": [[886, "polars-series-str-starts-with"]], "Binary": [[919, "binary"], [544, "binary"]], "String": [[929, "string"], [555, "string"]], "polars.Series.str.zfill": [[891, "polars-series-str-zfill"]], "polars.Series.str.to_uppercase": [[890, "polars-series-str-to-uppercase"]], "polars.Series.str.splitn": [[885, "polars-series-str-splitn"]], "polars.Series.unique_counts": [[912, "polars-series-unique-counts"]], "Descriptive": [[923, "descriptive"], [642, "descriptive"], [240, "descriptive"]], "polars.Series.top_k": [[910, "polars-series-top-k"]], "Computation": [[922, "computation"], [548, "computation"], [239, "computation"]], "polars.Series.str.strptime": [[888, "polars-series-str-strptime"]], "polars.Series.sum": [[896, "polars-series-sum"]], "polars.Series.view": [[916, "polars-series-view"]], "polars.Series.str.to_lowercase": [[889, "polars-series-str-to-lowercase"]], "polars.Series.unique": [[911, "polars-series-unique"]], "polars.Series.struct.field": [[892, "polars-series-struct-field"]], "polars.Series.tail": [[897, "polars-series-tail"]], "polars.Series.to_list": [[906, "polars-series-to-list"]], "polars.Series.zip_with": [[917, "polars-series-zip-with"]], "polars.Series.to_numpy": [[907, "polars-series-to-numpy"]], "polars.Series.str.strip": [[887, "polars-series-str-strip"]], "Manipulation/selection": [[928, "manipulation-selection"], [646, "manipulation-selection"], [554, "manipulation-selection"], [245, "manipulation-selection"]], "Testing": [[933, "testing"]], "Asserts": [[933, "asserts"]], "Property-based testing": [[933, "property-based-testing"]], "Strategies": [[933, "strategies"]], "Strategy helpers": [[933, "strategy-helpers"]], "polars.Series.to_arrow": [[903, "polars-series-to-arrow"]], "Categories": [[921, "categories"], [546, "categories"]], "Struct": [[930, "struct"], [556, "struct"]], "Series": [[925, "series"]], "polars.Series.var": [[915, "polars-series-var"]], "Attributes": [[918, "attributes"], [641, "attributes"], [238, "attributes"]], "Export": [[924, "export"], [241, "export"]], "Miscellaneous": [[927, "miscellaneous"], [645, "miscellaneous"], [559, "miscellaneous"], [553, "miscellaneous"], [244, "miscellaneous"]], "Temporal": [[931, "temporal"], [557, "temporal"], [246, "temporal"]], "polars.Series.to_physical": [[909, "polars-series-to-physical"]], "SQL": [[932, "sql"]], "Methods": [[932, "methods"]], "polars.Series.take_every": [[899, "polars-series-take-every"]], "polars.Series.struct.unnest": [[895, "polars-series-struct-unnest"]], "polars.LazyFrame.unique": [[617, "polars-lazyframe-unique"]], "polars.Series.arctan": [[658, "polars-series-arctan"]], "polars.LazyFrame.with_row_count": [[624, "polars-lazyframe-with-row-count"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[639, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.arcsinh": [[657, "polars-series-arcsinh"]], "polars.Series.arr.join": [[678, "polars-series-arr-join"]], "polars.Series.arr.diff": [[672, "polars-series-arr-diff"]], "polars.LazyFrame.top_k": [[616, "polars-lazyframe-top-k"]], "polars.LazyFrame.take_every": [[615, "polars-lazyframe-take-every"]], "Read/write logical plan": [[645, "read-write-logical-plan"]], "polars.Series.arg_sort": [[662, "polars-series-arg-sort"]], "polars.Series.arr.eval": [[673, "polars-series-arr-eval"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[633, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.Series.arccos": [[654, "polars-series-arccos"]], "polars.LazyFrame.unnest": [[618, "polars-lazyframe-unnest"]], "polars.LazyFrame.width": [[621, "polars-lazyframe-width"]], "polars.Series.any": [[651, "polars-series-any"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[628, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.all": [[650, "polars-series-all"]], "polars.Series.arr.contains": [[670, "polars-series-arr-contains"]], "polars.Series.abs": [[648, "polars-series-abs"]], "polars.LazyFrame.write_json": [[625, "polars-lazyframe-write-json"]], "polars.Series.arr": [[666, "polars-series-arr"]], "polars.Series.arr.concat": [[669, "polars-series-arr-concat"]], "LazyFrame": [[644, "lazyframe"]], "polars.Series.arg_unique": [[664, "polars-series-arg-unique"]], "polars.LazyFrame.with_columns": [[622, "polars-lazyframe-with-columns"]], "polars.Series.arcsin": [[656, "polars-series-arcsin"]], "polars.LazyFrame.std": [[612, "polars-lazyframe-std"]], "polars.Series.arr.get": [[676, "polars-series-arr-get"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[631, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.Series.arg_true": [[663, "polars-series-arg-true"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[626, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[638, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.alias": [[649, "polars-series-alias"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[640, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arr.arg_min": [[668, "polars-series-arr-arg-min"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[637, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.arg_max": [[660, "polars-series-arg-max"]], "polars.Series.arg_min": [[661, "polars-series-arg-min"]], "polars.Series.apply": [[653, "polars-series-apply"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[629, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.sum": [[613, "polars-lazyframe-sum"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[635, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[636, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.tail": [[614, "polars-lazyframe-tail"]], "polars.Series.arr.explode": [[674, "polars-series-arr-explode"]], "polars.Series.arr.head": [[677, "polars-series-arr-head"]], "polars.LazyFrame.update": [[619, "polars-lazyframe-update"]], "polars.LazyFrame.var": [[620, "polars-lazyframe-var"]], "polars.Series.arr.arg_max": [[667, "polars-series-arr-arg-max"]], "polars.Series.append": [[652, "polars-series-append"]], "polars.LazyFrame.with_context": [[623, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[627, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.Series.arctanh": [[659, "polars-series-arctanh"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[632, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.Series.arccosh": [[655, "polars-series-arccosh"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[634, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.arr.first": [[675, "polars-series-arr-first"]], "polars.Series.argsort": [[665, "polars-series-argsort"]], "GroupBy": [[643, "groupby"], [242, "groupby"]], "polars.Series.arr.last": [[679, "polars-series-arr-last"]], "polars.Series.arr.count_match": [[671, "polars-series-arr-count-match"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[630, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.mean": [[528, "polars-mean"]], "polars.select": [[536, "polars-select"]], "polars.datetime": [[514, "polars-datetime"]], "polars.cumreduce": [[511, "polars-cumreduce"]], "polars.arg_sort_by": [[501, "polars-arg-sort-by"]], "polars.any": [[498, "polars-any"]], "polars.coalesce": [[503, "polars-coalesce"]], "polars.Expr.take_every": [[486, "polars-expr-take-every"]], "polars.Expr.suffix": [[482, "polars-expr-suffix"]], "polars.concat_str": [[506, "polars-concat-str"]], "polars.count": [[508, "polars-count"]], "polars.Expr.var": [[495, "polars-expr-var"]], "polars.Expr.str.to_uppercase": [[478, "polars-expr-str-to-uppercase"]], "polars.duration": [[515, "polars-duration"]], "polars.fold": [[519, "polars-fold"]], "polars.from_epoch": [[521, "polars-from-epoch"]], "polars.median": [[529, "polars-median"]], "polars.Expr.sum": [[483, "polars-expr-sum"]], "polars.avg": [[502, "polars-avg"]], "polars.Expr.str.to_lowercase": [[477, "polars-expr-str-to-lowercase"]], "polars.spearman_rank_corr": [[537, "polars-spearman-rank-corr"]], "polars.struct": [[539, "polars-struct"]], "polars.Expr.str.zfill": [[479, "polars-expr-str-zfill"]], "polars.first": [[518, "polars-first"]], "polars.Expr.top_k": [[490, "polars-expr-top-k"]], "polars.reduce": [[534, "polars-reduce"]], "polars.head": [[523, "polars-head"]], "polars.cumsum": [[512, "polars-cumsum"]], "polars.Expr.tan": [[487, "polars-expr-tan"]], "polars.Expr.unique": [[491, "polars-expr-unique"]], "polars.lit": [[525, "polars-lit"]], "polars.std": [[538, "polars-std"]], "polars.Expr.take": [[485, "polars-expr-take"]], "polars.list": [[524, "polars-list"]], "polars.when": [[543, "polars-when"]], "polars.Expr.tail": [[484, "polars-expr-tail"]], "polars.all": [[497, "polars-all"]], "polars.Expr.value_counts": [[494, "polars-expr-value-counts"]], "polars.min": [[530, "polars-min"]], "polars.pearson_corr": [[532, "polars-pearson-corr"]], "polars.quantile": [[533, "polars-quantile"]], "polars.cov": [[509, "polars-cov"]], "polars.Expr.str.strptime": [[476, "polars-expr-str-strptime"]], "polars.Expr.tanh": [[488, "polars-expr-tanh"]], "polars.tail": [[541, "polars-tail"]], "polars.element": [[516, "polars-element"]], "polars.n_unique": [[531, "polars-n-unique"]], "polars.Expr.upper_bound": [[493, "polars-expr-upper-bound"]], "polars.repeat": [[535, "polars-repeat"]], "polars.var": [[542, "polars-var"]], "polars.concat_list": [[505, "polars-concat-list"]], "polars.exclude": [[517, "polars-exclude"]], "polars.sum": [[540, "polars-sum"]], "polars.Expr.where": [[496, "polars-expr-where"]], "polars.apply": [[499, "polars-apply"]], "polars.cumfold": [[510, "polars-cumfold"]], "polars.Expr.struct.field": [[480, "polars-expr-struct-field"]], "polars.map": [[526, "polars-map"]], "polars.Expr.to_physical": [[489, "polars-expr-to-physical"]], "polars.groups": [[522, "polars-groups"]], "polars.format": [[520, "polars-format"]], "polars.date": [[513, "polars-date"]], "polars.Expr.struct.rename_fields": [[481, "polars-expr-struct-rename-fields"]], "polars.Expr.unique_counts": [[492, "polars-expr-unique-counts"]], "polars.col": [[504, "polars-col"]], "polars.max": [[527, "polars-max"]], "polars.arange": [[500, "polars-arange"]], "polars.corr": [[507, "polars-corr"]], "polars.Expr.str.split_exact": [[472, "polars-expr-str-split-exact"]], "polars.Expr.reshape": [[421, "polars-expr-reshape"]], "polars.Expr.str.replace": [[466, "polars-expr-str-replace"]], "polars.Expr.sqrt": [[448, "polars-expr-sqrt"]], "polars.Expr.set_sorted": [[436, "polars-expr-set-sorted"]], "polars.Expr.sort_by": [[447, "polars-expr-sort-by"]], "polars.Expr.nan_min": [[408, "polars-expr-nan-min"]], "polars.Expr.str.json_extract": [[459, "polars-expr-str-json-extract"]], "polars.Expr.pct_change": [[411, "polars-expr-pct-change"]], "polars.Expr.str.rjust": [[468, "polars-expr-str-rjust"]], "polars.Expr.str.ljust": [[462, "polars-expr-str-ljust"]], "polars.Expr.product": [[415, "polars-expr-product"]], "polars.Expr.search_sorted": [[435, "polars-expr-search-sorted"]], "polars.Expr.str.count_match": [[452, "polars-expr-str-count-match"]], "polars.Expr.str.encode": [[454, "polars-expr-str-encode"]], "polars.Expr.str.strip": [[475, "polars-expr-str-strip"]], "polars.Expr.rolling_max": [[424, "polars-expr-rolling-max"]], "polars.Expr.rolling_mean": [[425, "polars-expr-rolling-mean"]], "polars.Expr.shift_and_fill": [[438, "polars-expr-shift-and-fill"]], "polars.Expr.str.parse_int": [[465, "polars-expr-str-parse-int"]], "polars.Expr.str.split": [[471, "polars-expr-str-split"]], "polars.Expr.round": [[433, "polars-expr-round"]], "polars.Expr.str.lstrip": [[463, "polars-expr-str-lstrip"]], "polars.Expr.reinterpret": [[419, "polars-expr-reinterpret"]], "polars.Expr.slice": [[445, "polars-expr-slice"]], "polars.Expr.str.extract_all": [[458, "polars-expr-str-extract-all"]], "polars.Expr.str.lengths": [[461, "polars-expr-str-lengths"]], "polars.Expr.str.slice": [[470, "polars-expr-str-slice"]], "polars.Expr.str.explode": [[456, "polars-expr-str-explode"]], "polars.Expr.str.extract": [[457, "polars-expr-str-extract"]], "polars.Expr.shrink_dtype": [[439, "polars-expr-shrink-dtype"]], "polars.Expr.str.concat": [[450, "polars-expr-str-concat"]], "polars.Expr.rank": [[417, "polars-expr-rank"]], "polars.Expr.rolling_median": [[426, "polars-expr-rolling-median"]], "polars.Expr.rolling_apply": [[423, "polars-expr-rolling-apply"]], "polars.Expr.sinh": [[443, "polars-expr-sinh"]], "polars.Expr.sort": [[446, "polars-expr-sort"]], "polars.Expr.str.starts_with": [[474, "polars-expr-str-starts-with"]], "polars.Expr.rolling_min": [[427, "polars-expr-rolling-min"]], "polars.Expr.repeat_by": [[420, "polars-expr-repeat-by"]], "polars.Expr.std": [[449, "polars-expr-std"]], "polars.Expr.str.decode": [[453, "polars-expr-str-decode"]], "polars.Expr.str.splitn": [[473, "polars-expr-str-splitn"]], "polars.Expr.str.contains": [[451, "polars-expr-str-contains"]], "polars.Expr.sign": [[441, "polars-expr-sign"]], "polars.Expr.shift": [[437, "polars-expr-shift"]], "polars.Expr.sample": [[434, "polars-expr-sample"]], "polars.Expr.rolling_skew": [[429, "polars-expr-rolling-skew"]], "polars.Expr.reverse": [[422, "polars-expr-reverse"]], "polars.Expr.prefix": [[414, "polars-expr-prefix"]], "polars.Expr.str.rstrip": [[469, "polars-expr-str-rstrip"]], "polars.Expr.rolling_var": [[432, "polars-expr-rolling-var"]], "polars.Expr.rolling_sum": [[431, "polars-expr-rolling-sum"]], "polars.Expr.skew": [[444, "polars-expr-skew"]], "polars.Expr.str.json_path_match": [[460, "polars-expr-str-json-path-match"]], "polars.Expr.rechunk": [[418, "polars-expr-rechunk"]], "polars.Expr.str.n_chars": [[464, "polars-expr-str-n-chars"]], "polars.Expr.str.replace_all": [[467, "polars-expr-str-replace-all"]], "polars.Expr.null_count": [[409, "polars-expr-null-count"]], "polars.Expr.sin": [[442, "polars-expr-sin"]], "polars.Expr.str.ends_with": [[455, "polars-expr-str-ends-with"]], "polars.Expr.shuffle": [[440, "polars-expr-shuffle"]], "polars.Expr.pow": [[413, "polars-expr-pow"]], "polars.Expr.quantile": [[416, "polars-expr-quantile"]], "polars.Expr.pipe": [[412, "polars-expr-pipe"]], "polars.Expr.rolling_quantile": [[428, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_std": [[430, "polars-expr-rolling-std"]], "polars.Expr.over": [[410, "polars-expr-over"]], "polars.Expr.dt.quarter": [[340, "polars-expr-dt-quarter"]], "polars.Expr.dt.weekday": [[349, "polars-expr-dt-weekday"]], "polars.Expr.len": [[386, "polars-expr-len"]], "polars.Expr.map": [[392, "polars-expr-map"]], "polars.Expr.dt.round": [[342, "polars-expr-dt-round"]], "polars.Expr.keep_name": [[383, "polars-expr-keep-name"]], "polars.Expr.min": [[404, "polars-expr-min"]], "polars.Expr.dt.timestamp": [[346, "polars-expr-dt-timestamp"]], "polars.Expr.interpolate": [[370, "polars-expr-interpolate"]], "polars.Expr.dt.strftime": [[345, "polars-expr-dt-strftime"]], "polars.Expr.entropy": [[352, "polars-expr-entropy"]], "polars.Expr.map_dict": [[394, "polars-expr-map-dict"]], "polars.Expr.mode": [[405, "polars-expr-mode"]], "polars.Expr.extend_constant": [[359, "polars-expr-extend-constant"]], "polars.Expr.meta.output_name": [[400, "polars-expr-meta-output-name"]], "polars.Expr.is_in": [[375, "polars-expr-is-in"]], "polars.Expr.fill_nan": [[360, "polars-expr-fill-nan"]], "polars.Expr.mean": [[396, "polars-expr-mean"]], "polars.Expr.meta.root_names": [[402, "polars-expr-meta-root-names"]], "polars.Expr.median": [[397, "polars-expr-median"]], "polars.Expr.dt.week": [[348, "polars-expr-dt-week"]], "polars.Expr.is_unique": [[382, "polars-expr-is-unique"]], "polars.Expr.n_unique": [[406, "polars-expr-n-unique"]], "polars.Expr.kurtosis": [[384, "polars-expr-kurtosis"]], "polars.Expr.limit": [[387, "polars-expr-limit"]], "polars.Expr.meta.has_multiple_outputs": [[398, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.ewm_std": [[354, "polars-expr-ewm-std"]], "polars.Expr.is_finite": [[373, "polars-expr-is-finite"]], "polars.Expr.dt.second": [[343, "polars-expr-dt-second"]], "polars.Expr.is_not": [[378, "polars-expr-is-not"]], "polars.Expr.is_nan": [[377, "polars-expr-is-nan"]], "polars.Expr.nan_max": [[407, "polars-expr-nan-max"]], "polars.Expr.is_infinite": [[376, "polars-expr-is-infinite"]], "polars.Expr.exclude": [[356, "polars-expr-exclude"]], "polars.Expr.is_not_nan": [[379, "polars-expr-is-not-nan"]], "polars.Expr.dt.with_time_unit": [[350, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.truncate": [[347, "polars-expr-dt-truncate"]], "polars.Expr.is_between": [[371, "polars-expr-is-between"]], "polars.Expr.log": [[389, "polars-expr-log"]], "polars.Expr.list": [[388, "polars-expr-list"]], "polars.Expr.meta.undo_aliases": [[403, "polars-expr-meta-undo-aliases"]], "polars.Expr.filter": [[362, "polars-expr-filter"]], "polars.Expr.is_first": [[374, "polars-expr-is-first"]], "polars.Expr.inspect": [[369, "polars-expr-inspect"]], "polars.Expr.head": [[368, "polars-expr-head"]], "polars.Expr.meta.pop": [[401, "polars-expr-meta-pop"]], "polars.Expr.last": [[385, "polars-expr-last"]], "polars.Expr.map_alias": [[393, "polars-expr-map-alias"]], "polars.Expr.floor": [[365, "polars-expr-floor"]], "polars.Expr.is_duplicated": [[372, "polars-expr-is-duplicated"]], "polars.Expr.dt.year": [[351, "polars-expr-dt-year"]], "polars.Expr.hash": [[367, "polars-expr-hash"]], "polars.Expr.dt.replace_time_zone": [[341, "polars-expr-dt-replace-time-zone"]], "polars.Expr.forward_fill": [[366, "polars-expr-forward-fill"]], "polars.Expr.exp": [[357, "polars-expr-exp"]], "polars.Expr.flatten": [[364, "polars-expr-flatten"]], "polars.Expr.dt.seconds": [[344, "polars-expr-dt-seconds"]], "polars.Expr.log10": [[390, "polars-expr-log10"]], "polars.Expr.explode": [[358, "polars-expr-explode"]], "polars.Expr.is_not_null": [[380, "polars-expr-is-not-null"]], "polars.Expr.ewm_mean": [[353, "polars-expr-ewm-mean"]], "polars.Expr.meta.is_regex_projection": [[399, "polars-expr-meta-is-regex-projection"]], "polars.Expr.max": [[395, "polars-expr-max"]], "polars.Expr.is_null": [[381, "polars-expr-is-null"]], "polars.Expr.fill_null": [[361, "polars-expr-fill-null"]], "polars.Expr.first": [[363, "polars-expr-first"]], "polars.Expr.lower_bound": [[391, "polars-expr-lower-bound"]], "polars.Expr.ewm_var": [[355, "polars-expr-ewm-var"]], "polars.Expr.cumulative_eval": [[314, "polars-expr-cumulative-eval"]], "polars.Expr.clip_min": [[305, "polars-expr-clip-min"]], "polars.Expr.cumcount": [[309, "polars-expr-cumcount"]], "polars.Expr.cos": [[306, "polars-expr-cos"]], "polars.Expr.arr.first": [[276, "polars-expr-arr-first"]], "polars.Expr.cosh": [[307, "polars-expr-cosh"]], "polars.Expr.cat.set_ordering": [[301, "polars-expr-cat-set-ordering"]], "polars.Expr.arr.tail": [[290, "polars-expr-arr-tail"]], "polars.Expr.arr.lengths": [[281, "polars-expr-arr-lengths"]], "polars.Expr.dt.combine": [[320, "polars-expr-dt-combine"]], "polars.Expr.dt.nanoseconds": [[337, "polars-expr-dt-nanoseconds"]], "polars.Expr.drop_nulls": [[318, "polars-expr-drop-nulls"]], "polars.Expr.dt.cast_time_unit": [[319, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.reverse": [[285, "polars-expr-arr-reverse"]], "polars.Expr.arr.explode": [[275, "polars-expr-arr-explode"]], "polars.Expr.cummin": [[311, "polars-expr-cummin"]], "polars.Expr.backward_fill": [[294, "polars-expr-backward-fill"]], "polars.Expr.bin.encode": [[297, "polars-expr-bin-encode"]], "polars.Expr.drop_nans": [[317, "polars-expr-drop-nans"]], "polars.Expr.clip": [[303, "polars-expr-clip"]], "polars.Expr.dt.offset_by": [[338, "polars-expr-dt-offset-by"]], "polars.Expr.dt.hour": [[325, "polars-expr-dt-hour"]], "polars.Expr.dt.month": [[335, "polars-expr-dt-month"]], "polars.Expr.cumprod": [[312, "polars-expr-cumprod"]], "polars.Expr.arr.head": [[278, "polars-expr-arr-head"]], "polars.Expr.cast": [[300, "polars-expr-cast"]], "polars.Expr.count": [[308, "polars-expr-count"]], "polars.Expr.arr.join": [[279, "polars-expr-arr-join"]], "polars.Expr.cumsum": [[313, "polars-expr-cumsum"]], "polars.Expr.dt.epoch": [[324, "polars-expr-dt-epoch"]], "polars.Expr.dt.microsecond": [[329, "polars-expr-dt-microsecond"]], "polars.Expr.dt.iso_year": [[328, "polars-expr-dt-iso-year"]], "polars.Expr.arr.shift": [[286, "polars-expr-arr-shift"]], "polars.Expr.arr.to_struct": [[292, "polars-expr-arr-to-struct"]], "polars.Expr.arr.min": [[284, "polars-expr-arr-min"]], "polars.Expr.arr.sum": [[289, "polars-expr-arr-sum"]], "polars.Expr.arr.unique": [[293, "polars-expr-arr-unique"]], "polars.Expr.arr.count_match": [[272, "polars-expr-arr-count-match"]], "polars.Expr.dt.convert_time_zone": [[321, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.days": [[323, "polars-expr-dt-days"]], "polars.Expr.arr.last": [[280, "polars-expr-arr-last"]], "polars.Expr.dt.hours": [[326, "polars-expr-dt-hours"]], "polars.Expr.dot": [[316, "polars-expr-dot"]], "polars.Expr.dt.microseconds": [[330, "polars-expr-dt-microseconds"]], "polars.Expr.dt.minutes": [[334, "polars-expr-dt-minutes"]], "polars.Expr.arr.slice": [[287, "polars-expr-arr-slice"]], "polars.Expr.bin.contains": [[295, "polars-expr-bin-contains"]], "polars.Expr.arr.mean": [[283, "polars-expr-arr-mean"]], "polars.Expr.arr.max": [[282, "polars-expr-arr-max"]], "polars.Expr.bin.ends_with": [[298, "polars-expr-bin-ends-with"]], "polars.Expr.bin.decode": [[296, "polars-expr-bin-decode"]], "polars.Expr.dt.day": [[322, "polars-expr-dt-day"]], "polars.Expr.dt.minute": [[333, "polars-expr-dt-minute"]], "polars.Expr.dt.is_leap_year": [[327, "polars-expr-dt-is-leap-year"]], "polars.Expr.arr.eval": [[274, "polars-expr-arr-eval"]], "polars.Expr.cummax": [[310, "polars-expr-cummax"]], "polars.Expr.clip_max": [[304, "polars-expr-clip-max"]], "polars.Expr.arr.sort": [[288, "polars-expr-arr-sort"]], "polars.Expr.bin.starts_with": [[299, "polars-expr-bin-starts-with"]], "polars.Expr.arr.get": [[277, "polars-expr-arr-get"]], "polars.Expr.arr.take": [[291, "polars-expr-arr-take"]], "polars.Expr.dt.millisecond": [[331, "polars-expr-dt-millisecond"]], "polars.Expr.ceil": [[302, "polars-expr-ceil"]], "polars.Expr.dt.nanosecond": [[336, "polars-expr-dt-nanosecond"]], "polars.Expr.arr.diff": [[273, "polars-expr-arr-diff"]], "polars.Expr.dt.milliseconds": [[332, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.ordinal_day": [[339, "polars-expr-dt-ordinal-day"]], "polars.Expr.diff": [[315, "polars-expr-diff"]], "polars.LazyFrame.groupby": [[579, "polars-lazyframe-groupby"]], "Functions": [[559, "functions"], [549, "functions"]], "Conversion": [[559, "conversion"]], "Eager/Lazy functions": [[559, "eager-lazy-functions"]], "Parallelization": [[559, "parallelization"]], "StringCache": [[559, "stringcache"]], "polars.LazyFrame.select": [[604, "polars-lazyframe-select"]], "polars.LazyFrame.groupby_rolling": [[581, "polars-lazyframe-groupby-rolling"]], "Meta": [[552, "meta"]], "polars.LazyFrame.fetch": [[573, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_nan": [[574, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.groupby_dynamic": [[580, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.cache": [[563, "polars-lazyframe-cache"]], "polars.LazyFrame.first": [[577, "polars-lazyframe-first"]], "polars.LazyFrame.min": [[596, "polars-lazyframe-min"]], "polars.LazyFrame.dtypes": [[570, "polars-lazyframe-dtypes"]], "polars.LazyFrame.show_graph": [[607, "polars-lazyframe-show-graph"]], "API reference": [[560, "api-reference"]], "polars.LazyFrame.pipe": [[597, "polars-lazyframe-pipe"]], "polars.LazyFrame.shift_and_fill": [[606, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.melt": [[594, "polars-lazyframe-melt"]], "polars.LazyFrame.sink_parquet": [[609, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.clone": [[565, "polars-lazyframe-clone"]], "polars.LazyFrame.clear": [[564, "polars-lazyframe-clear"]], "Expressions": [[550, "expressions"]], "polars.LazyFrame.reverse": [[602, "polars-lazyframe-reverse"]], "polars.LazyFrame.inspect": [[583, "polars-lazyframe-inspect"]], "Window": [[558, "window"]], "Columns / names": [[547, "columns-names"]], "polars.LazyFrame.columns": [[567, "polars-lazyframe-columns"]], "polars.LazyFrame.drop_nulls": [[569, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.drop": [[568, "polars-lazyframe-drop"]], "polars.LazyFrame.join": [[585, "polars-lazyframe-join"]], "polars.LazyFrame.join_asof": [[586, "polars-lazyframe-join-asof"]], "polars.LazyFrame.schema": [[603, "polars-lazyframe-schema"]], "polars.LazyFrame.shift": [[605, "polars-lazyframe-shift"]], "polars.LazyFrame.profile": [[598, "polars-lazyframe-profile"]], "polars.LazyFrame.map": [[590, "polars-lazyframe-map"]], "Input/output": [[561, "input-output"]], "CSV": [[561, "csv"]], "Feather/ IPC": [[561, "feather-ipc"]], "Parquet": [[561, "parquet"]], "Database": [[561, "database"]], "JSON": [[561, "json"]], "AVRO": [[561, "avro"]], "Excel": [[561, "excel"]], "Delta Lake": [[561, "delta-lake"]], "Datasets": [[561, "datasets"]], "BatchedCsvReader": [[561, "batchedcsvreader"]], "polars.LazyFrame.read_json": [[600, "polars-lazyframe-read-json"]], "polars.LazyFrame.median": [[593, "polars-lazyframe-median"]], "polars.LazyFrame.quantile": [[599, "polars-lazyframe-quantile"]], "polars.LazyFrame.explode": [[572, "polars-lazyframe-explode"]], "polars.LazyFrame.sort": [[611, "polars-lazyframe-sort"]], "polars.LazyFrame.head": [[582, "polars-lazyframe-head"]], "polars.LazyFrame.slice": [[610, "polars-lazyframe-slice"]], "polars.LazyFrame.sink_ipc": [[608, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.collect": [[566, "polars-lazyframe-collect"]], "polars.LazyFrame.fill_null": [[575, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[576, "polars-lazyframe-filter"]], "polars.LazyFrame.limit": [[589, "polars-lazyframe-limit"]], "polars.LazyFrame.max": [[591, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[592, "polars-lazyframe-mean"]], "polars.LazyFrame.from_json": [[578, "polars-lazyframe-from-json"]], "polars.LazyFrame.last": [[587, "polars-lazyframe-last"]], "polars.LazyFrame.rename": [[601, "polars-lazyframe-rename"]], "polars.LazyFrame.merge_sorted": [[595, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.lazy": [[588, "polars-lazyframe-lazy"]], "polars.LazyFrame.explain": [[571, "polars-lazyframe-explain"]], "polars.LazyFrame.interpolate": [[584, "polars-lazyframe-interpolate"]], "polars.DataFrame.sort": [[197, "polars-dataframe-sort"]], "polars.DataFrame.shrink_to_fit": [[195, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.iter_rows": [[162, "polars-dataframe-iter-rows"]], "polars.DataFrame.median": [[170, "polars-dataframe-median"]], "polars.DataFrame.is_empty": [[159, "polars-dataframe-is-empty"]], "polars.DataFrame.interpolate": [[157, "polars-dataframe-interpolate"]], "polars.DataFrame.lazy": [[166, "polars-dataframe-lazy"]], "polars.DataFrame.rechunk": [[182, "polars-dataframe-rechunk"]], "polars.DataFrame.get_columns": [[147, "polars-dataframe-get-columns"]], "polars.DataFrame.is_duplicated": [[158, "polars-dataframe-is-duplicated"]], "polars.DataFrame.pipe": [[178, "polars-dataframe-pipe"]], "polars.DataFrame.tail": [[200, "polars-dataframe-tail"]], "polars.DataFrame.min": [[173, "polars-dataframe-min"]], "polars.DataFrame.limit": [[167, "polars-dataframe-limit"]], "polars.DataFrame.get_column": [[146, "polars-dataframe-get-column"]], "polars.DataFrame.merge_sorted": [[172, "polars-dataframe-merge-sorted"]], "polars.DataFrame.slice": [[196, "polars-dataframe-slice"]], "polars.DataFrame.to_dict": [[203, "polars-dataframe-to-dict"]], "polars.DataFrame.melt": [[171, "polars-dataframe-melt"]], "polars.DataFrame.fill_nan": [[140, "polars-dataframe-fill-nan"]], "polars.DataFrame.replace_at_idx": [[185, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.rows": [[188, "polars-dataframe-rows"]], "polars.DataFrame.dtypes": [[136, "polars-dataframe-dtypes"]], "polars.DataFrame.sum": [[199, "polars-dataframe-sum"]], "polars.DataFrame.frame_equal": [[145, "polars-dataframe-frame-equal"]], "polars.DataFrame.fold": [[144, "polars-dataframe-fold"]], "polars.DataFrame.join": [[164, "polars-dataframe-join"]], "polars.DataFrame.n_unique": [[175, "polars-dataframe-n-unique"]], "polars.DataFrame.head": [[153, "polars-dataframe-head"]], "polars.DataFrame.explode": [[138, "polars-dataframe-explode"]], "polars.DataFrame.row": [[187, "polars-dataframe-row"]], "polars.DataFrame.partition_by": [[177, "polars-dataframe-partition-by"]], "polars.DataFrame.groupby_rolling": [[151, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.pivot": [[179, "polars-dataframe-pivot"]], "polars.DataFrame.max": [[168, "polars-dataframe-max"]], "polars.DataFrame.estimated_size": [[137, "polars-dataframe-estimated-size"]], "polars.DataFrame.iter_slices": [[163, "polars-dataframe-iter-slices"]], "polars.DataFrame.replace": [[184, "polars-dataframe-replace"]], "polars.DataFrame.n_chunks": [[174, "polars-dataframe-n-chunks"]], "polars.DataFrame.quantile": [[181, "polars-dataframe-quantile"]], "polars.DataFrame.shift_and_fill": [[194, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.find_idx_by_name": [[143, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.item": [[161, "polars-dataframe-item"]], "polars.DataFrame.mean": [[169, "polars-dataframe-mean"]], "polars.DataFrame.to_arrow": [[202, "polars-dataframe-to-arrow"]], "polars.DataFrame.hstack": [[155, "polars-dataframe-hstack"]], "polars.DataFrame.select": [[191, "polars-dataframe-select"]], "polars.DataFrame.groupby": [[149, "polars-dataframe-groupby"]], "polars.DataFrame.join_asof": [[165, "polars-dataframe-join-asof"]], "polars.DataFrame.sample": [[189, "polars-dataframe-sample"]], "polars.DataFrame.shape": [[192, "polars-dataframe-shape"]], "polars.DataFrame.std": [[198, "polars-dataframe-std"]], "polars.DataFrame.glimpse": [[148, "polars-dataframe-glimpse"]], "polars.DataFrame.hash_rows": [[152, "polars-dataframe-hash-rows"]], "polars.DataFrame.height": [[154, "polars-dataframe-height"]], "polars.DataFrame.filter": [[142, "polars-dataframe-filter"]], "polars.DataFrame.schema": [[190, "polars-dataframe-schema"]], "polars.DataFrame.insert_at_idx": [[156, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.reverse": [[186, "polars-dataframe-reverse"]], "polars.DataFrame.take_every": [[201, "polars-dataframe-take-every"]], "polars.DataFrame.null_count": [[176, "polars-dataframe-null-count"]], "polars.DataFrame.extend": [[139, "polars-dataframe-extend"]], "polars.DataFrame.rename": [[183, "polars-dataframe-rename"]], "polars.DataFrame.fill_null": [[141, "polars-dataframe-fill-null"]], "polars.DataFrame.groupby_dynamic": [[150, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.product": [[180, "polars-dataframe-product"]], "polars.DataFrame.is_unique": [[160, "polars-dataframe-is-unique"]], "polars.DataFrame.shift": [[193, "polars-dataframe-shift"]], "polars.dataframe.groupby.GroupBy.last": [[229, "polars-dataframe-groupby-groupby-last"]], "polars.dataframe.groupby.GroupBy.__iter__": [[222, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.arctan": [[260, "polars-expr-arctan"]], "polars.dataframe.groupby.GroupBy.all": [[224, "polars-dataframe-groupby-groupby-all"]], "polars.DataFrame.to_pandas": [[207, "polars-dataframe-to-pandas"]], "polars.Expr.arccos": [[256, "polars-expr-arccos"]], "polars.DataFrame.transpose": [[211, "polars-dataframe-transpose"]], "polars.DataFrame.with_row_count": [[221, "polars-dataframe-with-row-count"]], "polars.Expr.arr.arg_min": [[269, "polars-expr-arr-arg-min"]], "polars.Expr.arg_max": [[262, "polars-expr-arg-max"]], "polars.DataFrame.vstack": [[218, "polars-dataframe-vstack"]], "polars.dataframe.groupby.GroupBy.sum": [[236, "polars-dataframe-groupby-groupby-sum"]], "Exceptions": [[247, "exceptions"]], "polars.Expr.arcsinh": [[259, "polars-expr-arcsinh"]], "polars.DataFrame.unnest": [[213, "polars-dataframe-unnest"]], "polars.dataframe.groupby.GroupBy.count": [[226, "polars-dataframe-groupby-groupby-count"]], "polars.DataFrame.to_series": [[208, "polars-dataframe-to-series"]], "polars.Expr.agg_groups": [[250, "polars-expr-agg-groups"]], "polars.dataframe.groupby.GroupBy.apply": [[225, "polars-dataframe-groupby-groupby-apply"]], "polars.DataFrame.update": [[215, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.quantile": [[235, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.arcsin": [[258, "polars-expr-arcsin"]], "polars.DataFrame.to_dummies": [[205, "polars-dataframe-to-dummies"]], "polars.Expr.arctanh": [[261, "polars-expr-arctanh"]], "polars.Expr.any": [[253, "polars-expr-any"]], "polars.dataframe.groupby.GroupBy.median": [[232, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.arr.contains": [[271, "polars-expr-arr-contains"]], "polars.dataframe.groupby.GroupBy.first": [[227, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.alias": [[251, "polars-expr-alias"]], "polars.DataFrame.var": [[217, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.head": [[228, "polars-dataframe-groupby-groupby-head"]], "polars.Expr.all": [[252, "polars-expr-all"]], "polars.dataframe.groupby.GroupBy.max": [[230, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.arccosh": [[257, "polars-expr-arccosh"]], "polars.DataFrame.to_dicts": [[204, "polars-dataframe-to-dicts"]], "polars.dataframe.groupby.GroupBy.mean": [[231, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.tail": [[237, "polars-dataframe-groupby-groupby-tail"]], "DataFrame": [[243, "dataframe"]], "polars.dataframe.groupby.GroupBy.min": [[233, "polars-dataframe-groupby-groupby-min"]], "polars.DataFrame.unstack": [[214, "polars-dataframe-unstack"]], "polars.DataFrame.top_k": [[210, "polars-dataframe-top-k"]], "polars.dataframe.groupby.GroupBy.n_unique": [[234, "polars-dataframe-groupby-groupby-n-unique"]], "polars.Expr.arg_min": [[263, "polars-expr-arg-min"]], "polars.DataFrame.width": [[219, "polars-dataframe-width"]], "polars.DataFrame.to_numpy": [[206, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_struct": [[209, "polars-dataframe-to-struct"]], "polars.Expr.abs": [[249, "polars-expr-abs"]], "polars.Expr.apply": [[255, "polars-expr-apply"]], "polars.Expr.arg_unique": [[266, "polars-expr-arg-unique"]], "polars.Expr.arr.concat": [[270, "polars-expr-arr-concat"]], "polars.Expr.append": [[254, "polars-expr-append"]], "polars.Expr.argsort": [[267, "polars-expr-argsort"]], "polars.DataFrame.with_columns": [[220, "polars-dataframe-with-columns"]], "polars.DataFrame.unique": [[212, "polars-dataframe-unique"]], "polars.Expr.arg_sort": [[264, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[265, "polars-expr-arg-true"]], "Data types": [[246, "data-types"]], "Numeric": [[246, "numeric"]], "Nested": [[246, "nested"]], "Other": [[246, "other"]], "polars.Expr.arr.arg_max": [[268, "polars-expr-arr-arg-max"]], "polars.dataframe.groupby.GroupBy.agg": [[223, "polars-dataframe-groupby-groupby-agg"]], "polars.DataFrame.upsample": [[216, "polars-dataframe-upsample"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "stringcache (class in polars)": [[51, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__"]], "struct (class in polars)": [[52, "polars.Struct"]], "__init__() (polars.struct method)": [[52, "polars.Struct.__init__"]], "time (class in polars)": [[53, "polars.Time"]], "__init__() (polars.time method)": [[53, "polars.Time.__init__"]], "uint16 (class in polars)": [[54, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[54, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[55, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[55, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[56, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[56, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[57, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[57, "polars.UInt8.__init__"]], "unknown (class in polars)": [[58, "polars.Unknown"]], "__init__() (polars.unknown method)": [[58, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[59, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[59, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[60, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[61, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[62, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[63, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[64, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[65, "polars.arg_where"]], "build_info() (in module polars)": [[66, "polars.build_info"]], "collect_all() (in module polars)": [[67, "polars.collect_all"]], "concat() (in module polars)": [[68, "polars.concat"]], "cut() (in module polars)": [[69, "polars.cut"]], "date_range() (in module polars)": [[70, "polars.date_range"]], "arrowerror": [[71, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[72, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[73, "polars.exceptions.ComputeError"]], "duplicateerror": [[74, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[75, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[76, "polars.exceptions.NoDataError"]], "norowsreturned": [[77, "polars.exceptions.NoRowsReturned"]], "panicexception": [[78, "polars.exceptions.PanicException"]], "rowsexception": [[79, "polars.exceptions.RowsException"]], "schemaerror": [[80, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[81, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[82, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[83, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[84, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[85, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[86, "polars.from_dataframe"]], "from_dict() (in module polars)": [[87, "polars.from_dict"]], "from_dicts() (in module polars)": [[88, "polars.from_dicts"]], "from_numpy() (in module polars)": [[89, "polars.from_numpy"]], "from_pandas() (in module polars)": [[90, "polars.from_pandas"]], "from_records() (in module polars)": [[91, "polars.from_records"]], "get_dummies() (in module polars)": [[92, "polars.get_dummies"]], "get_index_type() (in module polars)": [[93, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[94, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[95, "polars.ones"]], "read_avro() (in module polars)": [[96, "polars.read_avro"]], "read_csv() (in module polars)": [[97, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[98, "polars.read_csv_batched"]], "read_database() (in module polars)": [[99, "polars.read_database"]], "read_delta() (in module polars)": [[100, "polars.read_delta"]], "read_excel() (in module polars)": [[101, "polars.read_excel"]], "read_ipc() (in module polars)": [[102, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[103, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[104, "polars.read_json"]], "read_ndjson() (in module polars)": [[105, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[106, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[107, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[108, "polars.scan_csv"]], "scan_delta() (in module polars)": [[109, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[110, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[111, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[112, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[113, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[114, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[115, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[116, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[117, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[117, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[118, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[119, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[121, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[122, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[123, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[126, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[127, "polars.DataFrame.apply"]], "clear() (polars.dataframe method)": [[128, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[129, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[130, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[131, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[132, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[133, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[134, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[135, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[136, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[137, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[138, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[139, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[140, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[141, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[142, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[143, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[144, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[145, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[146, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[147, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[148, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[149, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[150, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[151, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[152, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[153, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[154, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[155, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[156, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[157, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[158, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[159, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[160, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[161, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[162, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[163, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[164, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[165, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[166, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[167, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[168, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[169, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[170, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[171, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[172, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[173, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[174, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[175, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[176, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[177, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[178, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[179, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[180, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[181, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[182, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[183, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[184, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[185, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[186, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[187, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[188, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[189, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[190, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[191, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[192, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[193, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[194, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[195, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[196, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[197, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[198, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[199, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[200, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[201, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[202, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[203, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[204, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[205, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[206, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[207, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[208, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[209, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[210, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[211, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[212, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[213, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[214, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[215, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[216, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[217, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[218, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[219, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[220, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[221, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[222, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[223, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[224, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[225, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[226, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[227, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[228, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[249, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[250, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[251, "polars.Expr.alias"]], "all() (polars.expr method)": [[252, "polars.Expr.all"]], "any() (polars.expr method)": [[253, "polars.Expr.any"]], "append() (polars.expr method)": [[254, "polars.Expr.append"]], "apply() (polars.expr method)": [[255, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[256, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[257, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[258, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[259, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[260, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[261, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[262, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[263, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[264, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[265, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[266, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[267, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[268, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[269, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[270, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[271, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[272, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[273, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[274, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[275, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[276, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[277, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[278, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[279, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[280, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[281, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[282, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[283, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[284, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[285, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[286, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[287, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[288, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[289, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[290, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[291, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[292, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[293, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[294, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[295, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[296, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[297, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[298, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[299, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[300, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[301, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[302, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[303, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[304, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[305, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[306, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[307, "polars.Expr.cosh"]], "count() (polars.expr method)": [[308, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[309, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[310, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[311, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[312, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[313, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[314, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[315, "polars.Expr.diff"]], "dot() (polars.expr method)": [[316, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[317, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[318, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[319, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[320, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[321, "polars.Expr.dt.convert_time_zone"]], "day() (polars.expr.dt method)": [[322, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[323, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[324, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[325, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[326, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[327, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[328, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[329, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[330, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[331, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[332, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[333, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[334, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[335, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[336, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[337, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[338, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[339, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[340, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[341, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[342, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[343, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[344, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[345, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[346, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[347, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[348, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[349, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[350, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[351, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[352, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[353, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[354, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[355, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[356, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[357, "polars.Expr.exp"]], "explode() (polars.expr method)": [[358, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[359, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[360, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[361, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[362, "polars.Expr.filter"]], "first() (polars.expr method)": [[363, "polars.Expr.first"]], "flatten() (polars.expr method)": [[364, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[365, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[366, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[367, "polars.Expr.hash"]], "head() (polars.expr method)": [[368, "polars.Expr.head"]], "inspect() (polars.expr method)": [[369, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[370, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[371, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[372, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[373, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[374, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[375, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[376, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[377, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[378, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[379, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[380, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[381, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[382, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[383, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[384, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[385, "polars.Expr.last"]], "len() (polars.expr method)": [[386, "polars.Expr.len"]], "limit() (polars.expr method)": [[387, "polars.Expr.limit"]], "list() (polars.expr method)": [[388, "polars.Expr.list"]], "log() (polars.expr method)": [[389, "polars.Expr.log"]], "log10() (polars.expr method)": [[390, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[391, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[392, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[393, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[394, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[395, "polars.Expr.max"]], "mean() (polars.expr method)": [[396, "polars.Expr.mean"]], "median() (polars.expr method)": [[397, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[398, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[399, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[400, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[401, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[402, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[403, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[404, "polars.Expr.min"]], "mode() (polars.expr method)": [[405, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[406, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[407, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[408, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[409, "polars.Expr.null_count"]], "over() (polars.expr method)": [[410, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[411, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[412, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[413, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[414, "polars.Expr.prefix"]], "product() (polars.expr method)": [[415, "polars.Expr.product"]], "quantile() (polars.expr method)": [[416, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[417, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[418, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[419, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[420, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[421, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[422, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[423, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[424, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[425, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[426, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[427, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[428, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[429, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[430, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[431, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[432, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[433, "polars.Expr.round"]], "sample() (polars.expr method)": [[434, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[435, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[436, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[437, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[438, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[439, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[440, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[441, "polars.Expr.sign"]], "sin() (polars.expr method)": [[442, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[443, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[444, "polars.Expr.skew"]], "slice() (polars.expr method)": [[445, "polars.Expr.slice"]], "sort() (polars.expr method)": [[446, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[447, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[448, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[449, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[450, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[451, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[452, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[453, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[454, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[455, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[456, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[457, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[458, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[459, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[460, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[461, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[462, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[463, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[464, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[465, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[466, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[467, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[468, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[469, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[470, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[471, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[472, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[473, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[474, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[475, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[476, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[477, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[478, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[479, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[480, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[481, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[482, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[483, "polars.Expr.sum"]], "tail() (polars.expr method)": [[484, "polars.Expr.tail"]], "take() (polars.expr method)": [[485, "polars.Expr.take"]], "take_every() (polars.expr method)": [[486, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[487, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[488, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[489, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[490, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[491, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[492, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[493, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[494, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[495, "polars.Expr.var"]], "where() (polars.expr method)": [[496, "polars.Expr.where"]], "all() (in module polars)": [[497, "polars.all"]], "any() (in module polars)": [[498, "polars.any"]], "apply() (in module polars)": [[499, "polars.apply"]], "arange() (in module polars)": [[500, "polars.arange"]], "arg_sort_by() (in module polars)": [[501, "polars.arg_sort_by"]], "avg() (in module polars)": [[502, "polars.avg"]], "coalesce() (in module polars)": [[503, "polars.coalesce"]], "col() (in module polars)": [[504, "polars.col"]], "concat_list() (in module polars)": [[505, "polars.concat_list"]], "concat_str() (in module polars)": [[506, "polars.concat_str"]], "corr() (in module polars)": [[507, "polars.corr"]], "count() (in module polars)": [[508, "polars.count"]], "cov() (in module polars)": [[509, "polars.cov"]], "cumfold() (in module polars)": [[510, "polars.cumfold"]], "cumreduce() (in module polars)": [[511, "polars.cumreduce"]], "cumsum() (in module polars)": [[512, "polars.cumsum"]], "date() (in module polars)": [[513, "polars.date"]], "datetime() (in module polars)": [[514, "polars.datetime"]], "duration() (in module polars)": [[515, "polars.duration"]], "element() (in module polars)": [[516, "polars.element"]], "exclude() (in module polars)": [[517, "polars.exclude"]], "first() (in module polars)": [[518, "polars.first"]], "fold() (in module polars)": [[519, "polars.fold"]], "format() (in module polars)": [[520, "polars.format"]], "from_epoch() (in module polars)": [[521, "polars.from_epoch"]], "groups() (in module polars)": [[522, "polars.groups"]], "head() (in module polars)": [[523, "polars.head"]], "list() (in module polars)": [[524, "polars.list"]], "lit() (in module polars)": [[525, "polars.lit"]], "map() (in module polars)": [[526, "polars.map"]], "max() (in module polars)": [[527, "polars.max"]], "mean() (in module polars)": [[528, "polars.mean"]], "median() (in module polars)": [[529, "polars.median"]], "min() (in module polars)": [[530, "polars.min"]], "n_unique() (in module polars)": [[531, "polars.n_unique"]], "pearson_corr() (in module polars)": [[532, "polars.pearson_corr"]], "quantile() (in module polars)": [[533, "polars.quantile"]], "reduce() (in module polars)": [[534, "polars.reduce"]], "repeat() (in module polars)": [[535, "polars.repeat"]], "select() (in module polars)": [[536, "polars.select"]], "spearman_rank_corr() (in module polars)": [[537, "polars.spearman_rank_corr"]], "std() (in module polars)": [[538, "polars.std"]], "struct() (in module polars)": [[539, "polars.struct"]], "sum() (in module polars)": [[540, "polars.sum"]], "tail() (in module polars)": [[541, "polars.tail"]], "var() (in module polars)": [[542, "polars.var"]], "when() (in module polars)": [[543, "polars.when"]], "cache() (polars.lazyframe method)": [[563, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[564, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[565, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[566, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[567, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[568, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[569, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[570, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[571, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[572, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[573, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[574, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[575, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[576, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[577, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[578, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[579, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[580, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[581, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[582, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[583, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[584, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[585, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[586, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[587, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[588, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[589, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[590, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[591, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[592, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[593, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[594, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[595, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[596, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[597, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[598, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[599, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[600, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[601, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[602, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[603, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[604, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[605, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[606, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[607, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[608, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[609, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[610, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[611, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[612, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[613, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[614, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[615, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[616, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[617, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[618, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[619, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[620, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[621, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[622, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[623, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[624, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[625, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[626, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[627, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[628, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[629, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[630, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[631, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[632, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[633, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[634, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[635, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[636, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[637, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[638, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[639, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[640, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[648, "polars.Series.abs"]], "alias() (polars.series method)": [[649, "polars.Series.alias"]], "all() (polars.series method)": [[650, "polars.Series.all"]], "any() (polars.series method)": [[651, "polars.Series.any"]], "append() (polars.series method)": [[652, "polars.Series.append"]], "apply() (polars.series method)": [[653, "polars.Series.apply"]], "arccos() (polars.series method)": [[654, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[655, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[656, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[657, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[658, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[659, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[660, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[661, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[662, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[663, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[664, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[665, "polars.Series.argsort"]], "arr (polars.series attribute)": [[666, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[667, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[668, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[669, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[670, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[671, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[672, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[673, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[674, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[675, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[676, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[677, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[678, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[679, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[680, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[681, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[682, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[683, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[684, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[685, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[686, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[687, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[688, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[689, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[690, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[691, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[692, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[693, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[694, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[695, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[696, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[697, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[698, "polars.Series.cast"]], "cat (polars.series attribute)": [[699, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[700, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[701, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[702, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[703, "polars.Series.clear"]], "clip() (polars.series method)": [[704, "polars.Series.clip"]], "clip_max() (polars.series method)": [[705, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[706, "polars.Series.clip_min"]], "clone() (polars.series method)": [[707, "polars.Series.clone"]], "cos() (polars.series method)": [[708, "polars.Series.cos"]], "cosh() (polars.series method)": [[709, "polars.Series.cosh"]], "cummax() (polars.series method)": [[710, "polars.Series.cummax"]], "cummin() (polars.series method)": [[711, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[712, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[713, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[714, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[715, "polars.Series.cut"]], "describe() (polars.series method)": [[716, "polars.Series.describe"]], "diff() (polars.series method)": [[717, "polars.Series.diff"]], "dot() (polars.series method)": [[718, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[719, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[720, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[721, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[722, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[723, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[724, "polars.Series.dt.convert_time_zone"]], "day() (polars.series.dt method)": [[725, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[726, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[727, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[728, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[729, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[730, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[731, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[732, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[733, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[734, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[735, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[736, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[737, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[738, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[739, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[740, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[741, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[742, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[743, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[744, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[745, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[746, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[747, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[748, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[749, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[750, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[751, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[752, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[753, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[754, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[755, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[756, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[757, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[758, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[759, "polars.Series.dtype"]], "entropy() (polars.series method)": [[760, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[761, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[762, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[763, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[764, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[765, "polars.Series.exp"]], "explode() (polars.series method)": [[766, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[767, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[768, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[769, "polars.Series.fill_null"]], "filter() (polars.series method)": [[770, "polars.Series.filter"]], "flags (polars.series attribute)": [[771, "polars.Series.flags"]], "floor() (polars.series method)": [[772, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[773, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[774, "polars.Series.has_validity"]], "hash() (polars.series method)": [[775, "polars.Series.hash"]], "head() (polars.series method)": [[776, "polars.Series.head"]], "hist() (polars.series method)": [[777, "polars.Series.hist"]], "inner_dtype (polars.series attribute)": [[778, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[779, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[780, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[781, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[782, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[783, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[784, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[785, "polars.Series.is_first"]], "is_float() (polars.series method)": [[786, "polars.Series.is_float"]], "is_in() (polars.series method)": [[787, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[788, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[789, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[790, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[791, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[792, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[793, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[794, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[795, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[796, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[797, "polars.Series.is_utf8"]], "item() (polars.series method)": [[798, "polars.Series.item"]], "kurtosis() (polars.series method)": [[799, "polars.Series.kurtosis"]], "len() (polars.series method)": [[800, "polars.Series.len"]], "limit() (polars.series method)": [[801, "polars.Series.limit"]], "log() (polars.series method)": [[802, "polars.Series.log"]], "log10() (polars.series method)": [[803, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[804, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[805, "polars.Series.map_dict"]], "max() (polars.series method)": [[806, "polars.Series.max"]], "mean() (polars.series method)": [[807, "polars.Series.mean"]], "median() (polars.series method)": [[808, "polars.Series.median"]], "min() (polars.series method)": [[809, "polars.Series.min"]], "mode() (polars.series method)": [[810, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[811, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[812, "polars.Series.n_unique"]], "name (polars.series attribute)": [[813, "polars.Series.name"]], "nan_max() (polars.series method)": [[814, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[815, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[816, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[817, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[818, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[819, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[820, "polars.Series.peak_min"]], "product() (polars.series method)": [[821, "polars.Series.product"]], "qcut() (polars.series method)": [[822, "polars.Series.qcut"]], "quantile() (polars.series method)": [[823, "polars.Series.quantile"]], "rank() (polars.series method)": [[824, "polars.Series.rank"]], "rechunk() (polars.series method)": [[825, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[826, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[827, "polars.Series.rename"]], "reshape() (polars.series method)": [[828, "polars.Series.reshape"]], "reverse() (polars.series method)": [[829, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[830, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[831, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[832, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[833, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[834, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[835, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[836, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[837, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[838, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[839, "polars.Series.rolling_var"]], "round() (polars.series method)": [[840, "polars.Series.round"]], "sample() (polars.series method)": [[841, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[842, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[843, "polars.Series.series_equal"]], "set() (polars.series method)": [[844, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[845, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[846, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[847, "polars.Series.shape"]], "shift() (polars.series method)": [[848, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[849, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[850, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[851, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[852, "polars.Series.shuffle"]], "sign() (polars.series method)": [[853, "polars.Series.sign"]], "sin() (polars.series method)": [[854, "polars.Series.sin"]], "sinh() (polars.series method)": [[855, "polars.Series.sinh"]], "skew() (polars.series method)": [[856, "polars.Series.skew"]], "slice() (polars.series method)": [[857, "polars.Series.slice"]], "sort() (polars.series method)": [[858, "polars.Series.sort"]], "sqrt() (polars.series method)": [[859, "polars.Series.sqrt"]], "std() (polars.series method)": [[860, "polars.Series.std"]], "str (polars.series attribute)": [[861, "polars.Series.str"]], "concat() (polars.series.str method)": [[862, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[863, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[864, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[865, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[866, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[867, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[868, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[869, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[870, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[871, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[872, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[873, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[874, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[875, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[876, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[877, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[878, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[879, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[880, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[881, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[882, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[883, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[884, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[885, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[886, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[887, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[888, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[889, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[890, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[891, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[892, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[893, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[894, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[895, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[896, "polars.Series.sum"]], "tail() (polars.series method)": [[897, "polars.Series.tail"]], "take() (polars.series method)": [[898, "polars.Series.take"]], "take_every() (polars.series method)": [[899, "polars.Series.take_every"]], "tan() (polars.series method)": [[900, "polars.Series.tan"]], "tanh() (polars.series method)": [[901, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[902, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[903, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[904, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[905, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[906, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[907, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[908, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[909, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[910, "polars.Series.top_k"]], "unique() (polars.series method)": [[911, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[912, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[913, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[914, "polars.Series.value_counts"]], "var() (polars.series method)": [[915, "polars.Series.var"]], "view() (polars.series method)": [[916, "polars.Series.view"]], "zip_with() (polars.series method)": [[917, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[932, "polars.SQLContext"]]}})